

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr  3 14:24:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.41
    55                           ; Generated 25/01/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18LF4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001792                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _lightStatus
    94  001792  01                 	db	1
    95                           
    96                           ;initializer for _rate
    97  001793  14                 	db	20
    98                           
    99                           	psect	idataBANK0
   100  00171C                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for main@F2922
   104  00171C  50                 	db	80
   105  00171D  52                 	db	82
   106  00171E  4F                 	db	79
   107  00171F  47                 	db	71
   108  001720  52                 	db	82
   109  001721  41                 	db	65
   110  001722  4D                 	db	77
   111  001723  20                 	db	32
   112  001724  42                 	db	66
   113  001725  45                 	db	69
   114  001726  47                 	db	71
   115  001727  49                 	db	73
   116  001728  4E                 	db	78
   117  001729  00                 	db	0
   118  00172A  00                 	db	0
   119  0000                     _T2CONbits	set	4042
   120  0000                     _CCPR2L	set	4027
   121  0000                     _PR2	set	4043
   122  0000                     _T2CON	set	4042
   123  0000                     _CCP2CON	set	4026
   124  0000                     _TRISCbits	set	3988
   125  0000                     _SSPBUF	set	4041
   126  0000                     _PIR1bits	set	3998
   127  0000                     _SSPCON2bits	set	4037
   128  0000                     _SSPCON1bits	set	4038
   129  0000                     _LATB	set	3978
   130  0000                     _PORTD	set	3971
   131  0000                     _PORTCbits	set	3970
   132  0000                     _T0CON	set	4053
   133  0000                     _PORTB	set	3969
   134  0000                     _TRISC	set	3988
   135  0000                     _TRISD	set	3989
   136  0000                     _TRISA	set	3986
   137  0000                     _TRISB	set	3987
   138  0000                     _INTCONbits	set	4082
   139                           
   140                           	psect	smallconst
   141  001000                     __psmallconst:
   142                           	opt stack 0
   143  001000  00                 	db	0
   144  001001                     STR_2:
   145  001001  4C                 	db	76	;'L'
   146  001002  49                 	db	73	;'I'
   147  001003  47                 	db	71	;'G'
   148  001004  48                 	db	72	;'H'
   149  001005  54                 	db	84	;'T'
   150  001006  5F                 	db	95	;'_'
   151  001007  53                 	db	83	;'S'
   152  001008  57                 	db	87	;'W'
   153  001009  49                 	db	73	;'I'
   154  00100A  54                 	db	84	;'T'
   155  00100B  43                 	db	67	;'C'
   156  00100C  48                 	db	72	;'H'
   157  00100D  00                 	db	0
   158  00100E                     STR_1:
   159  00100E  20                 	db	32
   160  00100F  00                 	db	0
   161                           
   162                           ; #config settings
   163  001010  00                 	db	0	; dummy byte at the end
   164  0000                     
   165                           	psect	cinit
   166  00147E                     __pcinit:
   167                           	opt stack 0
   168  00147E                     start_initialization:
   169                           	opt stack 0
   170  00147E                     __initialization:
   171                           	opt stack 0
   172                           
   173                           ; Initialize objects allocated to BANK0 (15 bytes)
   174                           ; load TBLPTR registers with __pidataBANK0
   175  00147E  0E1C               	movlw	low __pidataBANK0
   176  001480  6EF6               	movwf	tblptrl,c
   177  001482  0E17               	movlw	high __pidataBANK0
   178  001484  6EF7               	movwf	tblptrh,c
   179  001486  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   180  001488  6EF8               	movwf	tblptru,c
   181  00148A  EE00  F093         	lfsr	0,__pdataBANK0
   182  00148E  EE10 F00F          	lfsr	1,15
   183  001492                     copy_data0:
   184  001492  0009               	tblrd		*+
   185  001494  CFF5 FFEE          	movff	tablat,postinc0
   186  001498  50E5               	movf	postdec1,w,c
   187  00149A  50E1               	movf	fsr1l,w,c
   188  00149C  E1FA               	bnz	copy_data0
   189                           
   190                           ; Initialize objects allocated to COMRAM (2 bytes)
   191                           ; load TBLPTR registers with __pidataCOMRAM
   192  00149E  0E92               	movlw	low __pidataCOMRAM
   193  0014A0  6EF6               	movwf	tblptrl,c
   194  0014A2  0E17               	movlw	high __pidataCOMRAM
   195  0014A4  6EF7               	movwf	tblptrh,c
   196  0014A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   197  0014A8  6EF8               	movwf	tblptru,c
   198  0014AA  0009               	tblrd		*+	;fetch initializer
   199  0014AC  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   200  0014B0  0009               	tblrd		*+	;fetch initializer
   201  0014B2  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   202                           
   203                           ; Clear objects allocated to COMRAM (25 bytes)
   204  0014B6  EE00  F043         	lfsr	0,__pbssCOMRAM
   205  0014BA  0E19               	movlw	25
   206  0014BC                     clear_0:
   207  0014BC  6AEE               	clrf	postinc0,c
   208  0014BE  06E8               	decf	wreg,f,c
   209  0014C0  E1FD               	bnz	clear_0
   210  0014C2                     end_of_initialization:
   211                           	opt stack 0
   212  0014C2                     __end_of__initialization:
   213                           	opt stack 0
   214  0014C2  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   215  0014C4  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   216  0014C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   217  0014C8  6EF8               	movwf	tblptru,c
   218  0014CA  0100               	movlb	0
   219  0014CC  EF09  F008         	goto	_main	;jump to C main() function
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           postdec1	equ	0xFE5
   227                           fsr1l	equ	0xFE1
   228                           
   229                           	psect	bssCOMRAM
   230  000043                     __pbssCOMRAM:
   231                           	opt stack 0
   232  000043                     _my_stack:
   233                           	opt stack 0
   234  000043                     	ds	20
   235  000057                     _iter:
   236                           	opt stack 0
   237  000057                     	ds	2
   238  000059                     __addr:
   239                           	opt stack 0
   240  000059                     	ds	1
   241  00005A                     _ack:
   242                           	opt stack 0
   243  00005A                     	ds	1
   244  00005B                     _valuePort:
   245                           	opt stack 0
   246  00005B                     	ds	1
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataCOMRAM
   257  00005C                     __pdataCOMRAM:
   258                           	opt stack 0
   259  00005C                     _lightStatus:
   260                           	opt stack 0
   261  00005C                     	ds	1
   262  00005D                     _rate:
   263                           	opt stack 0
   264  00005D                     	ds	1
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	dataBANK0
   275  000093                     __pdataBANK0:
   276                           	opt stack 0
   277  000093                     main@F2922:
   278                           	opt stack 0
   279  000093                     	ds	15
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	cstackBANK0
   290  000080                     __pcstackBANK0:
   291                           	opt stack 0
   292  000080                     ??_main:
   293                           
   294                           ; 1 bytes @ 0x0
   295  000080                     	ds	2
   296  000082                     main@str:
   297                           	opt stack 0
   298                           
   299                           ; 15 bytes @ 0x2
   300  000082                     	ds	15
   301  000091                     main@ges:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x11
   305  000091                     	ds	1
   306  000092                     main@pos:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x12
   310  000092                     	ds	1
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	cstackCOMRAM
   321  000001                     __pcstackCOMRAM:
   322                           	opt stack 0
   323  000001                     ??_high_isr:
   324  000001                     
   325                           ; 2 bytes @ 0x0
   326  000001                     	ds	16
   327  000011                     ??_low_isr:
   328                           
   329                           ; 1 bytes @ 0x10
   330  000011                     	ds	17
   331  000022                     ??_initLCD:
   332  000022                     ??_lcdWriteChar:
   333  000022                     ?___awmod:
   334                           	opt stack 0
   335  000022                     ?___lwdiv:
   336                           	opt stack 0
   337  000022                     ?___lwmod:
   338                           	opt stack 0
   339  000022                     sendByte@c:
   340                           	opt stack 0
   341  000022                     receiveByte@retc:
   342                           	opt stack 0
   343  000022                     setDutyCycle@x:
   344                           	opt stack 0
   345  000022                     initQueue@i:
   346                           	opt stack 0
   347  000022                     ___awmod@dividend:
   348                           	opt stack 0
   349  000022                     ___lwdiv@dividend:
   350                           	opt stack 0
   351  000022                     ___lwmod@dividend:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x21
   355  000022                     	ds	1
   356  000023                     ??_dutyCycleDown:
   357  000023                     lcdWriteChar@leter:
   358                           	opt stack 0
   359  000023                     writeDataByte@reg:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x22
   363  000023                     	ds	1
   364  000024                     writeDataByte@addr:
   365                           	opt stack 0
   366  000024                     lcdWriteString@str:
   367                           	opt stack 0
   368  000024                     ___awmod@divisor:
   369                           	opt stack 0
   370  000024                     ___lwdiv@divisor:
   371                           	opt stack 0
   372  000024                     ___lwmod@divisor:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x23
   376  000024                     	ds	1
   377  000025                     readDataByte@reg:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x24
   381  000025                     	ds	1
   382  000026                     ??_lcdWriteString:
   383  000026                     readDataByte@retc:
   384                           	opt stack 0
   385  000026                     ___awmod@counter:
   386                           	opt stack 0
   387  000026                     ___lwdiv@counter:
   388                           	opt stack 0
   389  000026                     ___lwmod@counter:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x25
   393  000026                     	ds	1
   394  000027                     readDataByte@addr:
   395                           	opt stack 0
   396  000027                     ___awmod@sign:
   397                           	opt stack 0
   398  000027                     _dutyCycleDown$584:
   399                           	opt stack 0
   400  000027                     ___lwdiv@quotient:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x26
   404  000027                     	ds	1
   405  000028                     ?_myQueueCheck:
   406                           	opt stack 0
   407  000028                     readZ@z_pos:
   408                           	opt stack 0
   409  000028                     readGesture@gesture:
   410                           	opt stack 0
   411  000028                     lcdWriteString@i:
   412                           	opt stack 0
   413  000028                     myQueuePush@x:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x27
   417  000028                     	ds	1
   418  000029                     lcdWriteUI@num:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x28
   422  000029                     	ds	1
   423  00002A                     
   424                           ; 1 bytes @ 0x29
   425  00002A                     	ds	1
   426  00002B                     lcdWriteUI@stack:
   427                           	opt stack 0
   428                           
   429                           ; 20 bytes @ 0x2A
   430  00002B                     	ds	1
   431  00002C                     myQueueCheck@i:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2B
   435  00002C                     	ds	19
   436  00003F                     lcdWriteUI@i:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x3E
   440  00003F                     	ds	2
   441  000041                     lcdWriteInt@num:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x40
   445  000041                     	ds	2
   446  000043                     tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           
   455                           ; 1 bytes @ 0x42
   456 ;;
   457 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   458 ;;
   459 ;; *************** function _main *****************
   460 ;; Defined at:
   461 ;;		line 44 in file "main.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  ges             1   17[BANK0 ] enum E2865
   466 ;;  str            15    2[BANK0 ] unsigned char [15]
   467 ;;  pos             1   18[BANK0 ] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  2   71[None  ] int 
   470 ;; Registers used:
   471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;Total ram usage:       19 bytes
   482 ;; Hardware stack levels required when called:    6
   483 ;; This function calls:
   484 ;;		_ConfigureOscillator
   485 ;;		_InitApp
   486 ;;		_initLCD
   487 ;;		_initPWM
   488 ;;		_initQueue
   489 ;;		_lcdWriteInt
   490 ;;		_lcdWriteString
   491 ;;		_lessLight
   492 ;;		_lightSwitch
   493 ;;		_moreLight
   494 ;;		_myQueueCheck
   495 ;;		_myQueuePush
   496 ;;		_readGesture
   497 ;;		_readZ
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text0
   504  001012                     __ptext0:
   505                           	opt stack 0
   506  001012                     _main:
   507                           	opt stack 25
   508                           
   509                           ;main.c: 47: ConfigureOscillator();
   510                           
   511                           ;incstack = 0
   512  001012  ECCB  F00B         	call	_ConfigureOscillator	;wreg free
   513                           
   514                           ;main.c: 50: InitApp();
   515  001016  ECCA  F00B         	call	_InitApp	;wreg free
   516                           
   517                           ;main.c: 52: TRISB=0X00;
   518  00101A  0E00               	movlw	0
   519  00101C  6E93               	movwf	3987,c	;volatile
   520                           
   521                           ;main.c: 53: TRISA=0XFF;
   522  00101E  6892               	setf	3986,c	;volatile
   523                           
   524                           ;main.c: 54: TRISD = 0x00;
   525  001020  0E00               	movlw	0
   526  001022  6E95               	movwf	3989,c	;volatile
   527                           
   528                           ;main.c: 55: TRISC = 0b00011000;
   529  001024  0E18               	movlw	24
   530  001026  6E94               	movwf	3988,c	;volatile
   531                           
   532                           ;main.c: 56: PORTB=0X00;
   533  001028  0E00               	movlw	0
   534  00102A  6E81               	movwf	3969,c	;volatile
   535                           
   536                           ;main.c: 58: T0CON = 0b10001000;
   537  00102C  0E88               	movlw	136
   538  00102E  6ED5               	movwf	4053,c	;volatile
   539                           
   540                           ;main.c: 59: INTCONbits.TMR0IE = 1;
   541  001030  8AF2               	bsf	intcon,5,c	;volatile
   542                           
   543                           ;main.c: 63: _delay((unsigned long)((70)*(8000000/4000.0)));
   544  001032  0EB6               	movlw	182
   545  001034  0100               	movlb	0	; () banked
   546  001036  6F80               	movwf	??_main& (0+255),b
   547  001038  0ED0               	movlw	208
   548  00103A                     u1127:
   549  00103A  2EE8               	decfsz	wreg,f,c
   550  00103C  D7FE               	bra	u1127
   551  00103E  2F80               	decfsz	??_main& (0+255),f,b
   552  001040  D7FC               	bra	u1127
   553  001042  F000               	nop	
   554                           
   555                           ;main.c: 64: initLCD();
   556  001044  ECE1  F008         	call	_initLCD	;wreg free
   557                           
   558                           ;main.c: 65: unsigned char str[15] = "PROGRAM BEGIN";
   559  001048  EE20  F093         	lfsr	2,main@F2922
   560  00104C  EE10  F082         	lfsr	1,main@str
   561  001050  0E0E               	movlw	14
   562  001052                     u1101:
   563  001052  CFDB FFE3          	movff	plusw2,plusw1
   564  001056  06E8               	decf	wreg,f,c
   565  001058  E2FC               	bc	u1101
   566                           
   567                           ;main.c: 66: lcdWriteString(str);
   568  00105A  0E82               	movlw	low main@str
   569  00105C  6E24               	movwf	lcdWriteString@str,c
   570  00105E  0E00               	movlw	high main@str
   571  001060  6E25               	movwf	lcdWriteString@str+1,c
   572  001062  EC69  F009         	call	_lcdWriteString	;wreg free
   573                           
   574                           ;main.c: 67: _delay((unsigned long)((500)*(8000000/4000.0)));
   575  001066  0E06               	movlw	6
   576  001068  0100               	movlb	0	; () banked
   577  00106A  6F81               	movwf	(??_main+1)& (0+255),b
   578  00106C  0E13               	movlw	19
   579  00106E  0100               	movlb	0	; () banked
   580  001070  6F80               	movwf	??_main& (0+255),b
   581  001072  0EAD               	movlw	173
   582  001074                     u1137:
   583  001074  2EE8               	decfsz	wreg,f,c
   584  001076  D7FE               	bra	u1137
   585  001078  2F80               	decfsz	??_main& (0+255),f,b
   586  00107A  D7FC               	bra	u1137
   587  00107C  2F81               	decfsz	(??_main+1)& (0+255),f,b
   588  00107E  D7FA               	bra	u1137
   589  001080  D000               	nop2	
   590                           
   591                           ;main.c: 71: unsigned char pos;
   592                           ;main.c: 72: _addr = 0x20;
   593  001082  0E20               	movlw	32
   594  001084  6E59               	movwf	__addr,c
   595                           
   596                           ;main.c: 73: initPWM();
   597  001086  EC73  F00B         	call	_initPWM	;wreg free
   598                           
   599                           ;main.c: 74: initQueue();
   600  00108A  ECF4  F00A         	call	_initQueue	;wreg free
   601  00108E                     l2195:
   602                           
   603                           ;main.c: 81: pos = readZ();
   604  00108E  EC7E  F00B         	call	_readZ	;wreg free
   605  001092  0100               	movlb	0	; () banked
   606  001094  6F92               	movwf	main@pos& (0+255),b
   607                           
   608                           ; BSR set to: 0
   609                           ;main.c: 82: lcdWriteString(" ");
   610  001096  0E0E               	movlw	low STR_1
   611  001098  6E24               	movwf	lcdWriteString@str,c
   612  00109A  0E10               	movlw	high STR_1
   613  00109C  6E25               	movwf	lcdWriteString@str+1,c
   614  00109E  EC69  F009         	call	_lcdWriteString	;wreg free
   615                           
   616                           ;main.c: 83: lcdWriteInt(pos);
   617  0010A2  C092  F041         	movff	main@pos,lcdWriteInt@num
   618  0010A6  6A42               	clrf	lcdWriteInt@num+1,c
   619  0010A8  EC3C  F00B         	call	_lcdWriteInt	;wreg free
   620                           
   621                           ;main.c: 84: myQueuePush((int)pos);
   622  0010AC  C092  F028         	movff	main@pos,myQueuePush@x
   623  0010B0  6A29               	clrf	myQueuePush@x+1,c
   624  0010B2  ECD6  F00A         	call	_myQueuePush	;wreg free
   625                           
   626                           ;main.c: 87: if (myQueueCheck() == 1){
   627  0010B6  ECA4  F009         	call	_myQueueCheck	;wreg free
   628  0010BA  0428               	decf	?_myQueueCheck,w,c
   629  0010BC  1029               	iorwf	?_myQueueCheck+1,w,c
   630  0010BE  A4D8               	btfss	status,2,c
   631  0010C0  D016               	goto	l2211
   632                           
   633                           ;main.c: 88: lightSwitch();
   634  0010C2  EC4C  F00B         	call	_lightSwitch	;wreg free
   635                           
   636                           ;main.c: 89: lcdWriteString("LIGHT_SWITCH");
   637  0010C6  0E01               	movlw	low STR_2
   638  0010C8  6E24               	movwf	lcdWriteString@str,c
   639  0010CA  0E10               	movlw	high STR_2
   640  0010CC  6E25               	movwf	lcdWriteString@str+1,c
   641  0010CE  EC69  F009         	call	_lcdWriteString	;wreg free
   642                           
   643                           ;main.c: 90: _delay((unsigned long)((500)*(8000000/4000.0)));
   644  0010D2  0E06               	movlw	6
   645  0010D4  0100               	movlb	0	; () banked
   646  0010D6  6F81               	movwf	(??_main+1)& (0+255),b
   647  0010D8  0E13               	movlw	19
   648  0010DA  0100               	movlb	0	; () banked
   649  0010DC  6F80               	movwf	??_main& (0+255),b
   650  0010DE  0EAD               	movlw	173
   651  0010E0                     u1147:
   652  0010E0  2EE8               	decfsz	wreg,f,c
   653  0010E2  D7FE               	bra	u1147
   654  0010E4  2F80               	decfsz	??_main& (0+255),f,b
   655  0010E6  D7FC               	bra	u1147
   656  0010E8  2F81               	decfsz	(??_main+1)& (0+255),f,b
   657  0010EA  D7FA               	bra	u1147
   658  0010EC  D000               	nop2	
   659  0010EE                     l2211:
   660                           
   661                           ;main.c: 91: }
   662                           ;main.c: 96: GestureType ges = readGesture();
   663  0010EE  EC11  F00B         	call	_readGesture	;wreg free
   664  0010F2  0100               	movlb	0	; () banked
   665  0010F4  6F91               	movwf	main@ges& (0+255),b
   666                           
   667                           ;main.c: 97: switch (ges){
   668  0010F6  D006               	goto	l2219
   669  0010F8                     l2213:
   670                           
   671                           ; BSR set to: 0
   672                           ;main.c: 100: moreLight();
   673  0010F8  ECA3  F00B         	call	_moreLight	;wreg free
   674                           
   675                           ;main.c: 101: break;
   676  0010FC  D00C               	goto	l2221
   677  0010FE                     l2215:
   678                           
   679                           ;main.c: 104: lessLight();
   680  0010FE  ECA9  F00B         	call	_lessLight	;wreg free
   681                           
   682                           ;main.c: 113: }
   683                           
   684                           ;main.c: 112: break;
   685                           
   686                           ;main.c: 110: default:
   687                           
   688                           ;main.c: 109: break;
   689                           
   690                           ;main.c: 106: case UP_SWIPE:
   691                           
   692                           ;main.c: 105: break;
   693  001102  D009               	goto	l2221
   694  001104                     l2219:
   695  001104  0100               	movlb	0	; () banked
   696  001106  5191               	movf	main@ges& (0+255),w,b
   697                           
   698                           ; Switch size 1, requested type "space"
   699                           ; Number of cases is 3, Range of values is 1 to 3
   700                           ; switch strategies available:
   701                           ; Name         Instructions Cycles
   702                           ; simple_byte           10     6 (average)
   703                           ;	Chosen strategy is simple_byte
   704  001108  0A01               	xorlw	1	; case 1
   705  00110A  B4D8               	btfsc	status,2,c
   706  00110C  D7F5               	goto	l2213
   707  00110E  0A03               	xorlw	3	; case 2
   708  001110  B4D8               	btfsc	status,2,c
   709  001112  D7F5               	goto	l2215
   710  001114  0A01               	xorlw	1	; case 3
   711  001116                     l2221:
   712                           
   713                           ;main.c: 114: _delay((unsigned long)((10)*(8000000/4000.0)));
   714  001116  0E1A               	movlw	26
   715  001118  0100               	movlb	0	; () banked
   716  00111A  6F80               	movwf	??_main& (0+255),b
   717  00111C  0EF8               	movlw	248
   718  00111E                     u1157:
   719  00111E  2EE8               	decfsz	wreg,f,c
   720  001120  D7FE               	bra	u1157
   721  001122  2F80               	decfsz	??_main& (0+255),f,b
   722  001124  D7FC               	bra	u1157
   723  001126  F000               	nop	
   724  001128  D7B2               	goto	l2195
   725  00112A                     __end_of_main:
   726                           	opt stack 0
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           intcon	equ	0xFF2
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           plusw1	equ	0xFE3
   736                           fsr1l	equ	0xFE1
   737                           plusw2	equ	0xFDB
   738                           status	equ	0xFD8
   739                           
   740 ;; *************** function _readZ *****************
   741 ;; Defined at:
   742 ;;		line 117 in file "I2C.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  z_pos           1   39[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      unsigned char 
   749 ;; Registers used:
   750 ;;		wreg, status,2, status,0, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;Total ram usage:        1 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    5
   763 ;; This function calls:
   764 ;;		_readDataByte
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text1
   771  0016FC                     __ptext1:
   772                           	opt stack 0
   773  0016FC                     _readZ:
   774                           	opt stack 25
   775                           
   776                           ;I2C.c: 118: unsigned char z_pos;
   777                           ;I2C.c: 119: z_pos = readDataByte(_addr, 0x0A);
   778                           
   779                           ;incstack = 0
   780  0016FC  0E0A               	movlw	10
   781  0016FE  6E25               	movwf	readDataByte@reg,c
   782  001700  5059               	movf	__addr,w,c
   783  001702  EC2B  F00B         	call	_readDataByte
   784  001706  6E28               	movwf	readZ@z_pos,c
   785                           
   786                           ;I2C.c: 120: return z_pos;
   787  001708  5028               	movf	readZ@z_pos,w,c
   788  00170A  0012               	return	
   789  00170C                     __end_of_readZ:
   790                           	opt stack 0
   791                           tblptru	equ	0xFF8
   792                           tblptrh	equ	0xFF7
   793                           tblptrl	equ	0xFF6
   794                           tablat	equ	0xFF5
   795                           intcon	equ	0xFF2
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           plusw1	equ	0xFE3
   800                           fsr1l	equ	0xFE1
   801                           plusw2	equ	0xFDB
   802                           status	equ	0xFD8
   803                           
   804 ;; *************** function _readGesture *****************
   805 ;; Defined at:
   806 ;;		line 154 in file "I2C.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;  gesture         1   39[COMRAM] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      enum E2865
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   824 ;;Total ram usage:        1 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    5
   827 ;; This function calls:
   828 ;;		_readDataByte
   829 ;; This function is called by:
   830 ;;		_main
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text2
   835  001622                     __ptext2:
   836                           	opt stack 0
   837  001622                     _readGesture:
   838                           	opt stack 25
   839                           
   840                           ;I2C.c: 155: unsigned char gesture;
   841                           ;I2C.c: 156: gesture = readDataByte(_addr, 0x04);
   842                           
   843                           ;incstack = 0
   844  001622  0E04               	movlw	4
   845  001624  6E25               	movwf	readDataByte@reg,c
   846  001626  5059               	movf	__addr,w,c
   847  001628  EC2B  F00B         	call	_readDataByte
   848  00162C  6E28               	movwf	readGesture@gesture,c
   849                           
   850                           ;I2C.c: 162: switch (gesture){
   851  00162E  D008               	goto	l2153
   852  001630                     l2135:
   853                           
   854                           ;I2C.c: 164: return RIGHT_SWIPE;
   855  001630  0E01               	movlw	1
   856  001632  0012               	return	
   857  001634                     l2139:
   858                           
   859                           ;I2C.c: 166: return LEFT_SWIPE;
   860  001634  0E02               	movlw	2
   861  001636  0012               	return	
   862  001638                     l2143:
   863                           
   864                           ;I2C.c: 168: return UP_SWIPE;
   865  001638  0E03               	movlw	3
   866  00163A  0012               	return	
   867  00163C                     l2147:
   868                           
   869                           ;I2C.c: 170: return NO_GESTURE;
   870  00163C  0EFF               	movlw	255
   871                           
   872                           ;I2C.c: 171: }
   873  00163E  0012               	return	
   874  001640                     l2153:
   875  001640  5028               	movf	readGesture@gesture,w,c
   876                           
   877                           ; Switch size 1, requested type "space"
   878                           ; Number of cases is 3, Range of values is 1 to 3
   879                           ; switch strategies available:
   880                           ; Name         Instructions Cycles
   881                           ; simple_byte           10     6 (average)
   882                           ;	Chosen strategy is simple_byte
   883  001642  0A01               	xorlw	1	; case 1
   884  001644  B4D8               	btfsc	status,2,c
   885  001646  D7F4               	goto	l2135
   886  001648  0A03               	xorlw	3	; case 2
   887  00164A  B4D8               	btfsc	status,2,c
   888  00164C  D7F3               	goto	l2139
   889  00164E  0A01               	xorlw	1	; case 3
   890  001650  B4D8               	btfsc	status,2,c
   891  001652  D7F2               	goto	l2143
   892  001654  D7F3               	goto	l2147
   893  001656                     __end_of_readGesture:
   894                           	opt stack 0
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           intcon	equ	0xFF2
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           plusw1	equ	0xFE3
   904                           fsr1l	equ	0xFE1
   905                           plusw2	equ	0xFDB
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _readDataByte *****************
   909 ;; Defined at:
   910 ;;		line 92 in file "I2C.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;  addr            1    wreg     unsigned char 
   913 ;;  reg             1   36[COMRAM] unsigned char 
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  addr            1   38[COMRAM] unsigned char 
   916 ;;  retc            1   37[COMRAM] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      unsigned char 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   926 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;Total ram usage:        3 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    4
   933 ;; This function calls:
   934 ;;		_I2CRestart
   935 ;;		_receiveByte
   936 ;;		_sendByte
   937 ;;		_writeDataByte
   938 ;; This function is called by:
   939 ;;		_readZ
   940 ;;		_readGesture
   941 ;;		_readX
   942 ;;		_positionAvailable
   943 ;;		_gestureAvailable
   944 ;;		_readGestureSpeed
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text3
   949  001656                     __ptext3:
   950                           	opt stack 0
   951  001656                     _readDataByte:
   952                           	opt stack 25
   953                           
   954                           ;incstack = 0
   955                           ;readDataByte@addr stored from wreg
   956  001656  6E27               	movwf	readDataByte@addr,c
   957                           
   958                           ;I2C.c: 93: writeDataByte(addr, reg);
   959  001658  C025  F023         	movff	readDataByte@reg,writeDataByte@reg
   960  00165C  5027               	movf	readDataByte@addr,w,c
   961  00165E  EC5B  F00B         	call	_writeDataByte
   962                           
   963                           ;I2C.c: 94: I2CRestart();
   964  001662  ECB9  F00B         	call	_I2CRestart	;wreg free
   965                           
   966                           ;I2C.c: 95: sendByte(addr | 0x01);
   967  001666  5027               	movf	readDataByte@addr,w,c
   968  001668  0901               	iorlw	1
   969  00166A  EC96  F00B         	call	_sendByte
   970                           
   971                           ;I2C.c: 96: unsigned char retc = receiveByte();
   972  00166E  EC86  F00B         	call	_receiveByte	;wreg free
   973  001672  6E26               	movwf	readDataByte@retc,c
   974                           
   975                           ;I2C.c: 97: return retc;
   976  001674  5026               	movf	readDataByte@retc,w,c
   977  001676  0012               	return	
   978  001678                     __end_of_readDataByte:
   979                           	opt stack 0
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           intcon	equ	0xFF2
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           plusw1	equ	0xFE3
   989                           fsr1l	equ	0xFE1
   990                           plusw2	equ	0xFDB
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _writeDataByte *****************
   994 ;; Defined at:
   995 ;;		line 85 in file "I2C.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  addr            1    wreg     unsigned char 
   998 ;;  reg             1   34[COMRAM] unsigned char 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  addr            1   35[COMRAM] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1010 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    3
  1017 ;; This function calls:
  1018 ;;		_I2CInit
  1019 ;;		_I2CStart
  1020 ;;		_sendByte
  1021 ;; This function is called by:
  1022 ;;		_readDataByte
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text4
  1027  0016B6                     __ptext4:
  1028                           	opt stack 0
  1029  0016B6                     _writeDataByte:
  1030                           	opt stack 25
  1031                           
  1032                           ;incstack = 0
  1033                           ;writeDataByte@addr stored from wreg
  1034  0016B6  6E24               	movwf	writeDataByte@addr,c
  1035                           
  1036                           ;I2C.c: 86: I2CInit();
  1037  0016B8  EC9D  F00B         	call	_I2CInit	;wreg free
  1038                           
  1039                           ;I2C.c: 87: I2CStart();
  1040  0016BC  ECB5  F00B         	call	_I2CStart	;wreg free
  1041                           
  1042                           ;I2C.c: 88: sendByte(addr);
  1043  0016C0  5024               	movf	writeDataByte@addr,w,c
  1044  0016C2  EC96  F00B         	call	_sendByte
  1045                           
  1046                           ;I2C.c: 89: sendByte(reg);
  1047  0016C6  5023               	movf	writeDataByte@reg,w,c
  1048  0016C8  EC96  F00B         	call	_sendByte
  1049  0016CC  0012               	return		;funcret
  1050  0016CE                     __end_of_writeDataByte:
  1051                           	opt stack 0
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           intcon	equ	0xFF2
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           postdec1	equ	0xFE5
  1060                           plusw1	equ	0xFE3
  1061                           fsr1l	equ	0xFE1
  1062                           plusw2	equ	0xFDB
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _sendByte *****************
  1066 ;; Defined at:
  1067 ;;		line 69 in file "I2C.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  c               1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  c               1   33[COMRAM] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    2
  1088 ;; This function calls:
  1089 ;;		Nothing
  1090 ;; This function is called by:
  1091 ;;		_writeDataByte
  1092 ;;		_readDataByte
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text5
  1097  00172C                     __ptext5:
  1098                           	opt stack 0
  1099  00172C                     _sendByte:
  1100                           	opt stack 25
  1101                           
  1102                           ;incstack = 0
  1103                           ;sendByte@c stored from wreg
  1104  00172C  6E22               	movwf	sendByte@c,c
  1105                           
  1106                           ;I2C.c: 70: PIR1bits.SSPIF = 0;
  1107  00172E  969E               	bcf	3998,3,c	;volatile
  1108                           
  1109                           ;I2C.c: 71: SSPBUF = c;
  1110  001730  C022  FFC9         	movff	sendByte@c,4041	;volatile
  1111  001734                     l205:
  1112  001734  B69E               	btfsc	3998,3,c	;volatile
  1113  001736  0012               	return	
  1114  001738  D7FD               	goto	l205
  1115  00173A                     __end_of_sendByte:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           intcon	equ	0xFF2
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           postdec1	equ	0xFE5
  1125                           plusw1	equ	0xFE3
  1126                           fsr1l	equ	0xFE1
  1127                           plusw2	equ	0xFDB
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _I2CStart *****************
  1131 ;; Defined at:
  1132 ;;		line 58 in file "I2C.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		None
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    2
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_writeDataByte
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text6
  1161  00176A                     __ptext6:
  1162                           	opt stack 0
  1163  00176A                     _I2CStart:
  1164                           	opt stack 25
  1165                           
  1166                           ;I2C.c: 60: SSPCON2bits.SEN = 1;;
  1167                           
  1168                           ;incstack = 0
  1169  00176A  80C5               	bsf	4037,0,c	;volatile
  1170  00176C                     l193:
  1171  00176C  A0C5               	btfss	4037,0,c	;volatile
  1172  00176E  0012               	return	
  1173  001770  D7FD               	goto	l193
  1174  001772                     __end_of_I2CStart:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           intcon	equ	0xFF2
  1181                           postinc0	equ	0xFEE
  1182                           wreg	equ	0xFE8
  1183                           postdec1	equ	0xFE5
  1184                           plusw1	equ	0xFE3
  1185                           fsr1l	equ	0xFE1
  1186                           plusw2	equ	0xFDB
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function _I2CInit *****************
  1190 ;; Defined at:
  1191 ;;		line 19 in file "I2C.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;		None
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;		None
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		None
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;Total ram usage:        0 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    2
  1212 ;; This function calls:
  1213 ;;		Nothing
  1214 ;; This function is called by:
  1215 ;;		_writeDataByte
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text7
  1220  00173A                     __ptext7:
  1221                           	opt stack 0
  1222  00173A                     _I2CInit:
  1223                           	opt stack 25
  1224                           
  1225                           ;I2C.c: 20: SSPCON1bits.SSPM0 = 0;
  1226                           
  1227                           ;incstack = 0
  1228  00173A  90C6               	bcf	4038,0,c	;volatile
  1229                           
  1230                           ;I2C.c: 21: SSPCON1bits.SSPM1 = 0;
  1231  00173C  92C6               	bcf	4038,1,c	;volatile
  1232                           
  1233                           ;I2C.c: 22: SSPCON1bits.SSPM2 = 0;
  1234  00173E  94C6               	bcf	4038,2,c	;volatile
  1235                           
  1236                           ;I2C.c: 23: SSPCON1bits.SSPM3 = 1;
  1237  001740  86C6               	bsf	4038,3,c	;volatile
  1238                           
  1239                           ;I2C.c: 25: SSPCON1bits.SSPEN = 1;
  1240  001742  8AC6               	bsf	4038,5,c	;volatile
  1241  001744  0012               	return		;funcret
  1242  001746                     __end_of_I2CInit:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           intcon	equ	0xFF2
  1249                           postinc0	equ	0xFEE
  1250                           wreg	equ	0xFE8
  1251                           postdec1	equ	0xFE5
  1252                           plusw1	equ	0xFE3
  1253                           fsr1l	equ	0xFE1
  1254                           plusw2	equ	0xFDB
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _receiveByte *****************
  1258 ;; Defined at:
  1259 ;;		line 75 in file "I2C.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  retc            1   33[COMRAM] unsigned char 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      unsigned char 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;Total ram usage:        1 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    2
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_readDataByte
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text8
  1288  00170C                     __ptext8:
  1289                           	opt stack 0
  1290  00170C                     _receiveByte:
  1291                           	opt stack 26
  1292                           
  1293                           ;I2C.c: 76: SSPCON2bits.RCEN = 1;
  1294                           
  1295                           ;incstack = 0
  1296  00170C  86C5               	bsf	4037,3,c	;volatile
  1297                           
  1298                           ;I2C.c: 77: PIR1bits.SSPIF = 0;
  1299  00170E  969E               	bcf	3998,3,c	;volatile
  1300  001710                     l211:
  1301  001710  A69E               	btfss	3998,3,c	;volatile
  1302  001712  D7FE               	goto	l211
  1303                           
  1304                           ;I2C.c: 79: unsigned char retc = SSPBUF;
  1305  001714  CFC9 F022          	movff	4041,receiveByte@retc	;volatile
  1306                           
  1307                           ;I2C.c: 80: return retc;
  1308  001718  5022               	movf	receiveByte@retc,w,c
  1309  00171A  0012               	return	
  1310  00171C                     __end_of_receiveByte:
  1311                           	opt stack 0
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           intcon	equ	0xFF2
  1317                           postinc0	equ	0xFEE
  1318                           wreg	equ	0xFE8
  1319                           postdec1	equ	0xFE5
  1320                           plusw1	equ	0xFE3
  1321                           fsr1l	equ	0xFE1
  1322                           plusw2	equ	0xFDB
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _I2CRestart *****************
  1326 ;; Defined at:
  1327 ;;		line 64 in file "I2C.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;		None
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;		None
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		None
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;Total ram usage:        0 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    2
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_readDataByte
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text9
  1356  001772                     __ptext9:
  1357                           	opt stack 0
  1358  001772                     _I2CRestart:
  1359                           	opt stack 26
  1360                           
  1361                           ;I2C.c: 65: SSPCON2bits.RSEN = 1;;
  1362                           
  1363                           ;incstack = 0
  1364  001772  82C5               	bsf	4037,1,c	;volatile
  1365  001774                     l199:
  1366  001774  A2C5               	btfss	4037,1,c	;volatile
  1367  001776  0012               	return	
  1368  001778  D7FD               	goto	l199
  1369  00177A                     __end_of_I2CRestart:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           intcon	equ	0xFF2
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           plusw1	equ	0xFE3
  1380                           fsr1l	equ	0xFE1
  1381                           plusw2	equ	0xFDB
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _myQueuePush *****************
  1385 ;; Defined at:
  1386 ;;		line 8 in file "lpque.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  x               2   39[COMRAM] int 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;Total ram usage:        2 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    3
  1407 ;; This function calls:
  1408 ;;		___awmod
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text10
  1415  0015AC                     __ptext10:
  1416                           	opt stack 0
  1417  0015AC                     _myQueuePush:
  1418                           	opt stack 27
  1419                           
  1420                           ;lpque.c: 9: iter = (iter + 1) % 10;
  1421                           
  1422                           ;incstack = 0
  1423  0015AC  0E01               	movlw	1
  1424  0015AE  2457               	addwf	_iter,w,c
  1425  0015B0  6E22               	movwf	___awmod@dividend,c
  1426  0015B2  0E00               	movlw	0
  1427  0015B4  2058               	addwfc	_iter+1,w,c
  1428  0015B6  6E23               	movwf	___awmod@dividend+1,c
  1429  0015B8  0E00               	movlw	0
  1430  0015BA  6E25               	movwf	___awmod@divisor+1,c
  1431  0015BC  0E0A               	movlw	10
  1432  0015BE  6E24               	movwf	___awmod@divisor,c
  1433  0015C0  ECDD  F009         	call	___awmod	;wreg free
  1434  0015C4  C022  F057         	movff	?___awmod,_iter
  1435  0015C8  C023  F058         	movff	?___awmod+1,_iter+1
  1436                           
  1437                           ;lpque.c: 10: my_stack[iter] = x;
  1438  0015CC  90D8               	bcf	status,0,c
  1439  0015CE  3457               	rlcf	_iter,w,c
  1440  0015D0  6ED9               	movwf	fsr2l,c
  1441  0015D2  3458               	rlcf	_iter+1,w,c
  1442  0015D4  6EDA               	movwf	fsr2h,c
  1443  0015D6  0E43               	movlw	low _my_stack
  1444  0015D8  26D9               	addwf	fsr2l,f,c
  1445  0015DA  0E00               	movlw	high _my_stack
  1446  0015DC  22DA               	addwfc	fsr2h,f,c
  1447  0015DE  C028  FFDE         	movff	myQueuePush@x,postinc2
  1448  0015E2  C029  FFDD         	movff	myQueuePush@x+1,postdec2
  1449  0015E6  0012               	return		;funcret
  1450  0015E8                     __end_of_myQueuePush:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           intcon	equ	0xFF2
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           postdec1	equ	0xFE5
  1460                           plusw1	equ	0xFE3
  1461                           fsr1l	equ	0xFE1
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           plusw2	equ	0xFDB
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _myQueueCheck *****************
  1470 ;; Defined at:
  1471 ;;		line 12 in file "lpque.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               2   43[COMRAM] int 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2   39[COMRAM] int 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        6 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    3
  1492 ;; This function calls:
  1493 ;;		___awmod
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text11
  1500  001348                     __ptext11:
  1501                           	opt stack 0
  1502  001348                     _myQueueCheck:
  1503                           	opt stack 27
  1504                           
  1505                           ;lpque.c: 13: for (int i = 10; i > 7; i--){
  1506                           
  1507                           ;incstack = 0
  1508  001348  0E00               	movlw	0
  1509  00134A  6E2D               	movwf	myQueueCheck@i+1,c
  1510  00134C  0E0A               	movlw	10
  1511  00134E  6E2C               	movwf	myQueueCheck@i,c
  1512  001350                     l2103:
  1513  001350  BE2D               	btfsc	myQueueCheck@i+1,7,c
  1514  001352  D02E               	goto	l2117
  1515  001354  502D               	movf	myQueueCheck@i+1,w,c
  1516  001356  E104               	bnz	l2107
  1517  001358  0E08               	movlw	8
  1518  00135A  5C2C               	subwf	myQueueCheck@i,w,c
  1519  00135C  A0D8               	btfss	status,0,c
  1520  00135E  D028               	goto	l2117
  1521  001360                     l2107:
  1522                           
  1523                           ;lpque.c: 16: if (my_stack[(iter + i) % 10] > 20)
  1524  001360  502C               	movf	myQueueCheck@i,w,c
  1525  001362  2457               	addwf	_iter,w,c
  1526  001364  6E22               	movwf	___awmod@dividend,c
  1527  001366  502D               	movf	myQueueCheck@i+1,w,c
  1528  001368  2058               	addwfc	_iter+1,w,c
  1529  00136A  6E23               	movwf	___awmod@dividend+1,c
  1530  00136C  0E00               	movlw	0
  1531  00136E  6E25               	movwf	___awmod@divisor+1,c
  1532  001370  0E0A               	movlw	10
  1533  001372  6E24               	movwf	___awmod@divisor,c
  1534  001374  ECDD  F009         	call	___awmod	;wreg free
  1535  001378  90D8               	bcf	status,0,c
  1536  00137A  3622               	rlcf	?___awmod,f,c
  1537  00137C  3623               	rlcf	?___awmod+1,f,c
  1538  00137E  0E43               	movlw	low _my_stack
  1539  001380  2422               	addwf	?___awmod,w,c
  1540  001382  6ED9               	movwf	fsr2l,c
  1541  001384  0E00               	movlw	high _my_stack
  1542  001386  2023               	addwfc	?___awmod+1,w,c
  1543  001388  6EDA               	movwf	fsr2h,c
  1544  00138A  0E01               	movlw	1
  1545  00138C  BEDB               	btfsc	plusw2,7,c
  1546  00138E  D00C               	goto	l2113
  1547  001390  0E01               	movlw	1
  1548  001392  50DB               	movf	plusw2,w,c
  1549  001394  E104               	bnz	u1050
  1550  001396  0E15               	movlw	21
  1551  001398  5CDE               	subwf	postinc2,w,c
  1552  00139A  A0D8               	btfss	status,0,c
  1553  00139C  D005               	goto	l2113
  1554  00139E                     u1050:
  1555                           
  1556                           ;lpque.c: 17: return 0;
  1557  00139E  0E00               	movlw	0
  1558  0013A0  6E29               	movwf	?_myQueueCheck+1,c
  1559  0013A2  0E00               	movlw	0
  1560  0013A4  6E28               	movwf	?_myQueueCheck,c
  1561  0013A6  0012               	return	
  1562  0013A8                     l2113:
  1563  0013A8  062C               	decf	myQueueCheck@i,f,c
  1564  0013AA  A0D8               	btfss	status,0,c
  1565  0013AC  062D               	decf	myQueueCheck@i+1,f,c
  1566  0013AE  D7D0               	goto	l2103
  1567  0013B0                     l2117:
  1568                           
  1569                           ;lpque.c: 18: }
  1570                           ;lpque.c: 19: return 1;
  1571  0013B0  0E00               	movlw	0
  1572  0013B2  6E29               	movwf	?_myQueueCheck+1,c
  1573  0013B4  0E01               	movlw	1
  1574  0013B6  6E28               	movwf	?_myQueueCheck,c
  1575  0013B8  0012               	return	
  1576  0013BA                     __end_of_myQueueCheck:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           plusw1	equ	0xFE3
  1587                           fsr1l	equ	0xFE1
  1588                           postinc2	equ	0xFDE
  1589                           postdec2	equ	0xFDD
  1590                           plusw2	equ	0xFDB
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function ___awmod *****************
  1596 ;; Defined at:
  1597 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  dividend        2   33[COMRAM] int 
  1600 ;;  divisor         2   35[COMRAM] int 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  sign            1   38[COMRAM] unsigned char 
  1603 ;;  counter         1   37[COMRAM] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2   33[COMRAM] int 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;Total ram usage:        6 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    2
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_myQueuePush
  1624 ;;		_myQueueCheck
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text12
  1629  0013BA                     __ptext12:
  1630                           	opt stack 0
  1631  0013BA                     ___awmod:
  1632                           	opt stack 27
  1633                           
  1634                           ;incstack = 0
  1635  0013BA  0E00               	movlw	0
  1636  0013BC  6E27               	movwf	___awmod@sign,c
  1637  0013BE  AE23               	btfss	___awmod@dividend+1,7,c
  1638  0013C0  D006               	goto	l1999
  1639  0013C2  6C22               	negf	___awmod@dividend,c
  1640  0013C4  1E23               	comf	___awmod@dividend+1,f,c
  1641  0013C6  B0D8               	btfsc	status,0,c
  1642  0013C8  2A23               	incf	___awmod@dividend+1,f,c
  1643  0013CA  0E01               	movlw	1
  1644  0013CC  6E27               	movwf	___awmod@sign,c
  1645  0013CE                     l1999:
  1646  0013CE  AE25               	btfss	___awmod@divisor+1,7,c
  1647  0013D0  D004               	goto	l2003
  1648  0013D2  6C24               	negf	___awmod@divisor,c
  1649  0013D4  1E25               	comf	___awmod@divisor+1,f,c
  1650  0013D6  B0D8               	btfsc	status,0,c
  1651  0013D8  2A25               	incf	___awmod@divisor+1,f,c
  1652  0013DA                     l2003:
  1653  0013DA  5024               	movf	___awmod@divisor,w,c
  1654  0013DC  1025               	iorwf	___awmod@divisor+1,w,c
  1655  0013DE  B4D8               	btfsc	status,2,c
  1656  0013E0  D018               	goto	l2019
  1657  0013E2  0E01               	movlw	1
  1658  0013E4  6E26               	movwf	___awmod@counter,c
  1659  0013E6  D004               	goto	l2009
  1660  0013E8                     l2007:
  1661  0013E8  90D8               	bcf	status,0,c
  1662  0013EA  3624               	rlcf	___awmod@divisor,f,c
  1663  0013EC  3625               	rlcf	___awmod@divisor+1,f,c
  1664  0013EE  2A26               	incf	___awmod@counter,f,c
  1665  0013F0                     l2009:
  1666  0013F0  AE25               	btfss	___awmod@divisor+1,7,c
  1667  0013F2  D7FA               	goto	l2007
  1668  0013F4                     l2011:
  1669  0013F4  5024               	movf	___awmod@divisor,w,c
  1670  0013F6  5C22               	subwf	___awmod@dividend,w,c
  1671  0013F8  5025               	movf	___awmod@divisor+1,w,c
  1672  0013FA  5823               	subwfb	___awmod@dividend+1,w,c
  1673  0013FC  A0D8               	btfss	status,0,c
  1674  0013FE  D004               	goto	l2015
  1675  001400  5024               	movf	___awmod@divisor,w,c
  1676  001402  5E22               	subwf	___awmod@dividend,f,c
  1677  001404  5025               	movf	___awmod@divisor+1,w,c
  1678  001406  5A23               	subwfb	___awmod@dividend+1,f,c
  1679  001408                     l2015:
  1680  001408  90D8               	bcf	status,0,c
  1681  00140A  3225               	rrcf	___awmod@divisor+1,f,c
  1682  00140C  3224               	rrcf	___awmod@divisor,f,c
  1683  00140E  2E26               	decfsz	___awmod@counter,f,c
  1684  001410  D7F1               	goto	l2011
  1685  001412                     l2019:
  1686  001412  5027               	movf	___awmod@sign,w,c
  1687  001414  B4D8               	btfsc	status,2,c
  1688  001416  D004               	goto	l2023
  1689  001418  6C22               	negf	___awmod@dividend,c
  1690  00141A  1E23               	comf	___awmod@dividend+1,f,c
  1691  00141C  B0D8               	btfsc	status,0,c
  1692  00141E  2A23               	incf	___awmod@dividend+1,f,c
  1693  001420                     l2023:
  1694  001420  C022  F022         	movff	___awmod@dividend,?___awmod
  1695  001424  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  1696  001428  0012               	return	
  1697  00142A                     __end_of___awmod:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           intcon	equ	0xFF2
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           plusw1	equ	0xFE3
  1708                           fsr1l	equ	0xFE1
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           plusw2	equ	0xFDB
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function _moreLight *****************
  1717 ;; Defined at:
  1718 ;;		line 66 in file "pwm.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;		None
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;Total ram usage:        0 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    4
  1739 ;; This function calls:
  1740 ;;		_dutyCycleDown
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text13
  1747  001746                     __ptext13:
  1748                           	opt stack 0
  1749  001746                     _moreLight:
  1750                           	opt stack 26
  1751                           
  1752                           ;pwm.c: 67: if (lightStatus == 1){
  1753                           
  1754                           ;incstack = 0
  1755  001746  045C               	decf	_lightStatus,w,c
  1756  001748  A4D8               	btfss	status,2,c
  1757  00174A  0012               	return	
  1758                           
  1759                           ;pwm.c: 68: dutyCycleDown();
  1760  00174C  EC15  F00A         	call	_dutyCycleDown	;wreg free
  1761  001750  0012               	return	
  1762  001752                     __end_of_moreLight:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           intcon	equ	0xFF2
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           plusw1	equ	0xFE3
  1773                           fsr1l	equ	0xFE1
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           plusw2	equ	0xFDB
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _dutyCycleDown *****************
  1782 ;; Defined at:
  1783 ;;		line 49 in file "pwm.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        6 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    3
  1804 ;; This function calls:
  1805 ;;		_setDutyCycle
  1806 ;; This function is called by:
  1807 ;;		_moreLight
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text14
  1812  00142A                     __ptext14:
  1813                           	opt stack 0
  1814  00142A                     _dutyCycleDown:
  1815                           	opt stack 26
  1816                           
  1817                           ;pwm.c: 50: if(rate > 8)
  1818                           
  1819                           ;incstack = 0
  1820  00142A  0E08               	movlw	8
  1821  00142C  645D               	cpfsgt	_rate,c
  1822  00142E  D021               	goto	l1983
  1823                           
  1824                           ;pwm.c: 51: rate = (rate - 8>8?rate - 8:8);
  1825  001430  0EF8               	movlw	248
  1826  001432  6E23               	movwf	??_dutyCycleDown& (0+255),c
  1827  001434  0EFF               	movlw	255
  1828  001436  6E24               	movwf	(??_dutyCycleDown+1)& (0+255),c
  1829  001438  505D               	movf	_rate,w,c
  1830  00143A  6E25               	movwf	(??_dutyCycleDown+2)& (0+255),c
  1831  00143C  6A26               	clrf	(??_dutyCycleDown+3)& (0+255),c
  1832  00143E  5023               	movf	??_dutyCycleDown,w,c
  1833  001440  2625               	addwf	??_dutyCycleDown+2,f,c
  1834  001442  5024               	movf	??_dutyCycleDown+1,w,c
  1835  001444  2226               	addwfc	??_dutyCycleDown+3,f,c
  1836  001446  BE26               	btfsc	??_dutyCycleDown+3,7,c
  1837  001448  D006               	goto	l1977
  1838  00144A  5026               	movf	??_dutyCycleDown+3,w,c
  1839  00144C  E109               	bnz	l1979
  1840  00144E  0E09               	movlw	9
  1841  001450  5C25               	subwf	??_dutyCycleDown+2,w,c
  1842  001452  B0D8               	btfsc	status,0,c
  1843  001454  D005               	goto	l1979
  1844  001456                     l1977:
  1845  001456  0E00               	movlw	0
  1846  001458  6E28               	movwf	_dutyCycleDown$584+1,c
  1847  00145A  0E08               	movlw	8
  1848  00145C  6E27               	movwf	_dutyCycleDown$584,c
  1849  00145E  D006               	goto	l1981
  1850  001460                     l1979:
  1851  001460  0EF8               	movlw	248
  1852  001462  245D               	addwf	_rate,w,c
  1853  001464  6E27               	movwf	_dutyCycleDown$584,c
  1854  001466  6A28               	clrf	_dutyCycleDown$584+1,c
  1855  001468  0EFF               	movlw	255
  1856  00146A  2228               	addwfc	_dutyCycleDown$584+1,f,c
  1857  00146C                     l1981:
  1858  00146C  C027  F05D         	movff	_dutyCycleDown$584,_rate
  1859  001470  D002               	goto	l1985
  1860  001472                     l1983:
  1861                           
  1862                           ;pwm.c: 52: else
  1863                           ;pwm.c: 53: rate = 8;
  1864  001472  0E08               	movlw	8
  1865  001474  6E5D               	movwf	_rate,c
  1866  001476                     l1985:
  1867                           
  1868                           ;pwm.c: 54: setDutyCycle(rate);
  1869  001476  505D               	movf	_rate,w,c
  1870  001478  ECAF  F00B         	call	_setDutyCycle
  1871  00147C  0012               	return		;funcret
  1872  00147E                     __end_of_dutyCycleDown:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           intcon	equ	0xFF2
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           postdec1	equ	0xFE5
  1882                           plusw1	equ	0xFE3
  1883                           fsr1l	equ	0xFE1
  1884                           postinc2	equ	0xFDE
  1885                           postdec2	equ	0xFDD
  1886                           plusw2	equ	0xFDB
  1887                           fsr2h	equ	0xFDA
  1888                           fsr2l	equ	0xFD9
  1889                           status	equ	0xFD8
  1890                           
  1891 ;; *************** function _lightSwitch *****************
  1892 ;; Defined at:
  1893 ;;		line 78 in file "pwm.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    4
  1914 ;; This function calls:
  1915 ;;		_dutyCycleClear
  1916 ;;		_dutyCycleSet
  1917 ;;		_initQueue
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text15
  1924  001698                     __ptext15:
  1925                           	opt stack 0
  1926  001698                     _lightSwitch:
  1927                           	opt stack 26
  1928                           
  1929                           ;pwm.c: 79: if (lightStatus == 0){
  1930                           
  1931                           ;incstack = 0
  1932  001698  505C               	movf	_lightStatus,w,c
  1933  00169A  A4D8               	btfss	status,2,c
  1934  00169C  D005               	goto	l2127
  1935                           
  1936                           ;pwm.c: 80: lightStatus = 1;
  1937  00169E  0E01               	movlw	1
  1938  0016A0  6E5C               	movwf	_lightStatus,c
  1939                           
  1940                           ;pwm.c: 81: dutyCycleSet();
  1941  0016A2  ECBD  F00B         	call	_dutyCycleSet	;wreg free
  1942                           
  1943                           ;pwm.c: 82: }
  1944  0016A6  D004               	goto	l2131
  1945  0016A8                     l2127:
  1946                           
  1947                           ;pwm.c: 83: else{
  1948                           ;pwm.c: 84: lightStatus = 0;
  1949  0016A8  0E00               	movlw	0
  1950  0016AA  6E5C               	movwf	_lightStatus,c
  1951                           
  1952                           ;pwm.c: 85: dutyCycleClear();
  1953  0016AC  ECC1  F00B         	call	_dutyCycleClear	;wreg free
  1954  0016B0                     l2131:
  1955                           
  1956                           ;pwm.c: 86: }
  1957                           ;pwm.c: 87: initQueue();
  1958  0016B0  ECF4  F00A         	call	_initQueue	;wreg free
  1959  0016B4  0012               	return		;funcret
  1960  0016B6                     __end_of_lightSwitch:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           plusw1	equ	0xFE3
  1971                           fsr1l	equ	0xFE1
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           plusw2	equ	0xFDB
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _initQueue *****************
  1980 ;; Defined at:
  1981 ;;		line 3 in file "lpque.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  i               2   33[COMRAM] int 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;Total ram usage:        2 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    2
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_main
  2006 ;;		_lightSwitch
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text16
  2011  0015E8                     __ptext16:
  2012                           	opt stack 0
  2013  0015E8                     _initQueue:
  2014                           	opt stack 27
  2015                           
  2016                           ;lpque.c: 4: for (int i = 0; i < 10; i++)
  2017                           
  2018                           ;incstack = 0
  2019  0015E8  0E00               	movlw	0
  2020  0015EA  6E23               	movwf	initQueue@i+1,c
  2021  0015EC  0E00               	movlw	0
  2022  0015EE  6E22               	movwf	initQueue@i,c
  2023  0015F0                     l1929:
  2024  0015F0  BE23               	btfsc	initQueue@i+1,7,c
  2025  0015F2  D006               	goto	l1933
  2026  0015F4  5023               	movf	initQueue@i+1,w,c
  2027  0015F6  E114               	bnz	l324
  2028  0015F8  0E0A               	movlw	10
  2029  0015FA  5C22               	subwf	initQueue@i,w,c
  2030  0015FC  B0D8               	btfsc	status,0,c
  2031  0015FE  0012               	return	
  2032  001600                     l1933:
  2033                           
  2034                           ;lpque.c: 5: my_stack[i] = 101;
  2035  001600  90D8               	bcf	status,0,c
  2036  001602  3422               	rlcf	initQueue@i,w,c
  2037  001604  6ED9               	movwf	fsr2l,c
  2038  001606  3423               	rlcf	initQueue@i+1,w,c
  2039  001608  6EDA               	movwf	fsr2h,c
  2040  00160A  0E43               	movlw	low _my_stack
  2041  00160C  26D9               	addwf	fsr2l,f,c
  2042  00160E  0E00               	movlw	high _my_stack
  2043  001610  22DA               	addwfc	fsr2h,f,c
  2044  001612  0E65               	movlw	101
  2045  001614  6EDE               	movwf	postinc2,c
  2046  001616  0E00               	movlw	0
  2047  001618  6EDD               	movwf	postdec2,c
  2048  00161A  4A22               	infsnz	initQueue@i,f,c
  2049  00161C  2A23               	incf	initQueue@i+1,f,c
  2050  00161E  D7E8               	goto	l1929
  2051  001620                     l324:
  2052  001620  0012               	return		;funcret
  2053  001622                     __end_of_initQueue:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           intcon	equ	0xFF2
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postdec1	equ	0xFE5
  2063                           plusw1	equ	0xFE3
  2064                           fsr1l	equ	0xFE1
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           plusw2	equ	0xFDB
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _dutyCycleSet *****************
  2073 ;; Defined at:
  2074 ;;		line 57 in file "pwm.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    3
  2095 ;; This function calls:
  2096 ;;		_setDutyCycle
  2097 ;; This function is called by:
  2098 ;;		_lightSwitch
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text17
  2103  00177A                     __ptext17:
  2104                           	opt stack 0
  2105  00177A                     _dutyCycleSet:
  2106                           	opt stack 26
  2107                           
  2108                           ;pwm.c: 58: setDutyCycle(rate);
  2109                           
  2110                           ;incstack = 0
  2111  00177A  505D               	movf	_rate,w,c
  2112  00177C  ECAF  F00B         	call	_setDutyCycle
  2113  001780  0012               	return		;funcret
  2114  001782                     __end_of_dutyCycleSet:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           intcon	equ	0xFF2
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           postdec1	equ	0xFE5
  2124                           plusw1	equ	0xFE3
  2125                           fsr1l	equ	0xFE1
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           plusw2	equ	0xFDB
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _dutyCycleClear *****************
  2134 ;; Defined at:
  2135 ;;		line 61 in file "pwm.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    3
  2156 ;; This function calls:
  2157 ;;		_setDutyCycle
  2158 ;; This function is called by:
  2159 ;;		_lightSwitch
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text18
  2164  001782                     __ptext18:
  2165                           	opt stack 0
  2166  001782                     _dutyCycleClear:
  2167                           	opt stack 26
  2168                           
  2169                           ;pwm.c: 63: setDutyCycle(53);
  2170                           
  2171                           ;incstack = 0
  2172  001782  0E35               	movlw	53
  2173  001784  ECAF  F00B         	call	_setDutyCycle
  2174  001788  0012               	return		;funcret
  2175  00178A                     __end_of_dutyCycleClear:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           plusw1	equ	0xFE3
  2186                           fsr1l	equ	0xFE1
  2187                           postinc2	equ	0xFDE
  2188                           postdec2	equ	0xFDD
  2189                           plusw2	equ	0xFDB
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _lessLight *****************
  2195 ;; Defined at:
  2196 ;;		line 72 in file "pwm.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    4
  2217 ;; This function calls:
  2218 ;;		_dutyCycleUp
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text19
  2225  001752                     __ptext19:
  2226                           	opt stack 0
  2227  001752                     _lessLight:
  2228                           	opt stack 26
  2229                           
  2230                           ;pwm.c: 73: if (lightStatus == 1){
  2231                           
  2232                           ;incstack = 0
  2233  001752  045C               	decf	_lightStatus,w,c
  2234  001754  A4D8               	btfss	status,2,c
  2235  001756  0012               	return	
  2236                           
  2237                           ;pwm.c: 74: dutyCycleUp();
  2238  001758  EC67  F00B         	call	_dutyCycleUp	;wreg free
  2239  00175C  0012               	return	
  2240  00175E                     __end_of_lessLight:
  2241                           	opt stack 0
  2242                           tblptru	equ	0xFF8
  2243                           tblptrh	equ	0xFF7
  2244                           tblptrl	equ	0xFF6
  2245                           tablat	equ	0xFF5
  2246                           intcon	equ	0xFF2
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           plusw1	equ	0xFE3
  2251                           fsr1l	equ	0xFE1
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           plusw2	equ	0xFDB
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _dutyCycleUp *****************
  2260 ;; Defined at:
  2261 ;;		line 41 in file "pwm.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    3
  2282 ;; This function calls:
  2283 ;;		_setDutyCycle
  2284 ;; This function is called by:
  2285 ;;		_lessLight
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text20
  2290  0016CE                     __ptext20:
  2291                           	opt stack 0
  2292  0016CE                     _dutyCycleUp:
  2293                           	opt stack 26
  2294                           
  2295                           ;pwm.c: 42: if(50 - 8 > rate)
  2296                           
  2297                           ;incstack = 0
  2298  0016CE  0E2A               	movlw	42
  2299  0016D0  605D               	cpfslt	_rate,c
  2300  0016D2  D003               	goto	l1969
  2301                           
  2302                           ;pwm.c: 43: rate = rate + 8;
  2303  0016D4  505D               	movf	_rate,w,c
  2304  0016D6  0F08               	addlw	8
  2305  0016D8  D001               	goto	L1
  2306  0016DA                     l1969:
  2307                           
  2308                           ;pwm.c: 44: else
  2309                           ;pwm.c: 45: rate = 50;
  2310  0016DA  0E32               	movlw	50
  2311  0016DC                     L1:
  2312  0016DC  6E5D               	movwf	_rate,c
  2313                           
  2314                           ;pwm.c: 46: setDutyCycle(rate);
  2315  0016DE  505D               	movf	_rate,w,c
  2316  0016E0  ECAF  F00B         	call	_setDutyCycle
  2317  0016E4  0012               	return		;funcret
  2318  0016E6                     __end_of_dutyCycleUp:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           postdec1	equ	0xFE5
  2328                           plusw1	equ	0xFE3
  2329                           fsr1l	equ	0xFE1
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           plusw2	equ	0xFDB
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _lcdWriteString *****************
  2338 ;; Defined at:
  2339 ;;		line 95 in file "user.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  str             2   35[COMRAM] PTR unsigned char 
  2342 ;;		 -> STR_2(13), STR_1(2), main@str(15), 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  i               2   39[COMRAM] int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        6 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    4
  2361 ;; This function calls:
  2362 ;;		_lcdWriteChar
  2363 ;; This function is called by:
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text21
  2369  0012D2                     __ptext21:
  2370                           	opt stack 0
  2371  0012D2                     _lcdWriteString:
  2372                           	opt stack 26
  2373                           
  2374                           ;user.c: 96: for(int i = 0; str[i]; i++){
  2375                           
  2376                           ;incstack = 0
  2377  0012D2  0E00               	movlw	0
  2378  0012D4  6E29               	movwf	lcdWriteString@i+1,c
  2379  0012D6  0E00               	movlw	0
  2380  0012D8  6E28               	movwf	lcdWriteString@i,c
  2381  0012DA  D01B               	goto	l2075
  2382  0012DC                     l2071:
  2383                           
  2384                           ;user.c: 97: lcdWriteChar(str[i]);
  2385  0012DC  5028               	movf	lcdWriteString@i,w,c
  2386  0012DE  2424               	addwf	lcdWriteString@str,w,c
  2387  0012E0  6E26               	movwf	??_lcdWriteString& (0+255),c
  2388  0012E2  5029               	movf	lcdWriteString@i+1,w,c
  2389  0012E4  2025               	addwfc	lcdWriteString@str+1,w,c
  2390  0012E6  6E27               	movwf	(??_lcdWriteString+1)& (0+255),c
  2391  0012E8  C026  FFF6         	movff	??_lcdWriteString,tblptrl
  2392  0012EC  C027  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2393  0012F0  0E00               	movlw	low (__smallconst shr (0+16))
  2394  0012F2  6EF8               	movwf	tblptru,c
  2395  0012F4  0E0F               	movlw	(high __ramtop+-1)
  2396  0012F6  64F7               	cpfsgt	tblptrh,c
  2397  0012F8  D003               	bra	u1007
  2398  0012FA  0008               	tblrd		*
  2399  0012FC  50F5               	movf	tablat,w,c
  2400  0012FE  D005               	bra	u1000
  2401  001300                     u1007:
  2402  001300  CFF6 FFE1          	movff	tblptrl,fsr1l
  2403  001304  CFF7 FFE2          	movff	tblptrh,fsr1h
  2404  001308  50E7               	movf	indf1,w,c
  2405  00130A                     u1000:
  2406  00130A  EC91  F00A         	call	_lcdWriteChar
  2407  00130E  4A28               	infsnz	lcdWriteString@i,f,c
  2408  001310  2A29               	incf	lcdWriteString@i+1,f,c
  2409  001312                     l2075:
  2410  001312  5028               	movf	lcdWriteString@i,w,c
  2411  001314  2424               	addwf	lcdWriteString@str,w,c
  2412  001316  6E26               	movwf	??_lcdWriteString& (0+255),c
  2413  001318  5029               	movf	lcdWriteString@i+1,w,c
  2414  00131A  2025               	addwfc	lcdWriteString@str+1,w,c
  2415  00131C  6E27               	movwf	(??_lcdWriteString+1)& (0+255),c
  2416  00131E  C026  FFF6         	movff	??_lcdWriteString,tblptrl
  2417  001322  C027  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2418  001326  0E00               	movlw	low (__smallconst shr (0+16))
  2419  001328  6EF8               	movwf	tblptru,c
  2420  00132A  0E0F               	movlw	(high __ramtop+-1)
  2421  00132C  64F7               	cpfsgt	tblptrh,c
  2422  00132E  D003               	bra	u1017
  2423  001330  0008               	tblrd		*
  2424  001332  50F5               	movf	tablat,w,c
  2425  001334  D005               	bra	u1010
  2426  001336                     u1017:
  2427  001336  CFF6 FFE1          	movff	tblptrl,fsr1l
  2428  00133A  CFF7 FFE2          	movff	tblptrh,fsr1h
  2429  00133E  50E7               	movf	indf1,w,c
  2430  001340                     u1010:
  2431  001340  0900               	iorlw	0
  2432  001342  B4D8               	btfsc	status,2,c
  2433  001344  0012               	return	
  2434  001346  D7CA               	goto	l2071
  2435  001348                     __end_of_lcdWriteString:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           intcon	equ	0xFF2
  2442                           postinc0	equ	0xFEE
  2443                           wreg	equ	0xFE8
  2444                           indf1	equ	0xFE7
  2445                           postdec1	equ	0xFE5
  2446                           plusw1	equ	0xFE3
  2447                           fsr1h	equ	0xFE2
  2448                           fsr1l	equ	0xFE1
  2449                           postinc2	equ	0xFDE
  2450                           postdec2	equ	0xFDD
  2451                           plusw2	equ	0xFDB
  2452                           fsr2h	equ	0xFDA
  2453                           fsr2l	equ	0xFD9
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _lcdWriteInt *****************
  2457 ;; Defined at:
  2458 ;;		line 114 in file "user.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  num             2   64[COMRAM] int 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;Total ram usage:        2 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    5
  2479 ;; This function calls:
  2480 ;;		_lcdWriteChar
  2481 ;;		_lcdWriteUI
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text22
  2488  001678                     __ptext22:
  2489                           	opt stack 0
  2490  001678                     _lcdWriteInt:
  2491                           	opt stack 25
  2492                           
  2493                           ;user.c: 115: if(num < 0){
  2494                           
  2495                           ;incstack = 0
  2496  001678  AE42               	btfss	lcdWriteInt@num+1,7,c
  2497  00167A  D007               	goto	l2095
  2498                           
  2499                           ;user.c: 116: lcdWriteChar('-');
  2500  00167C  0E2D               	movlw	45
  2501  00167E  EC91  F00A         	call	_lcdWriteChar
  2502                           
  2503                           ;user.c: 117: num = -num;
  2504  001682  6C41               	negf	lcdWriteInt@num,c
  2505  001684  1E42               	comf	lcdWriteInt@num+1,f,c
  2506  001686  B0D8               	btfsc	status,0,c
  2507  001688  2A42               	incf	lcdWriteInt@num+1,f,c
  2508  00168A                     l2095:
  2509                           
  2510                           ;user.c: 118: }
  2511                           ;user.c: 119: lcdWriteUI((unsigned int) num);
  2512  00168A  C041  F029         	movff	lcdWriteInt@num,lcdWriteUI@num
  2513  00168E  C042  F02A         	movff	lcdWriteInt@num+1,lcdWriteUI@num+1
  2514  001692  EC2C  F009         	call	_lcdWriteUI	;wreg free
  2515  001696  0012               	return		;funcret
  2516  001698                     __end_of_lcdWriteInt:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           intcon	equ	0xFF2
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           indf1	equ	0xFE7
  2526                           postdec1	equ	0xFE5
  2527                           plusw1	equ	0xFE3
  2528                           fsr1h	equ	0xFE2
  2529                           fsr1l	equ	0xFE1
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           plusw2	equ	0xFDB
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _lcdWriteUI *****************
  2538 ;; Defined at:
  2539 ;;		line 101 in file "user.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  num             2   40[COMRAM] unsigned int 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  stack          20   42[COMRAM] unsigned char [20]
  2544 ;;  i               2   62[COMRAM] int 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;Total ram usage:       24 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    4
  2561 ;; This function calls:
  2562 ;;		___lwdiv
  2563 ;;		___lwmod
  2564 ;;		_lcdWriteChar
  2565 ;; This function is called by:
  2566 ;;		_lcdWriteInt
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text23
  2571  001258                     __ptext23:
  2572                           	opt stack 0
  2573  001258                     _lcdWriteUI:
  2574                           	opt stack 25
  2575                           
  2576                           ;user.c: 102: char stack[20];
  2577                           ;user.c: 103: int i = 0;
  2578                           
  2579                           ;incstack = 0
  2580  001258  0E00               	movlw	0
  2581  00125A  6E40               	movwf	lcdWriteUI@i+1,c
  2582  00125C  0E00               	movlw	0
  2583  00125E  6E3F               	movwf	lcdWriteUI@i,c
  2584  001260                     l1941:
  2585                           
  2586                           ;user.c: 105: stack[i++] = '0' + (num % 10);
  2587  001260  0E2B               	movlw	low lcdWriteUI@stack
  2588  001262  243F               	addwf	lcdWriteUI@i,w,c
  2589  001264  6ED9               	movwf	fsr2l,c
  2590  001266  0E00               	movlw	high lcdWriteUI@stack
  2591  001268  2040               	addwfc	lcdWriteUI@i+1,w,c
  2592  00126A  6EDA               	movwf	fsr2h,c
  2593  00126C  C029  F022         	movff	lcdWriteUI@num,___lwmod@dividend
  2594  001270  C02A  F023         	movff	lcdWriteUI@num+1,___lwmod@dividend+1
  2595  001274  0E00               	movlw	0
  2596  001276  6E25               	movwf	___lwmod@divisor+1,c
  2597  001278  0E0A               	movlw	10
  2598  00127A  6E24               	movwf	___lwmod@divisor,c
  2599  00127C  ECB5  F00A         	call	___lwmod	;wreg free
  2600  001280  5022               	movf	?___lwmod,w,c
  2601  001282  0F30               	addlw	48
  2602  001284  6EDF               	movwf	indf2,c
  2603  001286  4A3F               	infsnz	lcdWriteUI@i,f,c
  2604  001288  2A40               	incf	lcdWriteUI@i+1,f,c
  2605                           
  2606                           ;user.c: 106: num /= 10;
  2607  00128A  C029  F022         	movff	lcdWriteUI@num,___lwdiv@dividend
  2608  00128E  C02A  F023         	movff	lcdWriteUI@num+1,___lwdiv@dividend+1
  2609  001292  0E00               	movlw	0
  2610  001294  6E25               	movwf	___lwdiv@divisor+1,c
  2611  001296  0E0A               	movlw	10
  2612  001298  6E24               	movwf	___lwdiv@divisor,c
  2613  00129A  EC68  F00A         	call	___lwdiv	;wreg free
  2614  00129E  C022  F029         	movff	?___lwdiv,lcdWriteUI@num
  2615  0012A2  C023  F02A         	movff	?___lwdiv+1,lcdWriteUI@num+1
  2616                           
  2617                           ;user.c: 107: }
  2618                           ;user.c: 108: while(num != 0);
  2619  0012A6  5029               	movf	lcdWriteUI@num,w,c
  2620  0012A8  102A               	iorwf	lcdWriteUI@num+1,w,c
  2621  0012AA  B4D8               	btfsc	status,2,c
  2622  0012AC  D00D               	goto	l1951
  2623  0012AE  D7D8               	goto	l1941
  2624  0012B0                     l1949:
  2625                           
  2626                           ;user.c: 110: lcdWriteChar(stack[--i]);
  2627  0012B0  063F               	decf	lcdWriteUI@i,f,c
  2628  0012B2  A0D8               	btfss	status,0,c
  2629  0012B4  0640               	decf	lcdWriteUI@i+1,f,c
  2630  0012B6  0E2B               	movlw	low lcdWriteUI@stack
  2631  0012B8  243F               	addwf	lcdWriteUI@i,w,c
  2632  0012BA  6ED9               	movwf	fsr2l,c
  2633  0012BC  0E00               	movlw	high lcdWriteUI@stack
  2634  0012BE  2040               	addwfc	lcdWriteUI@i+1,w,c
  2635  0012C0  6EDA               	movwf	fsr2h,c
  2636  0012C2  50DF               	movf	indf2,w,c
  2637  0012C4  EC91  F00A         	call	_lcdWriteChar
  2638  0012C8                     l1951:
  2639  0012C8  503F               	movf	lcdWriteUI@i,w,c
  2640  0012CA  1040               	iorwf	lcdWriteUI@i+1,w,c
  2641  0012CC  B4D8               	btfsc	status,2,c
  2642  0012CE  0012               	return	
  2643  0012D0  D7EF               	goto	l1949
  2644  0012D2                     __end_of_lcdWriteUI:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           intcon	equ	0xFF2
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           indf1	equ	0xFE7
  2654                           postdec1	equ	0xFE5
  2655                           plusw1	equ	0xFE3
  2656                           fsr1h	equ	0xFE2
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           plusw2	equ	0xFDB
  2662                           fsr2h	equ	0xFDA
  2663                           fsr2l	equ	0xFD9
  2664                           status	equ	0xFD8
  2665                           
  2666 ;; *************** function _lcdWriteChar *****************
  2667 ;; Defined at:
  2668 ;;		line 80 in file "user.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  leter           1    wreg     unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  leter           1   34[COMRAM] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;Total ram usage:        2 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    3
  2689 ;; This function calls:
  2690 ;;		_lcdEnable
  2691 ;; This function is called by:
  2692 ;;		_lcdWriteString
  2693 ;;		_lcdWriteUI
  2694 ;;		_lcdWriteInt
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text24
  2699  001522                     __ptext24:
  2700                           	opt stack 0
  2701  001522                     _lcdWriteChar:
  2702                           	opt stack 26
  2703                           
  2704                           ;incstack = 0
  2705                           ;lcdWriteChar@leter stored from wreg
  2706  001522  6E23               	movwf	lcdWriteChar@leter,c
  2707                           
  2708                           ;user.c: 81: PORTCbits.RC2 = 1;
  2709  001524  8482               	bsf	3970,2,c	;volatile
  2710                           
  2711                           ;user.c: 82: _delay((unsigned long)((10)*(8000000/4000.0)));
  2712  001526  0E1A               	movlw	26
  2713  001528  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2714  00152A  0EF8               	movlw	248
  2715  00152C                     u1167:
  2716  00152C  2EE8               	decfsz	wreg,f,c
  2717  00152E  D7FE               	bra	u1167
  2718  001530  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2719  001532  D7FC               	bra	u1167
  2720  001534  D000               	nop2	
  2721                           
  2722                           ;user.c: 85: PORTD = (leter >> 4) & 0b00001111;
  2723  001536  3823               	swapf	lcdWriteChar@leter,w,c
  2724  001538  0B0F               	andlw	15
  2725  00153A  0B0F               	andlw	15
  2726  00153C  6E83               	movwf	3971,c	;volatile
  2727                           
  2728                           ;user.c: 86: lcdEnable();
  2729  00153E  ECC5  F00B         	call	_lcdEnable	;wreg free
  2730                           
  2731                           ;user.c: 87: _delay((unsigned long)((1)*(8000000/4000.0)));
  2732  001542  0E03               	movlw	3
  2733  001544  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2734  001546  0E98               	movlw	152
  2735  001548                     u1177:
  2736  001548  2EE8               	decfsz	wreg,f,c
  2737  00154A  D7FE               	bra	u1177
  2738  00154C  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2739  00154E  D7FC               	bra	u1177
  2740                           
  2741                           ;user.c: 89: PORTD = leter & 0b00001111;
  2742  001550  5023               	movf	lcdWriteChar@leter,w,c
  2743  001552  0B0F               	andlw	15
  2744  001554  6E83               	movwf	3971,c	;volatile
  2745                           
  2746                           ;user.c: 90: lcdEnable();
  2747  001556  ECC5  F00B         	call	_lcdEnable	;wreg free
  2748                           
  2749                           ;user.c: 91: _delay((unsigned long)((1)*(8000000/4000.0)));
  2750  00155A  0E03               	movlw	3
  2751  00155C  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2752  00155E  0E98               	movlw	152
  2753  001560                     u1187:
  2754  001560  2EE8               	decfsz	wreg,f,c
  2755  001562  D7FE               	bra	u1187
  2756  001564  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2757  001566  D7FC               	bra	u1187
  2758  001568  0012               	return		;funcret
  2759  00156A                     __end_of_lcdWriteChar:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           indf1	equ	0xFE7
  2769                           postdec1	equ	0xFE5
  2770                           plusw1	equ	0xFE3
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           plusw2	equ	0xFDB
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function ___lwmod *****************
  2782 ;; Defined at:
  2783 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  dividend        2   33[COMRAM] unsigned int 
  2786 ;;  divisor         2   35[COMRAM] unsigned int 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  counter         1   37[COMRAM] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  2   33[COMRAM] unsigned int 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        5 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    2
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_lcdWriteUI
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text25
  2813  00156A                     __ptext25:
  2814                           	opt stack 0
  2815  00156A                     ___lwmod:
  2816                           	opt stack 26
  2817                           
  2818                           ;incstack = 0
  2819  00156A  5024               	movf	___lwmod@divisor,w,c
  2820  00156C  1025               	iorwf	___lwmod@divisor+1,w,c
  2821  00156E  B4D8               	btfsc	status,2,c
  2822  001570  D018               	goto	l746
  2823  001572  0E01               	movlw	1
  2824  001574  6E26               	movwf	___lwmod@counter,c
  2825  001576  D004               	goto	l1917
  2826  001578                     l1915:
  2827  001578  90D8               	bcf	status,0,c
  2828  00157A  3624               	rlcf	___lwmod@divisor,f,c
  2829  00157C  3625               	rlcf	___lwmod@divisor+1,f,c
  2830  00157E  2A26               	incf	___lwmod@counter,f,c
  2831  001580                     l1917:
  2832  001580  AE25               	btfss	___lwmod@divisor+1,7,c
  2833  001582  D7FA               	goto	l1915
  2834  001584                     l1919:
  2835  001584  5024               	movf	___lwmod@divisor,w,c
  2836  001586  5C22               	subwf	___lwmod@dividend,w,c
  2837  001588  5025               	movf	___lwmod@divisor+1,w,c
  2838  00158A  5823               	subwfb	___lwmod@dividend+1,w,c
  2839  00158C  A0D8               	btfss	status,0,c
  2840  00158E  D004               	goto	l1923
  2841  001590  5024               	movf	___lwmod@divisor,w,c
  2842  001592  5E22               	subwf	___lwmod@dividend,f,c
  2843  001594  5025               	movf	___lwmod@divisor+1,w,c
  2844  001596  5A23               	subwfb	___lwmod@dividend+1,f,c
  2845  001598                     l1923:
  2846  001598  90D8               	bcf	status,0,c
  2847  00159A  3225               	rrcf	___lwmod@divisor+1,f,c
  2848  00159C  3224               	rrcf	___lwmod@divisor,f,c
  2849  00159E  2E26               	decfsz	___lwmod@counter,f,c
  2850  0015A0  D7F1               	goto	l1919
  2851  0015A2                     l746:
  2852  0015A2  C022  F022         	movff	___lwmod@dividend,?___lwmod
  2853  0015A6  C023  F023         	movff	___lwmod@dividend+1,?___lwmod+1
  2854  0015AA  0012               	return		;funcret
  2855  0015AC                     __end_of___lwmod:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           intcon	equ	0xFF2
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           indf1	equ	0xFE7
  2865                           postdec1	equ	0xFE5
  2866                           plusw1	equ	0xFE3
  2867                           fsr1h	equ	0xFE2
  2868                           fsr1l	equ	0xFE1
  2869                           indf2	equ	0xFDF
  2870                           postinc2	equ	0xFDE
  2871                           postdec2	equ	0xFDD
  2872                           plusw2	equ	0xFDB
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function ___lwdiv *****************
  2878 ;; Defined at:
  2879 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  dividend        2   33[COMRAM] unsigned int 
  2882 ;;  divisor         2   35[COMRAM] unsigned int 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  quotient        2   38[COMRAM] unsigned int 
  2885 ;;  counter         1   37[COMRAM] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  2   33[COMRAM] unsigned int 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;Total ram usage:        7 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    2
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_lcdWriteUI
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text26
  2910  0014D0                     __ptext26:
  2911                           	opt stack 0
  2912  0014D0                     ___lwdiv:
  2913                           	opt stack 26
  2914                           
  2915                           ;incstack = 0
  2916  0014D0  0E00               	movlw	0
  2917  0014D2  6E28               	movwf	___lwdiv@quotient+1,c
  2918  0014D4  0E00               	movlw	0
  2919  0014D6  6E27               	movwf	___lwdiv@quotient,c
  2920  0014D8  5024               	movf	___lwdiv@divisor,w,c
  2921  0014DA  1025               	iorwf	___lwdiv@divisor+1,w,c
  2922  0014DC  B4D8               	btfsc	status,2,c
  2923  0014DE  D01C               	goto	l736
  2924  0014E0  0E01               	movlw	1
  2925  0014E2  6E26               	movwf	___lwdiv@counter,c
  2926  0014E4  D004               	goto	l1897
  2927  0014E6                     l1895:
  2928  0014E6  90D8               	bcf	status,0,c
  2929  0014E8  3624               	rlcf	___lwdiv@divisor,f,c
  2930  0014EA  3625               	rlcf	___lwdiv@divisor+1,f,c
  2931  0014EC  2A26               	incf	___lwdiv@counter,f,c
  2932  0014EE                     l1897:
  2933  0014EE  AE25               	btfss	___lwdiv@divisor+1,7,c
  2934  0014F0  D7FA               	goto	l1895
  2935  0014F2                     l1899:
  2936  0014F2  90D8               	bcf	status,0,c
  2937  0014F4  3627               	rlcf	___lwdiv@quotient,f,c
  2938  0014F6  3628               	rlcf	___lwdiv@quotient+1,f,c
  2939  0014F8  5024               	movf	___lwdiv@divisor,w,c
  2940  0014FA  5C22               	subwf	___lwdiv@dividend,w,c
  2941  0014FC  5025               	movf	___lwdiv@divisor+1,w,c
  2942  0014FE  5823               	subwfb	___lwdiv@dividend+1,w,c
  2943  001500  A0D8               	btfss	status,0,c
  2944  001502  D005               	goto	l1907
  2945  001504  5024               	movf	___lwdiv@divisor,w,c
  2946  001506  5E22               	subwf	___lwdiv@dividend,f,c
  2947  001508  5025               	movf	___lwdiv@divisor+1,w,c
  2948  00150A  5A23               	subwfb	___lwdiv@dividend+1,f,c
  2949  00150C  8027               	bsf	___lwdiv@quotient,0,c
  2950  00150E                     l1907:
  2951  00150E  90D8               	bcf	status,0,c
  2952  001510  3225               	rrcf	___lwdiv@divisor+1,f,c
  2953  001512  3224               	rrcf	___lwdiv@divisor,f,c
  2954  001514  2E26               	decfsz	___lwdiv@counter,f,c
  2955  001516  D7ED               	goto	l1899
  2956  001518                     l736:
  2957  001518  C027  F022         	movff	___lwdiv@quotient,?___lwdiv
  2958  00151C  C028  F023         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2959  001520  0012               	return		;funcret
  2960  001522                     __end_of___lwdiv:
  2961                           	opt stack 0
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           intcon	equ	0xFF2
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           indf1	equ	0xFE7
  2970                           postdec1	equ	0xFE5
  2971                           plusw1	equ	0xFE3
  2972                           fsr1h	equ	0xFE2
  2973                           fsr1l	equ	0xFE1
  2974                           indf2	equ	0xFDF
  2975                           postinc2	equ	0xFDE
  2976                           postdec2	equ	0xFDD
  2977                           plusw2	equ	0xFDB
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _initPWM *****************
  2983 ;; Defined at:
  2984 ;;		line 26 in file "pwm.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;		None
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;Total ram usage:        0 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    3
  3005 ;; This function calls:
  3006 ;;		_setDutyCycle
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text27
  3013  0016E6                     __ptext27:
  3014                           	opt stack 0
  3015  0016E6                     _initPWM:
  3016                           	opt stack 27
  3017                           
  3018                           ;pwm.c: 27: TRISCbits.RC1 = 0;
  3019                           
  3020                           ;incstack = 0
  3021  0016E6  9294               	bcf	3988,1,c	;volatile
  3022                           
  3023                           ;pwm.c: 28: CCP2CON = 0b00011111;
  3024  0016E8  0E1F               	movlw	31
  3025  0016EA  6EBA               	movwf	4026,c	;volatile
  3026                           
  3027                           ;pwm.c: 29: T2CON = 0x00;
  3028  0016EC  0E00               	movlw	0
  3029  0016EE  6ECA               	movwf	4042,c	;volatile
  3030                           
  3031                           ;pwm.c: 30: PR2 = 0b00110011;
  3032  0016F0  0E33               	movlw	51
  3033  0016F2  6ECB               	movwf	4043,c	;volatile
  3034                           
  3035                           ;pwm.c: 31: setDutyCycle(25);
  3036  0016F4  0E19               	movlw	25
  3037  0016F6  ECAF  F00B         	call	_setDutyCycle
  3038  0016FA  0012               	return		;funcret
  3039  0016FC                     __end_of_initPWM:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           indf1	equ	0xFE7
  3049                           postdec1	equ	0xFE5
  3050                           plusw1	equ	0xFE3
  3051                           fsr1h	equ	0xFE2
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           plusw2	equ	0xFDB
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _setDutyCycle *****************
  3062 ;; Defined at:
  3063 ;;		line 34 in file "pwm.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  x               1    wreg     unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  x               1   33[COMRAM] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:        1 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    2
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_initPWM
  3088 ;;		_dutyCycleUp
  3089 ;;		_dutyCycleDown
  3090 ;;		_dutyCycleSet
  3091 ;;		_dutyCycleClear
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text28
  3096  00175E                     __ptext28:
  3097                           	opt stack 0
  3098  00175E                     _setDutyCycle:
  3099                           	opt stack 26
  3100                           
  3101                           ;incstack = 0
  3102                           ;setDutyCycle@x stored from wreg
  3103  00175E  6E22               	movwf	setDutyCycle@x,c
  3104                           
  3105                           ;pwm.c: 35: CCPR2L = x;
  3106  001760  C022  FFBB         	movff	setDutyCycle@x,4027	;volatile
  3107                           
  3108                           ;pwm.c: 36: T2CONbits.TMR2ON = 1;
  3109  001764  84CA               	bsf	4042,2,c	;volatile
  3110                           
  3111                           ;pwm.c: 37: PIR1bits.CCP1IF = 0;
  3112  001766  949E               	bcf	3998,2,c	;volatile
  3113  001768  0012               	return		;funcret
  3114  00176A                     __end_of_setDutyCycle:
  3115                           	opt stack 0
  3116                           tblptru	equ	0xFF8
  3117                           tblptrh	equ	0xFF7
  3118                           tblptrl	equ	0xFF6
  3119                           tablat	equ	0xFF5
  3120                           intcon	equ	0xFF2
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           indf1	equ	0xFE7
  3124                           postdec1	equ	0xFE5
  3125                           plusw1	equ	0xFE3
  3126                           fsr1h	equ	0xFE2
  3127                           fsr1l	equ	0xFE1
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           plusw2	equ	0xFDB
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _initLCD *****************
  3137 ;; Defined at:
  3138 ;;		line 47 in file "user.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;Total ram usage:        2 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    3
  3159 ;; This function calls:
  3160 ;;		_lcdEnable
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text29
  3167  0011C2                     __ptext29:
  3168                           	opt stack 0
  3169  0011C2                     _initLCD:
  3170                           	opt stack 27
  3171                           
  3172                           ;user.c: 48: PORTCbits.RC5 = 0;
  3173                           
  3174                           ;incstack = 0
  3175  0011C2  9A82               	bcf	3970,5,c	;volatile
  3176                           
  3177                           ;user.c: 49: PORTCbits.RC2 = 0;
  3178  0011C4  9482               	bcf	3970,2,c	;volatile
  3179                           
  3180                           ;user.c: 50: _delay((unsigned long)((100)*(8000000/4000.0)));
  3181  0011C6  0E02               	movlw	2
  3182  0011C8  6E23               	movwf	(??_initLCD+1)& (0+255),c
  3183  0011CA  0E04               	movlw	4
  3184  0011CC  6E22               	movwf	??_initLCD& (0+255),c
  3185  0011CE  0EBA               	movlw	186
  3186  0011D0                     u1197:
  3187  0011D0  2EE8               	decfsz	wreg,f,c
  3188  0011D2  D7FE               	bra	u1197
  3189  0011D4  2E22               	decfsz	??_initLCD& (0+255),f,c
  3190  0011D6  D7FC               	bra	u1197
  3191  0011D8  2E23               	decfsz	(??_initLCD+1)& (0+255),f,c
  3192  0011DA  D7FA               	bra	u1197
  3193  0011DC  D000               	nop2	
  3194                           
  3195                           ;user.c: 52: PORTD = 0b00000010;
  3196  0011DE  0E02               	movlw	2
  3197  0011E0  6E83               	movwf	3971,c	;volatile
  3198                           
  3199                           ;user.c: 53: lcdEnable();
  3200  0011E2  ECC5  F00B         	call	_lcdEnable	;wreg free
  3201                           
  3202                           ;user.c: 54: PORTD = 0b00000010;
  3203  0011E6  0E02               	movlw	2
  3204  0011E8  6E83               	movwf	3971,c	;volatile
  3205                           
  3206                           ;user.c: 55: lcdEnable();
  3207  0011EA  ECC5  F00B         	call	_lcdEnable	;wreg free
  3208                           
  3209                           ;user.c: 56: PORTD = 0b00001111;
  3210  0011EE  0E0F               	movlw	15
  3211  0011F0  6E83               	movwf	3971,c	;volatile
  3212                           
  3213                           ;user.c: 57: lcdEnable();
  3214  0011F2  ECC5  F00B         	call	_lcdEnable	;wreg free
  3215                           
  3216                           ;user.c: 58: _delay((unsigned long)((70)*(8000000/4000000.0)));
  3217  0011F6  0E2E               	movlw	46
  3218  0011F8                     u1207:
  3219  0011F8  2EE8               	decfsz	wreg,f,c
  3220  0011FA  D7FE               	bra	u1207
  3221  0011FC  D000               	nop2	
  3222                           
  3223                           ;user.c: 60: PORTD = 0b00000000;
  3224  0011FE  0E00               	movlw	0
  3225  001200  6E83               	movwf	3971,c	;volatile
  3226                           
  3227                           ;user.c: 61: lcdEnable();
  3228  001202  ECC5  F00B         	call	_lcdEnable	;wreg free
  3229                           
  3230                           ;user.c: 62: PORTD = 0b00001111;
  3231  001206  0E0F               	movlw	15
  3232  001208  6E83               	movwf	3971,c	;volatile
  3233                           
  3234                           ;user.c: 63: lcdEnable();
  3235  00120A  ECC5  F00B         	call	_lcdEnable	;wreg free
  3236                           
  3237                           ;user.c: 64: _delay((unsigned long)((70)*(8000000/4000000.0)));
  3238  00120E  0E2E               	movlw	46
  3239  001210                     u1217:
  3240  001210  2EE8               	decfsz	wreg,f,c
  3241  001212  D7FE               	bra	u1217
  3242  001214  D000               	nop2	
  3243                           
  3244                           ;user.c: 66: PORTD = 0b00000000;
  3245  001216  0E00               	movlw	0
  3246  001218  6E83               	movwf	3971,c	;volatile
  3247                           
  3248                           ;user.c: 67: lcdEnable();
  3249  00121A  ECC5  F00B         	call	_lcdEnable	;wreg free
  3250                           
  3251                           ;user.c: 68: PORTD = 0b00000001;
  3252  00121E  0E01               	movlw	1
  3253  001220  6E83               	movwf	3971,c	;volatile
  3254                           
  3255                           ;user.c: 69: lcdEnable();
  3256  001222  ECC5  F00B         	call	_lcdEnable	;wreg free
  3257                           
  3258                           ;user.c: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  3259  001226  0E1A               	movlw	26
  3260  001228  6E22               	movwf	??_initLCD& (0+255),c
  3261  00122A  0EF8               	movlw	248
  3262  00122C                     u1227:
  3263  00122C  2EE8               	decfsz	wreg,f,c
  3264  00122E  D7FE               	bra	u1227
  3265  001230  2E22               	decfsz	??_initLCD& (0+255),f,c
  3266  001232  D7FC               	bra	u1227
  3267  001234  D000               	nop2	
  3268                           
  3269                           ;user.c: 72: PORTD = 0b00000000;
  3270  001236  0E00               	movlw	0
  3271  001238  6E83               	movwf	3971,c	;volatile
  3272                           
  3273                           ;user.c: 73: lcdEnable();
  3274  00123A  ECC5  F00B         	call	_lcdEnable	;wreg free
  3275                           
  3276                           ;user.c: 74: PORTD = 0b00000011;
  3277  00123E  0E03               	movlw	3
  3278  001240  6E83               	movwf	3971,c	;volatile
  3279                           
  3280                           ;user.c: 75: lcdEnable();
  3281  001242  ECC5  F00B         	call	_lcdEnable	;wreg free
  3282                           
  3283                           ;user.c: 76: _delay((unsigned long)((30)*(8000000/4000.0)));
  3284  001246  0E4E               	movlw	78
  3285  001248  6E22               	movwf	??_initLCD& (0+255),c
  3286  00124A  0EEB               	movlw	235
  3287  00124C                     u1237:
  3288  00124C  2EE8               	decfsz	wreg,f,c
  3289  00124E  D7FE               	bra	u1237
  3290  001250  2E22               	decfsz	??_initLCD& (0+255),f,c
  3291  001252  D7FC               	bra	u1237
  3292  001254  F000               	nop	
  3293  001256  0012               	return		;funcret
  3294  001258                     __end_of_initLCD:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           intcon	equ	0xFF2
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           indf1	equ	0xFE7
  3304                           postdec1	equ	0xFE5
  3305                           plusw1	equ	0xFE3
  3306                           fsr1h	equ	0xFE2
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           plusw2	equ	0xFDB
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _lcdEnable *****************
  3317 ;; Defined at:
  3318 ;;		line 41 in file "user.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		None
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;Total ram usage:        0 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    2
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_initLCD
  3343 ;;		_lcdWriteChar
  3344 ;;		_clearDisplay
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text30
  3349  00178A                     __ptext30:
  3350                           	opt stack 0
  3351  00178A                     _lcdEnable:
  3352                           	opt stack 26
  3353                           
  3354                           ;user.c: 42: PORTCbits.RC5 = 1;
  3355                           
  3356                           ;incstack = 0
  3357  00178A  8A82               	bsf	3970,5,c	;volatile
  3358                           
  3359                           ;user.c: 43: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3360  00178C  D000               	nop2		;2 cycle nop
  3361                           
  3362                           ;user.c: 44: PORTCbits.RC5 = 0;
  3363  00178E  9A82               	bcf	3970,5,c	;volatile
  3364  001790  0012               	return		;funcret
  3365  001792                     __end_of_lcdEnable:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           intcon	equ	0xFF2
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           indf1	equ	0xFE7
  3375                           postdec1	equ	0xFE5
  3376                           plusw1	equ	0xFE3
  3377                           fsr1h	equ	0xFE2
  3378                           fsr1l	equ	0xFE1
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           plusw2	equ	0xFDB
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _InitApp *****************
  3388 ;; Defined at:
  3389 ;;		line 28 in file "user.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		None
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text31
  3418  001794                     __ptext31:
  3419                           	opt stack 0
  3420  001794                     _InitApp:
  3421                           	opt stack 28
  3422                           
  3423                           ;incstack = 0
  3424  001794  0012               	return		;funcret
  3425  001796                     __end_of_InitApp:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           intcon	equ	0xFF2
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           indf1	equ	0xFE7
  3435                           postdec1	equ	0xFE5
  3436                           plusw1	equ	0xFE3
  3437                           fsr1h	equ	0xFE2
  3438                           fsr1l	equ	0xFE1
  3439                           indf2	equ	0xFDF
  3440                           postinc2	equ	0xFDE
  3441                           postdec2	equ	0xFDD
  3442                           plusw2	equ	0xFDB
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _ConfigureOscillator *****************
  3448 ;; Defined at:
  3449 ;;		line 24 in file "system.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		None
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    2
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text32
  3478  001796                     __ptext32:
  3479                           	opt stack 0
  3480  001796                     _ConfigureOscillator:
  3481                           	opt stack 28
  3482                           
  3483                           ;incstack = 0
  3484  001796  0012               	return		;funcret
  3485  001798                     __end_of_ConfigureOscillator:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           intcon	equ	0xFF2
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           indf1	equ	0xFE7
  3495                           postdec1	equ	0xFE5
  3496                           plusw1	equ	0xFE3
  3497                           fsr1h	equ	0xFE2
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           plusw2	equ	0xFDB
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _low_isr *****************
  3508 ;; Defined at:
  3509 ;;		line 75 in file "interrupts.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;		None
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		None
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;Total ram usage:       17 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    1
  3530 ;; This function calls:
  3531 ;;		Nothing
  3532 ;; This function is called by:
  3533 ;;		Interrupt level 1
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	intcodelo
  3538  000018                     __pintcodelo:
  3539                           	opt stack 0
  3540  000018                     _low_isr:
  3541                           	opt stack 25
  3542                           
  3543                           ;incstack = 0
  3544  000018  805E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3545  00001A  CFD8 F011          	movff	status,??_low_isr
  3546  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3547  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3548  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3549  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3550  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3551  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3552  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3553  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3554  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3555  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3556  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3557  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3558  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3559  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3560  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3561  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3562  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3563  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3564  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3565  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3566  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3567  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3568  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3569  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3570  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3571  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3572  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3573  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3574  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3575  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3576  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3577  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3578  00009E  C011  FFD8         	movff	??_low_isr,status
  3579  0000A2  905E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3580  0000A4  0010               	retfie	
  3581  0000A6                     __end_of_low_isr:
  3582                           	opt stack 0
  3583                           pclatu	equ	0xFFB
  3584                           pclath	equ	0xFFA
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           postinc0	equ	0xFEE
  3593                           fsr0h	equ	0xFEA
  3594                           fsr0l	equ	0xFE9
  3595                           wreg	equ	0xFE8
  3596                           indf1	equ	0xFE7
  3597                           postdec1	equ	0xFE5
  3598                           plusw1	equ	0xFE3
  3599                           fsr1h	equ	0xFE2
  3600                           fsr1l	equ	0xFE1
  3601                           bsr	equ	0xFE0
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           plusw2	equ	0xFDB
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _high_isr *****************
  3611 ;; Defined at:
  3612 ;;		line 30 in file "interrupts.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;Total ram usage:       16 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		Interrupt level 2
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	intcode
  3640  000008                     __pintcode:
  3641                           	opt stack 0
  3642  000008                     _high_isr:
  3643                           	opt stack 25
  3644                           
  3645                           ;incstack = 0
  3646  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3647  00000A  EF95  F008         	goto	int_func
  3648                           pclatu	equ	0xFFB
  3649                           pclath	equ	0xFFA
  3650                           tblptru	equ	0xFF8
  3651                           tblptrh	equ	0xFF7
  3652                           tblptrl	equ	0xFF6
  3653                           tablat	equ	0xFF5
  3654                           prodh	equ	0xFF4
  3655                           prodl	equ	0xFF3
  3656                           intcon	equ	0xFF2
  3657                           postinc0	equ	0xFEE
  3658                           fsr0h	equ	0xFEA
  3659                           fsr0l	equ	0xFE9
  3660                           wreg	equ	0xFE8
  3661                           indf1	equ	0xFE7
  3662                           postdec1	equ	0xFE5
  3663                           plusw1	equ	0xFE3
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           bsr	equ	0xFE0
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           postdec2	equ	0xFDD
  3670                           plusw2	equ	0xFDB
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675                           	psect	intcode_body
  3676  00112A                     __pintcode_body:
  3677                           	opt stack 25
  3678  00112A                     int_func:
  3679                           	opt stack 25
  3680  00112A  CFFA F003          	movff	pclath,??_high_isr+2
  3681  00112E  CFFB F004          	movff	pclatu,??_high_isr+3
  3682  001132  CFE9 F005          	movff	fsr0l,??_high_isr+4
  3683  001136  CFEA F006          	movff	fsr0h,??_high_isr+5
  3684  00113A  CFE1 F007          	movff	fsr1l,??_high_isr+6
  3685  00113E  CFE2 F008          	movff	fsr1h,??_high_isr+7
  3686  001142  CFD9 F009          	movff	fsr2l,??_high_isr+8
  3687  001146  CFDA F00A          	movff	fsr2h,??_high_isr+9
  3688  00114A  CFF3 F00B          	movff	prodl,??_high_isr+10
  3689  00114E  CFF4 F00C          	movff	prodh,??_high_isr+11
  3690  001152  CFF6 F00D          	movff	tblptrl,??_high_isr+12
  3691  001156  CFF7 F00E          	movff	tblptrh,??_high_isr+13
  3692  00115A  CFF8 F00F          	movff	tblptru,??_high_isr+14
  3693  00115E  CFF5 F010          	movff	tablat,??_high_isr+15
  3694                           
  3695                           ;interrupts.c: 66: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  3696  001162  BAF2               	btfsc	intcon,5,c	;volatile
  3697  001164  A4F2               	btfss	intcon,2,c	;volatile
  3698  001166  D00F               	goto	i2l10
  3699                           
  3700                           ;interrupts.c: 67: valuePort = valuePort + 1;
  3701  001168  285B               	incf	_valuePort,w,c
  3702  00116A  6E5B               	movwf	_valuePort,c
  3703                           
  3704                           ;interrupts.c: 68: _delay(200000);
  3705  00116C  0E02               	movlw	2
  3706  00116E  6E02               	movwf	(??_high_isr+1)& (0+255),c
  3707  001170  0E04               	movlw	4
  3708  001172  6E01               	movwf	??_high_isr& (0+255),c
  3709  001174  0EBA               	movlw	186
  3710  001176                     i2u124_47:
  3711  001176  2EE8               	decfsz	wreg,f,c
  3712  001178  D7FE               	bra	i2u124_47
  3713  00117A  2E01               	decfsz	??_high_isr& (0+255),f,c
  3714  00117C  D7FC               	bra	i2u124_47
  3715  00117E  2E02               	decfsz	(??_high_isr+1)& (0+255),f,c
  3716  001180  D7FA               	bra	i2u124_47
  3717  001182  D000               	nop2	
  3718                           
  3719                           ;interrupts.c: 69: INTCONbits.TMR0IF = 0;
  3720  001184  94F2               	bcf	intcon,2,c	;volatile
  3721  001186                     i2l10:
  3722  001186  C010  FFF5         	movff	??_high_isr+15,tablat
  3723  00118A  C00F  FFF8         	movff	??_high_isr+14,tblptru
  3724  00118E  C00E  FFF7         	movff	??_high_isr+13,tblptrh
  3725  001192  C00D  FFF6         	movff	??_high_isr+12,tblptrl
  3726  001196  C00C  FFF4         	movff	??_high_isr+11,prodh
  3727  00119A  C00B  FFF3         	movff	??_high_isr+10,prodl
  3728  00119E  C00A  FFDA         	movff	??_high_isr+9,fsr2h
  3729  0011A2  C009  FFD9         	movff	??_high_isr+8,fsr2l
  3730  0011A6  C008  FFE2         	movff	??_high_isr+7,fsr1h
  3731  0011AA  C007  FFE1         	movff	??_high_isr+6,fsr1l
  3732  0011AE  C006  FFEA         	movff	??_high_isr+5,fsr0h
  3733  0011B2  C005  FFE9         	movff	??_high_isr+4,fsr0l
  3734  0011B6  C004  FFFB         	movff	??_high_isr+3,pclatu
  3735  0011BA  C003  FFFA         	movff	??_high_isr+2,pclath
  3736  0011BE  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3737  0011C0  0011               	retfie		f
  3738  0011C2                     __end_of_high_isr:
  3739                           	opt stack 0
  3740                           pclatu	equ	0xFFB
  3741                           pclath	equ	0xFFA
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           fsr0h	equ	0xFEA
  3751                           fsr0l	equ	0xFE9
  3752                           wreg	equ	0xFE8
  3753                           indf1	equ	0xFE7
  3754                           postdec1	equ	0xFE5
  3755                           plusw1	equ	0xFE3
  3756                           fsr1h	equ	0xFE2
  3757                           fsr1l	equ	0xFE1
  3758                           bsr	equ	0xFE0
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           plusw2	equ	0xFDB
  3763                           fsr2h	equ	0xFDA
  3764                           fsr2l	equ	0xFD9
  3765                           status	equ	0xFD8
  3766                           pclatu	equ	0xFFB
  3767                           pclath	equ	0xFFA
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           intcon	equ	0xFF2
  3775                           postinc0	equ	0xFEE
  3776                           fsr0h	equ	0xFEA
  3777                           fsr0l	equ	0xFE9
  3778                           wreg	equ	0xFE8
  3779                           indf1	equ	0xFE7
  3780                           postdec1	equ	0xFE5
  3781                           plusw1	equ	0xFE3
  3782                           fsr1h	equ	0xFE2
  3783                           fsr1l	equ	0xFE1
  3784                           bsr	equ	0xFE0
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           plusw2	equ	0xFDB
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793                           	psect	rparam
  3794  0000                     pclatu	equ	0xFFB
  3795                           pclath	equ	0xFFA
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           intcon	equ	0xFF2
  3803                           postinc0	equ	0xFEE
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           indf1	equ	0xFE7
  3808                           postdec1	equ	0xFE5
  3809                           plusw1	equ	0xFE3
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           bsr	equ	0xFE0
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           postdec2	equ	0xFDD
  3816                           plusw2	equ	0xFDB
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821                           	psect	temp
  3822  00005E                     btemp:
  3823                           	opt stack 0
  3824  00005E                     	ds	1
  3825  0000                     int$flags	set	btemp
  3826                           pclatu	equ	0xFFB
  3827                           pclath	equ	0xFFA
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           postinc0	equ	0xFEE
  3836                           fsr0h	equ	0xFEA
  3837                           fsr0l	equ	0xFE9
  3838                           wreg	equ	0xFE8
  3839                           indf1	equ	0xFE7
  3840                           postdec1	equ	0xFE5
  3841                           plusw1	equ	0xFE3
  3842                           fsr1h	equ	0xFE2
  3843                           fsr1l	equ	0xFE1
  3844                           bsr	equ	0xFE0
  3845                           indf2	equ	0xFDF
  3846                           postinc2	equ	0xFDE
  3847                           postdec2	equ	0xFDD
  3848                           plusw2	equ	0xFDB
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        17
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      93
    BANK0           128     19      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    lcdWriteString@str	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[13]), STR_1(CODE[2]), main@str(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_lcdWriteInt
    _readZ->_readDataByte
    _readGesture->_readDataByte
    _readDataByte->_writeDataByte
    _writeDataByte->_sendByte
    _myQueuePush->___awmod
    _myQueueCheck->___awmod
    _moreLight->_dutyCycleDown
    _dutyCycleDown->_setDutyCycle
    _lightSwitch->_initQueue
    _dutyCycleSet->_setDutyCycle
    _dutyCycleClear->_setDutyCycle
    _dutyCycleUp->_setDutyCycle
    _lcdWriteString->_lcdWriteChar
    _lcdWriteInt->_lcdWriteUI
    _lcdWriteUI->___lwdiv
    _initPWM->_setDutyCycle

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    5778
                                              0 BANK0     19    19      0
                _ConfigureOscillator
                            _InitApp
                            _initLCD
                            _initPWM
                          _initQueue
                        _lcdWriteInt
                     _lcdWriteString
                          _lessLight
                        _lightSwitch
                          _moreLight
                       _myQueueCheck
                        _myQueuePush
                        _readGesture
                              _readZ
 ---------------------------------------------------------------------------------
 (1) _readZ                                                1     1      0     858
                                             39 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (1) _readGesture                                          1     1      0     858
                                             39 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (2) _readDataByte                                         3     2      1     824
                                             36 COMRAM     3     2      1
                         _I2CRestart
                        _receiveByte
                           _sendByte
                      _writeDataByte
 ---------------------------------------------------------------------------------
 (3) _writeDataByte                                        2     1      1     170
                                             34 COMRAM     2     1      1
                            _I2CInit
                           _I2CStart
                           _sendByte
 ---------------------------------------------------------------------------------
 (4) _sendByte                                             1     1      0      31
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _receiveByte                                          1     1      0      34
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myQueuePush                                          2     0      2     849
                                             39 COMRAM     2     0      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _myQueueCheck                                         6     4      2     840
                                             39 COMRAM     6     4      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     741
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _moreLight                                            0     0      0      68
                      _dutyCycleDown
 ---------------------------------------------------------------------------------
 (2) _dutyCycleDown                                        6     6      0      68
                                             34 COMRAM     6     6      0
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lightSwitch                                          0     0      0     161
                     _dutyCycleClear
                       _dutyCycleSet
                          _initQueue
 ---------------------------------------------------------------------------------
 (2) _initQueue                                            2     2      0      99
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dutyCycleSet                                         0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (2) _dutyCycleClear                                       0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lessLight                                            0     0      0      31
                        _dutyCycleUp
 ---------------------------------------------------------------------------------
 (2) _dutyCycleUp                                          0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       6     4      2     423
                                             35 COMRAM     6     4      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdWriteInt                                          2     0      2    1421
                                             64 COMRAM     2     0      2
                       _lcdWriteChar
                         _lcdWriteUI
 ---------------------------------------------------------------------------------
 (2) _lcdWriteUI                                          24    22      2    1186
                                             40 COMRAM    24    22      2
                            ___lwdiv
                            ___lwmod
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _lcdWriteChar                                         2     2      0      62
                                             33 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             33 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             33 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (3) _setDutyCycle                                         1     1      0      31
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0       0
                                             33 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) _lcdEnable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _initLCD
     _lcdEnable
   _initPWM
     _setDutyCycle
   _initQueue
   _lcdWriteInt
     _lcdWriteChar
       _lcdEnable
     _lcdWriteUI
       ___lwdiv
       ___lwmod
       _lcdWriteChar
         _lcdEnable
   _lcdWriteString
     _lcdWriteChar
       _lcdEnable
   _lessLight
     _dutyCycleUp
       _setDutyCycle
   _lightSwitch
     _dutyCycleClear
       _setDutyCycle
     _dutyCycleSet
       _setDutyCycle
     _initQueue
   _moreLight
     _dutyCycleDown
       _setDutyCycle
   _myQueueCheck
     ___awmod
   _myQueuePush
     ___awmod
   _readGesture
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte
   _readZ
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     13      22       5       26.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7F      34        0.0%
DATA                 0      0      7F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr  3 14:24:34 2017

                 lcdWriteUI@i 003F                            bsr 000FE0                   __CFG_BORV$3 000000  
         __size_of_I2CRestart 0008                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                 __CFG_WDT$ON 000000                           l211 1710                           l205 1734  
                         l324 1620                           l193 176C                           l199 1774  
                         l736 1518                           l746 15A2                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           _ack 005A  
             __end_of_I2CInit 1746                  ___awmod@sign 0027                           wreg 000FE8  
               lcdWriteUI@num 0029                ??_lcdWriteChar 0022                          l2011 13F4  
                        l2003 13DA                          l2023 1420                          l2015 1408  
                        l2007 13E8                          l2103 1350                          l2009 13F0  
                        l2113 13A8                          l2131 16B0                          l2019 1412  
                        l2107 1360                          l2211 10EE                          l2117 13B0  
                        l2221 1116                          l2213 10F8                          l2071 12DC  
                        l2127 16A8                          l2143 1638                          l2135 1630  
                        l2215 10FE                          l2153 1640                          l2075 1312  
                        l2147 163C                          l2139 1634                          l2219 1104  
                        l2095 168A                          l2195 108E                          l1907 150E  
                        l1923 1598                          l1915 1578                          l1917 1580  
                        l1941 1260                          l1933 1600                          l1919 1584  
                        l1951 12C8                          l1929 15F0                          l1949 12B0  
                        l1981 146C                          l1895 14E6                          l1983 1472  
                        l1897 14EE                          l1969 16DA                          l1985 1476  
                        l1977 1456                          l1899 14F2                          l1979 1460  
                        l1999 13CE                          STR_1 100E                          STR_2 1001  
                        u1000 130A                          u1010 1340                          u1101 1052  
                        u1007 1300                          u1017 1336                          u1050 139E  
                        u1207 11F8                          u1127 103A                          u1217 1210  
                        u1137 1074                          u1227 122C                          u1147 10E0  
                        u1237 124C                          u1157 111E                          _LATB 000F8A  
                        u1167 152C                          u1177 1548                          u1187 1560  
                        u1197 11D0                          i2l10 1186              ??_dutyCycleClear 0023  
                        _main 1012                          _iter 0057                          _rate 005D  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 005E  
            __end_of_I2CStart 1772                          prodh 000FF4                          prodl 000FF3  
                        start 00A6                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               __end_of_InitApp 1796                  ?_readGesture 0001  
                ?_lightSwitch 0001                lcdWriteInt@num 0041                         ?_main 0001  
             __end_of___awmod 142A                         _T0CON 000FD5                         _T2CON 000FCA  
             __end_of___lwdiv 1522               __end_of___lwmod 15AC                         _PORTB 000F81  
                       _PORTD 000F83                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95           _ConfigureOscillator 1796  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                  ?_dutyCycleUp 0001                 __CFG_WRTB$OFF 000000  
                       __addr 0059                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 1258                __CFG_EBTRB$OFF 000000               __end_of_initPWM 16FC  
                       _readZ 16FC               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8                  ?_receiveByte 0001                __CFG_PBADEN$ON 000000  
        ?_ConfigureOscillator 0001               __initialization 147E                 ?_readDataByte 0025  
                __end_of_main 112A               lcdWriteUI@stack 002B                     ??_I2CInit 0022  
              __CFG_OSC$RCIO6 000000                        ??_main 0080                 __activetblptr 000002  
            ??_lcdWriteString 0026                  ?_myQueuePush 0028                        ?_readZ 0001  
                      _CCPR2L 000FBB                  ??_I2CRestart 0022                        _SSPBUF 000FC9  
                   ??_InitApp 0022         ??_ConfigureOscillator 0022          __size_of_lcdWriteInt 0020  
              ??_readDataByte 0026                __CFG_XINST$OFF 000000                 ?_dutyCycleSet 0001  
            __end_of_high_isr 11C2          __end_of_lcdWriteChar 156A                __CFG_STVREN$ON 000000  
                   ??___awmod 0026               lcdWriteString@i 0028                     ??___lwdiv 0026  
                   ??___lwmod 0026                        clear_0 14BC               ___awmod@divisor 0024  
             ___awmod@counter 0026            __end_of_I2CRestart 177A              __end_of_sendByte 173A  
                   ??_initLCD 0022                     ??_initPWM 0023                  __pdataCOMRAM 005C  
      __size_of_writeDataByte 0018                     ?_I2CStart 0001                  __mediumconst 0000  
                   ??_low_isr 0011                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8        __size_of_dutyCycleDown 0054                    __accesstop 0080  
     __end_of__initialization 14C2                 ___rparam_used 000001                ??_dutyCycleSet 0023  
              __pcstackCOMRAM 0001                  __pidataBANK0 171C                 __end_of_readZ 170C  
          __size_of_lcdEnable 0008          __size_of_readGesture 0034          __size_of_lightSwitch 001E  
                  ??_I2CStart 0022                       ??_readZ 0028          __size_of_dutyCycleUp 0018  
               ?_setDutyCycle 0001                 ?_myQueueCheck 0028            __size_of_initQueue 003A  
          __size_of_lessLight 000C                 _writeDataByte 16B6          __size_of_receiveByte 0010  
               _dutyCycleDown 142A            __size_of_moreLight 000C                       _CCP2CON 000FBA  
                     _I2CInit 173A                    _lcdWriteUI 1258          __end_of_readDataByte 1678  
        __size_of_myQueuePush 003C             _dutyCycleDown$584 0027              writeDataByte@reg 0023  
                   ?_high_isr 0001                ??_setDutyCycle 0022                ??_myQueueCheck 002A  
           __end_of_lcdEnable 1792                ?_writeDataByte 0023                       _InitApp 1794  
       __size_of_lcdWriteChar 0048                     ?_sendByte 0001                       __Hparam 0000  
                     __Lparam 0000                ?_dutyCycleDown 0001                       ___awmod 13BA  
                     ___lwdiv 14D0                       ___lwmod 156A                  __psmallconst 1000  
                     __pcinit 147E                 setDutyCycle@x 0022                       __ramtop 1000  
               myQueueCheck@i 002C                       __ptext0 1012                       __ptext1 16FC  
                     __ptext2 1622                       __ptext3 1656                       __ptext4 16B6  
                     __ptext5 172C                       __ptext6 176A                       __ptext7 173A  
                     __ptext8 170C                       __ptext9 1772                       _initLCD 11C2  
                     _initPWM 16E6             __end_of_initQueue 1622             __end_of_lessLight 175E  
                   _T2CONbits 000FCA              ___awmod@dividend 0022                       _low_isr 0018  
        __end_of_dutyCycleSet 1782                       main@ges 0091                       main@pos 0092  
                     main@str 0082                    ??_high_isr 0001                  _lcdWriteChar 1522  
              __pintcode_body 112A             __end_of_moreLight 1752          end_of_initialization 14C2  
               __Lmediumconst 0000                       int_func 112A              readDataByte@addr 0027  
            readDataByte@retc 0026                    ??_sendByte 0022            readGesture@gesture 0028  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE       __size_of_dutyCycleClear 0008                     _PORTCbits 000F82  
                 ?_lcdWriteUI 0029                     _TRISCbits 000F94             __size_of_I2CStart 0008  
 __end_of_ConfigureOscillator 1798               ??_writeDataByte 0024               receiveByte@retc 0022  
               ??_lcdWriteInt 0043               ??_dutyCycleDown 0023                 __pidataCOMRAM 1792  
        __end_of_setDutyCycle 176A          __end_of_myQueueCheck 13BA         __size_of_readDataByte 0022  
         start_initialization 147E       __size_of_lcdWriteString 0076                    readZ@z_pos 0028  
         __size_of_lcdWriteUI 007A             lcdWriteChar@leter 0023                    initQueue@i 0022  
                _readDataByte 1656           __end_of_lcdWriteInt 1698                 ??_readGesture 0028  
                 __pdataBANK0 0093              __CFG_LPT1OSC$OFF 000000                 ??_lightSwitch 0024  
                    ?_I2CInit 0001         __size_of_dutyCycleSet 0008                   __pbssCOMRAM 0043  
               ??_dutyCycleUp 0023                 __pcstackBANK0 0080             __size_of_high_isr 11BA  
               ??_receiveByte 0022                      ?_InitApp 0001              ___lwdiv@dividend 0022  
           __CFG_CCP2MX$PORTC 000000                     _lcdEnable 178A                  _dutyCycleSet 177A  
                   __pintcode 0008             __size_of_sendByte 000E                _dutyCycleClear 1782  
                    ?___awmod 0022                      ?___lwdiv 0022                      ?___lwmod 0022  
                 __pintcodelo 0018                      ?_initLCD 0001                      ?_initPWM 0001  
                 __smallconst 1000                 ??_myQueuePush 002A           __end_of_readGesture 1656  
                    _I2CStart 176A           __end_of_lightSwitch 16B6                      ?_low_isr 0001  
                   _initQueue 15E8              ___lwdiv@quotient 0027                     _lessLight 1752  
              __size_of_readZ 0010           __end_of_dutyCycleUp 16E6                  myQueuePush@x 0028  
                 _lcdWriteInt 1678                     _moreLight 1746               readDataByte@reg 0025  
      __end_of_dutyCycleClear 178A                      i2u124_47 1176                      _PIR1bits 000F9E  
                  ?_lcdEnable 0001                     _valuePort 005B              __CFG_WDTPS$32768 000000  
       __size_of_setDutyCycle 000C         __size_of_myQueueCheck 0072                     main@F2922 0093  
         __end_of_receiveByte 171C             writeDataByte@addr 0024              __size_of_I2CInit 000C  
                ??_lcdWriteUI 002B                    ?_initQueue 0001                    ?_lessLight 0001  
                   copy_data0 1492                    _I2CRestart 1772           __end_of_myQueuePush 15E8  
              _lcdWriteString 12D2                  _setDutyCycle 175E                  _myQueueCheck 1348  
                  ?_moreLight 0001              __size_of_InitApp 0002                      __Hrparam 0000  
             ?_dutyCycleClear 0001                      __Lrparam 0000            __end_of_lcdWriteUI 12D2  
          __CFG_BOREN$SBORDIS 000000                   _readGesture 1622              __size_of___awmod 0070  
                 _lightStatus 005C              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                 _lightSwitch 1698              __size_of_initLCD 0096              __size_of_initPWM 0016  
           lcdWriteString@str 0024                     sendByte@c 0022               ___lwdiv@divisor 0024  
                 _dutyCycleUp 16CE               ___lwdiv@counter 0026              __size_of_low_isr 008E  
                    __ptext10 15AC                      __ptext11 1348                      __ptext20 16CE  
                    __ptext12 13BA                      __ptext21 12D2                      __ptext13 1746  
                    __ptext30 178A                      __ptext22 1678                      __ptext14 142A  
                    __ptext31 1794                      __ptext23 1258                      __ptext15 1698  
                    __ptext32 1796                      __ptext24 1522                      __ptext16 15E8  
                    __ptext25 156A                      __ptext17 177A                      __ptext26 14D0  
                    __ptext18 1782                      __ptext27 16E6                      __ptext19 1752  
                    __ptext28 175E                      __ptext29 11C2        __end_of_lcdWriteString 1348  
                    _high_isr 0008                 __size_of_main 0118         __end_of_writeDataByte 16CE  
                 _receiveByte 170C                      _sendByte 172C  __size_of_ConfigureOscillator 0002  
       __end_of_dutyCycleDown 147E                   ??_lcdEnable 0022                      _my_stack 0043  
                    int$flags 005E                    _INTCONbits 000FF2                   _myQueuePush 15AC  
                 ??_initQueue 0022                   ??_lessLight 0023               ?_lcdWriteString 0024  
                 ?_I2CRestart 0001                      intlevel1 0000                      intlevel2 0000  
            ___lwmod@dividend 0022                   ??_moreLight 0029               ___lwmod@divisor 0024  
             ___lwmod@counter 0026                   _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5  
               ?_lcdWriteChar 0001                  ?_lcdWriteInt 0041  
