

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Apr 28 16:50:08 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.41
    65                           ; Generated 25/01/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18LF4620 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  001BC2                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _lightStatus
   104  001BC2  01                 	db	1
   105                           
   106                           ;initializer for _rate
   107  001BC3  2D                 	db	45
   108  0000                     _PORTBbits	set	3969
   109  0000                     _TXREG	set	4013
   110  0000                     _RCSTAbits	set	4011
   111  0000                     _PIE1bits	set	3997
   112  0000                     _SPBRG	set	4015
   113  0000                     _SPBRGH	set	4016
   114  0000                     _BAUDCONbits	set	4024
   115  0000                     _TXSTAbits	set	4012
   116  0000                     _T2CONbits	set	4042
   117  0000                     _T2CON	set	4042
   118  0000                     _CCP2CON	set	4026
   119  0000                     _CCPR2L	set	4027
   120  0000                     _PR2	set	4043
   121  0000                     _SSPBUF	set	4041
   122  0000                     _PIR1bits	set	3998
   123  0000                     _SSPCON2bits	set	4037
   124  0000                     _SSPCON1bits	set	4038
   125  0000                     _LATB	set	3978
   126  0000                     _PORTD	set	3971
   127  0000                     _PORTCbits	set	3970
   128  0000                     _T0CON	set	4053
   129  0000                     _TRISCbits	set	3988
   130  0000                     _PORTB	set	3969
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISA	set	3986
   134  0000                     _TRISB	set	3987
   135  0000                     _TMR0L	set	4054
   136  0000                     _TMR0H	set	4055
   137  0000                     _INTCONbits	set	4082
   138  0000                     _RCREG	set	4014
   139  0000                     _TRMT	set	32097
   140  0000                     _LATA2	set	31818
   141  0000                     _RCIF	set	31989
   142  0000                     _RCIE	set	31981
   143                           
   144                           	psect	smallconst
   145  001000                     __psmallconst:
   146                           	opt stack 0
   147  001000  00                 	db	0
   148  001001                     STR_2:
   149  001001  4C                 	db	76	;'L'
   150  001002  49                 	db	73	;'I'
   151  001003  47                 	db	71	;'G'
   152  001004  48                 	db	72	;'H'
   153  001005  54                 	db	84	;'T'
   154  001006  5F                 	db	95	;'_'
   155  001007  53                 	db	83	;'S'
   156  001008  57                 	db	87	;'W'
   157  001009  49                 	db	73	;'I'
   158  00100A  54                 	db	84	;'T'
   159  00100B  43                 	db	67	;'C'
   160  00100C  48                 	db	72	;'H'
   161  00100D  00                 	db	0
   162  00100E                     STR_1:
   163  00100E  20                 	db	32
   164  00100F  00                 	db	0
   165                           
   166                           ; #config settings
   167  001010  00                 	db	0	; dummy byte at the end
   168  0000                     
   169                           	psect	cinit
   170  00191E                     __pcinit:
   171                           	opt stack 0
   172  00191E                     start_initialization:
   173                           	opt stack 0
   174  00191E                     __initialization:
   175                           	opt stack 0
   176                           
   177                           ; Initialize objects allocated to COMRAM (2 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179  00191E  0EC2               	movlw	low __pidataCOMRAM
   180  001920  6EF6               	movwf	tblptrl,c
   181  001922  0E1B               	movlw	high __pidataCOMRAM
   182  001924  6EF7               	movwf	tblptrh,c
   183  001926  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184  001928  6EF8               	movwf	tblptru,c
   185  00192A  0009               	tblrd		*+	;fetch initializer
   186  00192C  CFF5 F058          	movff	tablat,__pdataCOMRAM
   187  001930  0009               	tblrd		*+	;fetch initializer
   188  001932  CFF5 F059          	movff	tablat,__pdataCOMRAM+1
   189                           
   190                           ; Clear objects allocated to BANK0 (105 bytes)
   191  001936  EE00  F080         	lfsr	0,__pbssBANK0
   192  00193A  0E69               	movlw	105
   193  00193C                     clear_0:
   194  00193C  6AEE               	clrf	postinc0,c
   195  00193E  06E8               	decf	wreg,f,c
   196  001940  E1FD               	bnz	clear_0
   197                           
   198                           ; Clear objects allocated to COMRAM (39 bytes)
   199  001942  EE00  F031         	lfsr	0,__pbssCOMRAM
   200  001946  0E27               	movlw	39
   201  001948                     clear_1:
   202  001948  6AEE               	clrf	postinc0,c
   203  00194A  06E8               	decf	wreg,f,c
   204  00194C  E1FD               	bnz	clear_1
   205  00194E                     end_of_initialization:
   206                           	opt stack 0
   207  00194E                     __end_of__initialization:
   208                           	opt stack 0
   209  00194E  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   210  001950  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   211  001952  0E00               	movlw	low (__Lmediumconst shr (0+16))
   212  001954  6EF8               	movwf	tblptru,c
   213  001956  0100               	movlb	0
   214  001958  EF2B  F009         	goto	_main	;jump to C main() function
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           
   222                           	psect	bssCOMRAM
   223  000031                     __pbssCOMRAM:
   224                           	opt stack 0
   225  000031                     _my_stack:
   226                           	opt stack 0
   227  000031                     	ds	20
   228  000045                     _myCount:
   229                           	opt stack 0
   230  000045                     	ds	2
   231  000047                     _iter:
   232                           	opt stack 0
   233  000047                     	ds	2
   234  000049                     _servo_counter:
   235                           	opt stack 0
   236  000049                     	ds	2
   237  00004B                     _offCounter:
   238                           	opt stack 0
   239  00004B                     	ds	2
   240  00004D                     _onCounter:
   241                           	opt stack 0
   242  00004D                     	ds	2
   243  00004F                     _servo_direction:
   244                           	opt stack 0
   245  00004F                     	ds	2
   246  000051                     __addr:
   247                           	opt stack 0
   248  000051                     	ds	1
   249  000052                     _ack:
   250                           	opt stack 0
   251  000052                     	ds	1
   252  000053                     _valuePort:
   253                           	opt stack 0
   254  000053                     	ds	1
   255  000054                     _uart_tail:
   256                           	opt stack 0
   257  000054                     	ds	1
   258  000055                     _uart_head:
   259                           	opt stack 0
   260  000055                     	ds	1
   261  000056                     _RC_FLAG:
   262                           	opt stack 0
   263  000056                     	ds	1
   264  000057                     _RC_DATA:
   265                           	opt stack 0
   266  000057                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	dataCOMRAM
   275  000058                     __pdataCOMRAM:
   276                           	opt stack 0
   277  000058                     _lightStatus:
   278                           	opt stack 0
   279  000058                     	ds	1
   280  000059                     _rate:
   281                           	opt stack 0
   282  000059                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	bssBANK0
   291  000080                     __pbssBANK0:
   292                           	opt stack 0
   293  000080                     _uart_buffer:
   294                           	opt stack 0
   295  000080                     	ds	105
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           
   303                           	psect	cstackBANK1
   304  000100                     __pcstackBANK1:
   305                           	opt stack 0
   306  000100                     ??_main:
   307                           
   308                           ; 1 bytes @ 0x0
   309  000100                     	ds	2
   310  000102                     main@ges:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0x2
   314  000102                     	ds	1
   315  000103                     main@command:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x3
   319  000103                     	ds	1
   320  000104                     main@pos:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x4
   324  000104                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	cstackBANK0
   333  0000E9                     __pcstackBANK0:
   334                           	opt stack 0
   335  0000E9                     myQueueCheck@i:
   336                           	opt stack 0
   337  0000E9                     lcdWriteUI@stack:
   338                           	opt stack 0
   339                           
   340                           ; 20 bytes @ 0x0
   341  0000E9                     	ds	20
   342  0000FD                     lcdWriteUI@i:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x14
   346  0000FD                     	ds	2
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackCOMRAM
   355  000001                     __pcstackCOMRAM:
   356                           	opt stack 0
   357  000001                     ?i2___awmod:
   358                           	opt stack 0
   359  000001                     uartTX@data:
   360                           	opt stack 0
   361  000001                     i2___awmod@dividend:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x0
   365  000001                     	ds	2
   366  000003                     i2___awmod@divisor:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x2
   370  000003                     	ds	2
   371  000005                     i2___awmod@counter:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x4
   375  000005                     	ds	1
   376  000006                     i2___awmod@sign:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x5
   380  000006                     	ds	1
   381  000007                     ??_high_isr:
   382                           
   383                           ; 1 bytes @ 0x6
   384  000007                     	ds	14
   385  000015                     ??_low_isr:
   386                           
   387                           ; 1 bytes @ 0x14
   388  000015                     	ds	17
   389  000026                     ??_initLCD:
   390  000026                     ??_lcdWriteChar:
   391  000026                     ?___awmod:
   392                           	opt stack 0
   393  000026                     ?___lwdiv:
   394                           	opt stack 0
   395  000026                     ?___lwmod:
   396                           	opt stack 0
   397  000026                     sendByte@c:
   398                           	opt stack 0
   399  000026                     receiveByte@retc:
   400                           	opt stack 0
   401  000026                     setDutyCycle@x:
   402                           	opt stack 0
   403  000026                     startTurning@dirct:
   404                           	opt stack 0
   405  000026                     initQueue@i:
   406                           	opt stack 0
   407  000026                     ___awmod@dividend:
   408                           	opt stack 0
   409  000026                     ___lwdiv@dividend:
   410                           	opt stack 0
   411  000026                     ___lwmod@dividend:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x25
   415  000026                     	ds	1
   416  000027                     ??_dutyCycleDown:
   417  000027                     lcdWriteChar@leter:
   418                           	opt stack 0
   419  000027                     writeDataByte@reg:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x26
   423  000027                     	ds	1
   424  000028                     writeDataByte@addr:
   425                           	opt stack 0
   426  000028                     lcdWriteString@str:
   427                           	opt stack 0
   428  000028                     ___awmod@divisor:
   429                           	opt stack 0
   430  000028                     ___lwdiv@divisor:
   431                           	opt stack 0
   432  000028                     ___lwmod@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x27
   436  000028                     	ds	1
   437  000029                     readDataByte@reg:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x28
   441  000029                     	ds	1
   442  00002A                     ??_lcdWriteString:
   443  00002A                     readDataByte@retc:
   444                           	opt stack 0
   445  00002A                     ___awmod@counter:
   446                           	opt stack 0
   447  00002A                     ___lwdiv@counter:
   448                           	opt stack 0
   449  00002A                     ___lwmod@counter:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x29
   453  00002A                     	ds	1
   454  00002B                     readDataByte@addr:
   455                           	opt stack 0
   456  00002B                     ___awmod@sign:
   457                           	opt stack 0
   458  00002B                     _dutyCycleDown$670:
   459                           	opt stack 0
   460  00002B                     ___lwdiv@quotient:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x2A
   464  00002B                     	ds	1
   465  00002C                     ?_myQueueCheck:
   466                           	opt stack 0
   467  00002C                     readZ@z_pos:
   468                           	opt stack 0
   469  00002C                     readGesture@gesture:
   470                           	opt stack 0
   471  00002C                     lcdWriteString@i:
   472                           	opt stack 0
   473  00002C                     myQueuePush@x:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x2B
   477  00002C                     	ds	1
   478  00002D                     getCommand@ret:
   479                           	opt stack 0
   480  00002D                     lcdWriteUI@num:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x2C
   484  00002D                     	ds	1
   485  00002E                     
   486                           ; 1 bytes @ 0x2D
   487  00002E                     	ds	1
   488  00002F                     lcdWriteInt@num:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x2E
   492  00002F                     	ds	2
   493  000031                     tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           
   500                           ; 1 bytes @ 0x30
   501 ;;
   502 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   503 ;;
   504 ;; *************** function _main *****************
   505 ;; Defined at:
   506 ;;		line 46 in file "main.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  command         1    3[BANK1 ] unsigned char 
   511 ;;  ges             1    2[BANK1 ] enum E2865
   512 ;;  pos             1    4[BANK1 ] unsigned char 
   513 ;; Return value:  Size  Location     Type
   514 ;;                  2  142[None  ] int 
   515 ;; Registers used:
   516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   525 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   526 ;;Total ram usage:        5 bytes
   527 ;; Hardware stack levels required when called:    7
   528 ;; This function calls:
   529 ;;		_ConfigureOscillator
   530 ;;		_InitApp
   531 ;;		___awmod
   532 ;;		_closeAirCondition
   533 ;;		_closeDoor
   534 ;;		_getCommand
   535 ;;		_initLCD
   536 ;;		_initPWM
   537 ;;		_initQueue
   538 ;;		_initUART
   539 ;;		_lcdWriteChar
   540 ;;		_lcdWriteInt
   541 ;;		_lcdWriteString
   542 ;;		_lessLight
   543 ;;		_lightSwitch
   544 ;;		_moreLight
   545 ;;		_myQueueCheck
   546 ;;		_myQueuePush
   547 ;;		_openAirCondition
   548 ;;		_openDoor
   549 ;;		_readGesture
   550 ;;		_readZ
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text0
   557  001256                     __ptext0:
   558                           	opt stack 0
   559  001256                     _main:
   560                           	opt stack 24
   561                           
   562                           ;main.c: 49: ConfigureOscillator();
   563                           
   564                           ;incstack = 0
   565  001256  ECE3  F00D         	call	_ConfigureOscillator	;wreg free
   566                           
   567                           ;main.c: 52: InitApp();
   568  00125A  ECE2  F00D         	call	_InitApp	;wreg free
   569                           
   570                           ;main.c: 54: TRISB=0X00;
   571  00125E  0E00               	movlw	0
   572  001260  6E93               	movwf	3987,c	;volatile
   573                           
   574                           ;main.c: 55: TRISA=0XFF;
   575  001262  6892               	setf	3986,c	;volatile
   576                           
   577                           ;main.c: 56: TRISD = 0x00;
   578  001264  0E00               	movlw	0
   579  001266  6E95               	movwf	3989,c	;volatile
   580                           
   581                           ;main.c: 57: TRISC = 0b00011000;
   582  001268  0E18               	movlw	24
   583  00126A  6E94               	movwf	3988,c	;volatile
   584                           
   585                           ;main.c: 58: PORTB=0X00;
   586  00126C  0E00               	movlw	0
   587  00126E  6E81               	movwf	3969,c	;volatile
   588                           
   589                           ;main.c: 60: TRISCbits.RC2 = 0;
   590  001270  9494               	bcf	3988,2,c	;volatile
   591                           
   592                           ;main.c: 61: T0CON = 0b10001000;
   593  001272  0E88               	movlw	136
   594  001274  6ED5               	movwf	4053,c	;volatile
   595                           
   596                           ;main.c: 62: INTCONbits.TMR0IE = 1;
   597  001276  8AF2               	bsf	intcon,5,c	;volatile
   598                           
   599                           ;main.c: 63: (INTCONbits.GIE = 1);
   600  001278  8EF2               	bsf	intcon,7,c	;volatile
   601                           
   602                           ;main.c: 66: _delay((unsigned long)((70)*(4000000/4000.0)));
   603  00127A  0E5B               	movlw	91
   604  00127C  0101               	movlb	1	; () banked
   605  00127E  6F00               	movwf	??_main& (0+255),b
   606  001280  0EE7               	movlw	231
   607  001282                     u1987:
   608  001282  2EE8               	decfsz	wreg,f,c
   609  001284  D7FE               	bra	u1987
   610  001286  2F00               	decfsz	??_main& (0+255),f,b
   611  001288  D7FC               	bra	u1987
   612  00128A  D000               	nop2	
   613                           
   614                           ;main.c: 67: initLCD();
   615  00128C  ECBE  F00A         	call	_initLCD	;wreg free
   616                           
   617                           ;main.c: 70: _delay((unsigned long)((500)*(4000000/4000.0)));
   618  001290  0E03               	movlw	3
   619  001292  0101               	movlb	1	; () banked
   620  001294  6F01               	movwf	(??_main+1)& (0+255),b
   621  001296  0E8A               	movlw	138
   622  001298  0101               	movlb	1	; () banked
   623  00129A  6F00               	movwf	??_main& (0+255),b
   624  00129C  0E55               	movlw	85
   625  00129E                     u1997:
   626  00129E  2EE8               	decfsz	wreg,f,c
   627  0012A0  D7FE               	bra	u1997
   628  0012A2  2F00               	decfsz	??_main& (0+255),f,b
   629  0012A4  D7FC               	bra	u1997
   630  0012A6  2F01               	decfsz	(??_main+1)& (0+255),f,b
   631  0012A8  D7FA               	bra	u1997
   632  0012AA  D000               	nop2	
   633                           
   634                           ;main.c: 72: initPWM();
   635  0012AC  EC78  F00D         	call	_initPWM	;wreg free
   636                           
   637                           ;main.c: 73: initUART();
   638  0012B0  EC41  F00D         	call	_initUART	;wreg free
   639                           
   640                           ;main.c: 75: unsigned char pos;
   641                           ;main.c: 76: _addr = 0x20;
   642  0012B4  0E20               	movlw	32
   643  0012B6  6E51               	movwf	__addr,c
   644                           
   645                           ;main.c: 77: initQueue();
   646  0012B8  ECCC  F00C         	call	_initQueue	;wreg free
   647  0012BC                     l2915:
   648                           
   649                           ;main.c: 86: if(RC_FLAG == 1){
   650  0012BC  0456               	decf	_RC_FLAG,w,c
   651  0012BE  B4D8               	btfsc	status,2,c
   652  0012C0  D01A               	goto	l2923
   653  0012C2  D01F               	goto	l2927
   654  0012C4                     l2919:
   655                           
   656                           ;main.c: 88: lcdWriteChar(uart_buffer[uart_head]);
   657  0012C4  5055               	movf	_uart_head,w,c
   658  0012C6  0D01               	mullw	1
   659  0012C8  0E80               	movlw	low _uart_buffer
   660  0012CA  24F3               	addwf	prodl,w,c
   661  0012CC  6ED9               	movwf	fsr2l,c
   662  0012CE  0E00               	movlw	high _uart_buffer
   663  0012D0  20F4               	addwfc	prodh,w,c
   664  0012D2  6EDA               	movwf	fsr2h,c
   665  0012D4  50DF               	movf	indf2,w,c
   666  0012D6  ECE9  F00C         	call	_lcdWriteChar
   667                           
   668                           ;main.c: 89: uart_head = (1 + uart_head) % 100;
   669  0012DA  0E01               	movlw	1
   670  0012DC  2455               	addwf	_uart_head,w,c
   671  0012DE  6E26               	movwf	___awmod@dividend,c
   672  0012E0  6A27               	clrf	___awmod@dividend+1,c
   673  0012E2  0E00               	movlw	0
   674  0012E4  2227               	addwfc	___awmod@dividend+1,f,c
   675  0012E6  0E00               	movlw	0
   676  0012E8  6E29               	movwf	___awmod@divisor+1,c
   677  0012EA  0E64               	movlw	100
   678  0012EC  6E28               	movwf	___awmod@divisor,c
   679  0012EE  EC86  F00B         	call	___awmod	;wreg free
   680  0012F2  5026               	movf	?___awmod,w,c
   681  0012F4  6E55               	movwf	_uart_head,c
   682  0012F6                     l2923:
   683  0012F6  5054               	movf	_uart_tail,w,c
   684  0012F8  1855               	xorwf	_uart_head,w,c
   685  0012FA  A4D8               	btfss	status,2,c
   686  0012FC  D7E3               	goto	l2919
   687                           
   688                           ;main.c: 90: }
   689                           ;main.c: 91: RC_FLAG = 0;
   690  0012FE  0E00               	movlw	0
   691  001300  6E56               	movwf	_RC_FLAG,c
   692  001302                     l2927:
   693                           
   694                           ;main.c: 92: }
   695                           ;main.c: 93: pos = readZ();
   696  001302  EC8C  F00D         	call	_readZ	;wreg free
   697  001306  0101               	movlb	1	; () banked
   698  001308  6F04               	movwf	main@pos& (0+255),b
   699                           
   700                           ; BSR set to: 1
   701                           ;main.c: 94: lcdWriteString(" ");
   702  00130A  0E0E               	movlw	low STR_1
   703  00130C  6E28               	movwf	lcdWriteString@str,c
   704  00130E  0E10               	movlw	high STR_1
   705  001310  6E29               	movwf	lcdWriteString@str+1,c
   706  001312  EC49  F00C         	call	_lcdWriteString	;wreg free
   707                           
   708                           ;main.c: 95: lcdWriteInt(pos);
   709  001316  C104  F02F         	movff	main@pos,lcdWriteInt@num
   710  00131A  6A30               	clrf	lcdWriteInt@num+1,c
   711  00131C  EC31  F00D         	call	_lcdWriteInt	;wreg free
   712                           
   713                           ;main.c: 96: myQueuePush((int)pos);
   714  001320  C104  F02C         	movff	main@pos,myQueuePush@x
   715  001324  6A2D               	clrf	myQueuePush@x+1,c
   716  001326  ECAE  F00C         	call	_myQueuePush	;wreg free
   717                           
   718                           ;main.c: 99: if (myQueueCheck() == 1){
   719  00132A  EC46  F00B         	call	_myQueueCheck	;wreg free
   720  00132E  042C               	decf	?_myQueueCheck,w,c
   721  001330  102D               	iorwf	?_myQueueCheck+1,w,c
   722  001332  A4D8               	btfss	status,2,c
   723  001334  D016               	goto	l2943
   724                           
   725                           ;main.c: 100: lightSwitch();
   726  001336  EC51  F00D         	call	_lightSwitch	;wreg free
   727                           
   728                           ;main.c: 101: lcdWriteString("LIGHT_SWITCH");
   729  00133A  0E01               	movlw	low STR_2
   730  00133C  6E28               	movwf	lcdWriteString@str,c
   731  00133E  0E10               	movlw	high STR_2
   732  001340  6E29               	movwf	lcdWriteString@str+1,c
   733  001342  EC49  F00C         	call	_lcdWriteString	;wreg free
   734                           
   735                           ;main.c: 102: _delay((unsigned long)((500)*(4000000/4000.0)));
   736  001346  0E03               	movlw	3
   737  001348  0101               	movlb	1	; () banked
   738  00134A  6F01               	movwf	(??_main+1)& (0+255),b
   739  00134C  0E8A               	movlw	138
   740  00134E  0101               	movlb	1	; () banked
   741  001350  6F00               	movwf	??_main& (0+255),b
   742  001352  0E55               	movlw	85
   743  001354                     u2007:
   744  001354  2EE8               	decfsz	wreg,f,c
   745  001356  D7FE               	bra	u2007
   746  001358  2F00               	decfsz	??_main& (0+255),f,b
   747  00135A  D7FC               	bra	u2007
   748  00135C  2F01               	decfsz	(??_main+1)& (0+255),f,b
   749  00135E  D7FA               	bra	u2007
   750  001360  D000               	nop2	
   751  001362                     l2943:
   752                           
   753                           ;main.c: 103: }
   754                           ;main.c: 106: GestureType ges = readGesture();
   755  001362  EC06  F00D         	call	_readGesture	;wreg free
   756  001366  0101               	movlb	1	; () banked
   757  001368  6F02               	movwf	main@ges& (0+255),b
   758                           
   759                           ;main.c: 107: switch (ges){
   760  00136A  D006               	goto	l2951
   761  00136C                     l2945:
   762                           
   763                           ; BSR set to: 1
   764                           ;main.c: 110: moreLight();
   765  00136C  ECA9  F00D         	call	_moreLight	;wreg free
   766                           
   767                           ;main.c: 111: break;
   768  001370  D00C               	goto	l2953
   769  001372                     l2947:
   770                           
   771                           ;main.c: 114: lessLight();
   772  001372  ECAF  F00D         	call	_lessLight	;wreg free
   773                           
   774                           ;main.c: 123: }
   775                           
   776                           ;main.c: 122: break;
   777                           
   778                           ;main.c: 120: default:
   779                           
   780                           ;main.c: 119: break;
   781                           
   782                           ;main.c: 116: case UP_SWIPE:
   783                           
   784                           ;main.c: 115: break;
   785  001376  D009               	goto	l2953
   786  001378                     l2951:
   787  001378  0101               	movlb	1	; () banked
   788  00137A  5102               	movf	main@ges& (0+255),w,b
   789                           
   790                           ; Switch size 1, requested type "space"
   791                           ; Number of cases is 3, Range of values is 1 to 3
   792                           ; switch strategies available:
   793                           ; Name         Instructions Cycles
   794                           ; simple_byte           10     6 (average)
   795                           ;	Chosen strategy is simple_byte
   796  00137C  0A01               	xorlw	1	; case 1
   797  00137E  B4D8               	btfsc	status,2,c
   798  001380  D7F5               	goto	l2945
   799  001382  0A03               	xorlw	3	; case 2
   800  001384  B4D8               	btfsc	status,2,c
   801  001386  D7F5               	goto	l2947
   802  001388  0A01               	xorlw	1	; case 3
   803  00138A                     l2953:
   804                           
   805                           ;main.c: 126: if(RC_FLAG == 1){
   806  00138A  0456               	decf	_RC_FLAG,w,c
   807  00138C  A4D8               	btfss	status,2,c
   808  00138E  D039               	goto	l2977
   809                           
   810                           ;main.c: 127: _delay((unsigned long)((2)*(4000000/4000.0)));
   811  001390  0E03               	movlw	3
   812  001392  0101               	movlb	1	; () banked
   813  001394  6F00               	movwf	??_main& (0+255),b
   814  001396  0E97               	movlw	151
   815  001398                     u2017:
   816  001398  2EE8               	decfsz	wreg,f,c
   817  00139A  D7FE               	bra	u2017
   818  00139C  2F00               	decfsz	??_main& (0+255),f,b
   819  00139E  D7FC               	bra	u2017
   820  0013A0  D000               	nop2	
   821                           
   822                           ;main.c: 128: unsigned char command = getCommand();
   823  0013A2  EC09  F008         	call	_getCommand	;wreg free
   824  0013A6  0101               	movlb	1	; () banked
   825  0013A8  6F03               	movwf	main@command& (0+255),b
   826                           
   827                           ;main.c: 129: switch (command){
   828  0013AA  D012               	goto	l2973
   829  0013AC                     l2959:
   830                           
   831                           ; BSR set to: 1
   832                           ;main.c: 133: openDoor();
   833  0013AC  ECC9  F00D         	call	_openDoor	;wreg free
   834                           
   835                           ;main.c: 134: break;
   836  0013B0  D026               	goto	l2975
   837  0013B2                     l2961:
   838                           
   839                           ;main.c: 136: closeDoor();
   840  0013B2  ECD9  F00D         	call	_closeDoor	;wreg free
   841                           
   842                           ;main.c: 137: break;
   843  0013B6  D023               	goto	l2975
   844  0013B8                     l2963:
   845                           
   846                           ;main.c: 139: moreLight();
   847  0013B8  ECA9  F00D         	call	_moreLight	;wreg free
   848                           
   849                           ;main.c: 140: break;
   850  0013BC  D020               	goto	l2975
   851  0013BE                     l2965:
   852                           
   853                           ;main.c: 142: lessLight();
   854  0013BE  ECAF  F00D         	call	_lessLight	;wreg free
   855                           
   856                           ;main.c: 143: break;
   857  0013C2  D01D               	goto	l2975
   858  0013C4                     l2967:
   859                           
   860                           ;main.c: 145: openAirCondition();
   861  0013C4  ECDD  F00D         	call	_openAirCondition	;wreg free
   862                           
   863                           ;main.c: 146: break;
   864  0013C8  D01A               	goto	l2975
   865  0013CA                     l2969:
   866                           
   867                           ;main.c: 148: closeAirCondition();
   868  0013CA  ECDF  F00D         	call	_closeAirCondition	;wreg free
   869                           
   870                           ;main.c: 150: }
   871                           
   872                           ;main.c: 149: break;
   873  0013CE  D017               	goto	l2975
   874  0013D0                     l2973:
   875  0013D0  0101               	movlb	1	; () banked
   876  0013D2  5103               	movf	main@command& (0+255),w,b
   877                           
   878                           ; Switch size 1, requested type "space"
   879                           ; Number of cases is 7, Range of values is 0 to 6
   880                           ; switch strategies available:
   881                           ; Name         Instructions Cycles
   882                           ; simple_byte           22    12 (average)
   883                           ;	Chosen strategy is simple_byte
   884  0013D4  0A00               	xorlw	0	; case 0
   885  0013D6  B4D8               	btfsc	status,2,c
   886  0013D8  D012               	goto	l2975
   887  0013DA  0A01               	xorlw	1	; case 1
   888  0013DC  B4D8               	btfsc	status,2,c
   889  0013DE  D7E6               	goto	l2959
   890  0013E0  0A03               	xorlw	3	; case 2
   891  0013E2  B4D8               	btfsc	status,2,c
   892  0013E4  D7E6               	goto	l2961
   893  0013E6  0A01               	xorlw	1	; case 3
   894  0013E8  B4D8               	btfsc	status,2,c
   895  0013EA  D7E6               	goto	l2963
   896  0013EC  0A07               	xorlw	7	; case 4
   897  0013EE  B4D8               	btfsc	status,2,c
   898  0013F0  D7E6               	goto	l2965
   899  0013F2  0A01               	xorlw	1	; case 5
   900  0013F4  B4D8               	btfsc	status,2,c
   901  0013F6  D7E6               	goto	l2967
   902  0013F8  0A03               	xorlw	3	; case 6
   903  0013FA  B4D8               	btfsc	status,2,c
   904  0013FC  D7E6               	goto	l2969
   905  0013FE                     l2975:
   906                           
   907                           ;main.c: 151: RC_FLAG = 0;
   908  0013FE  0E00               	movlw	0
   909  001400  6E56               	movwf	_RC_FLAG,c
   910  001402                     l2977:
   911                           
   912                           ;main.c: 152: }
   913                           ;main.c: 153: _delay((unsigned long)((10)*(4000000/4000.0)));
   914  001402  0E0D               	movlw	13
   915  001404  0101               	movlb	1	; () banked
   916  001406  6F00               	movwf	??_main& (0+255),b
   917  001408  0EFB               	movlw	251
   918  00140A                     u2027:
   919  00140A  2EE8               	decfsz	wreg,f,c
   920  00140C  D7FE               	bra	u2027
   921  00140E  2F00               	decfsz	??_main& (0+255),f,b
   922  001410  D7FC               	bra	u2027
   923  001412  D000               	nop2	
   924  001414  D753               	goto	l2915
   925  001416                     __end_of_main:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           prodh	equ	0xFF4
   932                           prodl	equ	0xFF3
   933                           intcon	equ	0xFF2
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           indf2	equ	0xFDF
   937                           fsr2h	equ	0xFDA
   938                           fsr2l	equ	0xFD9
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _readZ *****************
   942 ;; Defined at:
   943 ;;		line 117 in file "I2C.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  z_pos           1   43[COMRAM] unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      unsigned char 
   950 ;; Registers used:
   951 ;;		wreg, status,2, status,0, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:        1 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    6
   964 ;; This function calls:
   965 ;;		_readDataByte
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text1
   972  001B18                     __ptext1:
   973                           	opt stack 0
   974  001B18                     _readZ:
   975                           	opt stack 24
   976                           
   977                           ;I2C.c: 118: unsigned char z_pos;
   978                           ;I2C.c: 119: z_pos = readDataByte(_addr, 0x0A);
   979                           
   980                           ;incstack = 0
   981  001B18  0E0A               	movlw	10
   982  001B1A  6E29               	movwf	readDataByte@reg,c
   983  001B1C  5051               	movf	__addr,w,c
   984  001B1E  EC20  F00D         	call	_readDataByte
   985  001B22  6E2C               	movwf	readZ@z_pos,c
   986                           
   987                           ;I2C.c: 120: return z_pos;
   988  001B24  502C               	movf	readZ@z_pos,w,c
   989  001B26  0012               	return	
   990  001B28                     __end_of_readZ:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           prodh	equ	0xFF4
   997                           prodl	equ	0xFF3
   998                           intcon	equ	0xFF2
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           indf2	equ	0xFDF
  1002                           fsr2h	equ	0xFDA
  1003                           fsr2l	equ	0xFD9
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function _readGesture *****************
  1007 ;; Defined at:
  1008 ;;		line 154 in file "I2C.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  gesture         1   43[COMRAM] unsigned char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      enum E2865
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;Total ram usage:        1 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    6
  1029 ;; This function calls:
  1030 ;;		_readDataByte
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text2
  1037  001A0C                     __ptext2:
  1038                           	opt stack 0
  1039  001A0C                     _readGesture:
  1040                           	opt stack 24
  1041                           
  1042                           ;I2C.c: 155: unsigned char gesture;
  1043                           ;I2C.c: 156: gesture = readDataByte(_addr, 0x04);
  1044                           
  1045                           ;incstack = 0
  1046  001A0C  0E04               	movlw	4
  1047  001A0E  6E29               	movwf	readDataByte@reg,c
  1048  001A10  5051               	movf	__addr,w,c
  1049  001A12  EC20  F00D         	call	_readDataByte
  1050  001A16  6E2C               	movwf	readGesture@gesture,c
  1051                           
  1052                           ;I2C.c: 162: switch (gesture){
  1053  001A18  D008               	goto	l2801
  1054  001A1A                     l2783:
  1055                           
  1056                           ;I2C.c: 164: return RIGHT_SWIPE;
  1057  001A1A  0E01               	movlw	1
  1058  001A1C  0012               	return	
  1059  001A1E                     l2787:
  1060                           
  1061                           ;I2C.c: 166: return LEFT_SWIPE;
  1062  001A1E  0E02               	movlw	2
  1063  001A20  0012               	return	
  1064  001A22                     l2791:
  1065                           
  1066                           ;I2C.c: 168: return UP_SWIPE;
  1067  001A22  0E03               	movlw	3
  1068  001A24  0012               	return	
  1069  001A26                     l2795:
  1070                           
  1071                           ;I2C.c: 170: return NO_GESTURE;
  1072  001A26  0EFF               	movlw	255
  1073                           
  1074                           ;I2C.c: 171: }
  1075  001A28  0012               	return	
  1076  001A2A                     l2801:
  1077  001A2A  502C               	movf	readGesture@gesture,w,c
  1078                           
  1079                           ; Switch size 1, requested type "space"
  1080                           ; Number of cases is 3, Range of values is 1 to 3
  1081                           ; switch strategies available:
  1082                           ; Name         Instructions Cycles
  1083                           ; simple_byte           10     6 (average)
  1084                           ;	Chosen strategy is simple_byte
  1085  001A2C  0A01               	xorlw	1	; case 1
  1086  001A2E  B4D8               	btfsc	status,2,c
  1087  001A30  D7F4               	goto	l2783
  1088  001A32  0A03               	xorlw	3	; case 2
  1089  001A34  B4D8               	btfsc	status,2,c
  1090  001A36  D7F3               	goto	l2787
  1091  001A38  0A01               	xorlw	1	; case 3
  1092  001A3A  B4D8               	btfsc	status,2,c
  1093  001A3C  D7F2               	goto	l2791
  1094  001A3E  D7F3               	goto	l2795
  1095  001A40                     __end_of_readGesture:
  1096                           	opt stack 0
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           prodh	equ	0xFF4
  1102                           prodl	equ	0xFF3
  1103                           intcon	equ	0xFF2
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           indf2	equ	0xFDF
  1107                           fsr2h	equ	0xFDA
  1108                           fsr2l	equ	0xFD9
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _readDataByte *****************
  1112 ;; Defined at:
  1113 ;;		line 92 in file "I2C.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  addr            1    wreg     unsigned char 
  1116 ;;  reg             1   40[COMRAM] unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  addr            1   42[COMRAM] unsigned char 
  1119 ;;  retc            1   41[COMRAM] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      unsigned char 
  1122 ;; Registers used:
  1123 ;;		wreg, status,2, status,0, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1129 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;Total ram usage:        3 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    5
  1136 ;; This function calls:
  1137 ;;		_I2CRestart
  1138 ;;		_receiveByte
  1139 ;;		_sendByte
  1140 ;;		_writeDataByte
  1141 ;; This function is called by:
  1142 ;;		_readZ
  1143 ;;		_readGesture
  1144 ;;		_readX
  1145 ;;		_positionAvailable
  1146 ;;		_gestureAvailable
  1147 ;;		_readGestureSpeed
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text3
  1152  001A40                     __ptext3:
  1153                           	opt stack 0
  1154  001A40                     _readDataByte:
  1155                           	opt stack 24
  1156                           
  1157                           ;incstack = 0
  1158                           ;readDataByte@addr stored from wreg
  1159  001A40  6E2B               	movwf	readDataByte@addr,c
  1160                           
  1161                           ;I2C.c: 93: writeDataByte(addr, reg);
  1162  001A42  C029  F027         	movff	readDataByte@reg,writeDataByte@reg
  1163  001A46  502B               	movf	readDataByte@addr,w,c
  1164  001A48  EC60  F00D         	call	_writeDataByte
  1165                           
  1166                           ;I2C.c: 94: I2CRestart();
  1167  001A4C  ECC5  F00D         	call	_I2CRestart	;wreg free
  1168                           
  1169                           ;I2C.c: 95: sendByte(addr | 0x01);
  1170  001A50  502B               	movf	readDataByte@addr,w,c
  1171  001A52  0901               	iorlw	1
  1172  001A54  EC9C  F00D         	call	_sendByte
  1173                           
  1174                           ;I2C.c: 96: unsigned char retc = receiveByte();
  1175  001A58  EC94  F00D         	call	_receiveByte	;wreg free
  1176  001A5C  6E2A               	movwf	readDataByte@retc,c
  1177                           
  1178                           ;I2C.c: 97: return retc;
  1179  001A5E  502A               	movf	readDataByte@retc,w,c
  1180  001A60  0012               	return	
  1181  001A62                     __end_of_readDataByte:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           prodh	equ	0xFF4
  1188                           prodl	equ	0xFF3
  1189                           intcon	equ	0xFF2
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           indf2	equ	0xFDF
  1193                           fsr2h	equ	0xFDA
  1194                           fsr2l	equ	0xFD9
  1195                           status	equ	0xFD8
  1196                           
  1197 ;; *************** function _writeDataByte *****************
  1198 ;; Defined at:
  1199 ;;		line 85 in file "I2C.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  addr            1    wreg     unsigned char 
  1202 ;;  reg             1   38[COMRAM] unsigned char 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  addr            1   39[COMRAM] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1214 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;Total ram usage:        2 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    4
  1221 ;; This function calls:
  1222 ;;		_I2CInit
  1223 ;;		_I2CStart
  1224 ;;		_sendByte
  1225 ;; This function is called by:
  1226 ;;		_readDataByte
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text4
  1231  001AC0                     __ptext4:
  1232                           	opt stack 0
  1233  001AC0                     _writeDataByte:
  1234                           	opt stack 24
  1235                           
  1236                           ;incstack = 0
  1237                           ;writeDataByte@addr stored from wreg
  1238  001AC0  6E28               	movwf	writeDataByte@addr,c
  1239                           
  1240                           ;I2C.c: 86: I2CInit();
  1241  001AC2  ECA3  F00D         	call	_I2CInit	;wreg free
  1242                           
  1243                           ;I2C.c: 87: I2CStart();
  1244  001AC6  ECC1  F00D         	call	_I2CStart	;wreg free
  1245                           
  1246                           ;I2C.c: 88: sendByte(addr);
  1247  001ACA  5028               	movf	writeDataByte@addr,w,c
  1248  001ACC  EC9C  F00D         	call	_sendByte
  1249                           
  1250                           ;I2C.c: 89: sendByte(reg);
  1251  001AD0  5027               	movf	writeDataByte@reg,w,c
  1252  001AD2  EC9C  F00D         	call	_sendByte
  1253  001AD6  0012               	return		;funcret
  1254  001AD8                     __end_of_writeDataByte:
  1255                           	opt stack 0
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           prodh	equ	0xFF4
  1261                           prodl	equ	0xFF3
  1262                           intcon	equ	0xFF2
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           indf2	equ	0xFDF
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function _sendByte *****************
  1271 ;; Defined at:
  1272 ;;		line 69 in file "I2C.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  c               1    wreg     unsigned char 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  c               1   37[COMRAM] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;Total ram usage:        1 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    3
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_writeDataByte
  1297 ;;		_readDataByte
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text5
  1302  001B38                     __ptext5:
  1303                           	opt stack 0
  1304  001B38                     _sendByte:
  1305                           	opt stack 24
  1306                           
  1307                           ;incstack = 0
  1308                           ;sendByte@c stored from wreg
  1309  001B38  6E26               	movwf	sendByte@c,c
  1310                           
  1311                           ;I2C.c: 70: PIR1bits.SSPIF = 0;
  1312  001B3A  969E               	bcf	3998,3,c	;volatile
  1313                           
  1314                           ;I2C.c: 71: SSPBUF = c;
  1315  001B3C  C026  FFC9         	movff	sendByte@c,4041	;volatile
  1316  001B40                     l288:
  1317  001B40  B69E               	btfsc	3998,3,c	;volatile
  1318  001B42  0012               	return	
  1319  001B44  D7FD               	goto	l288
  1320  001B46                     __end_of_sendByte:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           intcon	equ	0xFF2
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           indf2	equ	0xFDF
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _I2CStart *****************
  1337 ;; Defined at:
  1338 ;;		line 58 in file "I2C.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		None
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    3
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_writeDataByte
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text6
  1367  001B82                     __ptext6:
  1368                           	opt stack 0
  1369  001B82                     _I2CStart:
  1370                           	opt stack 24
  1371                           
  1372                           ;I2C.c: 60: SSPCON2bits.SEN = 1;;
  1373                           
  1374                           ;incstack = 0
  1375  001B82  80C5               	bsf	4037,0,c	;volatile
  1376  001B84                     l276:
  1377  001B84  A0C5               	btfss	4037,0,c	;volatile
  1378  001B86  0012               	return	
  1379  001B88  D7FD               	goto	l276
  1380  001B8A                     __end_of_I2CStart:
  1381                           	opt stack 0
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           prodh	equ	0xFF4
  1387                           prodl	equ	0xFF3
  1388                           intcon	equ	0xFF2
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           indf2	equ	0xFDF
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _I2CInit *****************
  1397 ;; Defined at:
  1398 ;;		line 19 in file "I2C.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		None
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;Total ram usage:        0 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    3
  1419 ;; This function calls:
  1420 ;;		Nothing
  1421 ;; This function is called by:
  1422 ;;		_writeDataByte
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text7
  1427  001B46                     __ptext7:
  1428                           	opt stack 0
  1429  001B46                     _I2CInit:
  1430                           	opt stack 24
  1431                           
  1432                           ;I2C.c: 20: SSPCON1bits.SSPM0 = 0;
  1433                           
  1434                           ;incstack = 0
  1435  001B46  90C6               	bcf	4038,0,c	;volatile
  1436                           
  1437                           ;I2C.c: 21: SSPCON1bits.SSPM1 = 0;
  1438  001B48  92C6               	bcf	4038,1,c	;volatile
  1439                           
  1440                           ;I2C.c: 22: SSPCON1bits.SSPM2 = 0;
  1441  001B4A  94C6               	bcf	4038,2,c	;volatile
  1442                           
  1443                           ;I2C.c: 23: SSPCON1bits.SSPM3 = 1;
  1444  001B4C  86C6               	bsf	4038,3,c	;volatile
  1445                           
  1446                           ;I2C.c: 25: SSPCON1bits.SSPEN = 1;
  1447  001B4E  8AC6               	bsf	4038,5,c	;volatile
  1448  001B50  0012               	return		;funcret
  1449  001B52                     __end_of_I2CInit:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           prodh	equ	0xFF4
  1456                           prodl	equ	0xFF3
  1457                           intcon	equ	0xFF2
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           indf2	equ	0xFDF
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _receiveByte *****************
  1466 ;; Defined at:
  1467 ;;		line 75 in file "I2C.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;		None
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  retc            1   37[COMRAM] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      unsigned char 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;Total ram usage:        1 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    3
  1488 ;; This function calls:
  1489 ;;		Nothing
  1490 ;; This function is called by:
  1491 ;;		_readDataByte
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text8
  1496  001B28                     __ptext8:
  1497                           	opt stack 0
  1498  001B28                     _receiveByte:
  1499                           	opt stack 25
  1500                           
  1501                           ;I2C.c: 76: SSPCON2bits.RCEN = 1;
  1502                           
  1503                           ;incstack = 0
  1504  001B28  86C5               	bsf	4037,3,c	;volatile
  1505                           
  1506                           ;I2C.c: 77: PIR1bits.SSPIF = 0;
  1507  001B2A  969E               	bcf	3998,3,c	;volatile
  1508  001B2C                     l294:
  1509  001B2C  A69E               	btfss	3998,3,c	;volatile
  1510  001B2E  D7FE               	goto	l294
  1511                           
  1512                           ;I2C.c: 79: unsigned char retc = SSPBUF;
  1513  001B30  CFC9 F026          	movff	4041,receiveByte@retc	;volatile
  1514                           
  1515                           ;I2C.c: 80: return retc;
  1516  001B34  5026               	movf	receiveByte@retc,w,c
  1517  001B36  0012               	return	
  1518  001B38                     __end_of_receiveByte:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           intcon	equ	0xFF2
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           indf2	equ	0xFDF
  1530                           fsr2h	equ	0xFDA
  1531                           fsr2l	equ	0xFD9
  1532                           status	equ	0xFD8
  1533                           
  1534 ;; *************** function _I2CRestart *****************
  1535 ;; Defined at:
  1536 ;;		line 64 in file "I2C.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		None
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    3
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_readDataByte
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text9
  1565  001B8A                     __ptext9:
  1566                           	opt stack 0
  1567  001B8A                     _I2CRestart:
  1568                           	opt stack 25
  1569                           
  1570                           ;I2C.c: 65: SSPCON2bits.RSEN = 1;;
  1571                           
  1572                           ;incstack = 0
  1573  001B8A  82C5               	bsf	4037,1,c	;volatile
  1574  001B8C                     l282:
  1575  001B8C  A2C5               	btfss	4037,1,c	;volatile
  1576  001B8E  0012               	return	
  1577  001B90  D7FD               	goto	l282
  1578  001B92                     __end_of_I2CRestart:
  1579                           	opt stack 0
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           prodh	equ	0xFF4
  1585                           prodl	equ	0xFF3
  1586                           intcon	equ	0xFF2
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           indf2	equ	0xFDF
  1590                           fsr2h	equ	0xFDA
  1591                           fsr2l	equ	0xFD9
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _openDoor *****************
  1595 ;; Defined at:
  1596 ;;		line 47 in file "servo.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;Total ram usage:        0 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    4
  1617 ;; This function calls:
  1618 ;;		_startTurning
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text10
  1625  001B92                     __ptext10:
  1626                           	opt stack 0
  1627  001B92                     _openDoor:
  1628                           	opt stack 26
  1629                           
  1630                           ;servo.c: 48: startTurning(3);
  1631                           
  1632                           ;incstack = 0
  1633  001B92  0E03               	movlw	3
  1634  001B94  EC83  F00D         	call	_startTurning
  1635  001B98  0012               	return		;funcret
  1636  001B9A                     __end_of_openDoor:
  1637                           	opt stack 0
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           prodh	equ	0xFF4
  1643                           prodl	equ	0xFF3
  1644                           intcon	equ	0xFF2
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           indf2	equ	0xFDF
  1648                           fsr2h	equ	0xFDA
  1649                           fsr2l	equ	0xFD9
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _openAirCondition *****************
  1653 ;; Defined at:
  1654 ;;		line 64 in file "eusart.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		None
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;Total ram usage:        0 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    3
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text11
  1683  001BBA                     __ptext11:
  1684                           	opt stack 0
  1685  001BBA                     _openAirCondition:
  1686                           	opt stack 27
  1687                           
  1688                           ;eusart.c: 65: PORTBbits.RB7 = 1;
  1689                           
  1690                           ;incstack = 0
  1691  001BBA  8E81               	bsf	3969,7,c	;volatile
  1692  001BBC  0012               	return		;funcret
  1693  001BBE                     __end_of_openAirCondition:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           prodh	equ	0xFF4
  1700                           prodl	equ	0xFF3
  1701                           intcon	equ	0xFF2
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           indf2	equ	0xFDF
  1705                           fsr2h	equ	0xFDA
  1706                           fsr2l	equ	0xFD9
  1707                           status	equ	0xFD8
  1708                           
  1709 ;; *************** function _myQueuePush *****************
  1710 ;; Defined at:
  1711 ;;		line 8 in file "lpque.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  x               2   43[COMRAM] int 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        2 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    4
  1732 ;; This function calls:
  1733 ;;		___awmod
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text12
  1740  00195C                     __ptext12:
  1741                           	opt stack 0
  1742  00195C                     _myQueuePush:
  1743                           	opt stack 26
  1744                           
  1745                           ;lpque.c: 9: iter = (iter + 1) % 10;
  1746                           
  1747                           ;incstack = 0
  1748  00195C  0E01               	movlw	1
  1749  00195E  2447               	addwf	_iter,w,c
  1750  001960  6E26               	movwf	___awmod@dividend,c
  1751  001962  0E00               	movlw	0
  1752  001964  2048               	addwfc	_iter+1,w,c
  1753  001966  6E27               	movwf	___awmod@dividend+1,c
  1754  001968  0E00               	movlw	0
  1755  00196A  6E29               	movwf	___awmod@divisor+1,c
  1756  00196C  0E0A               	movlw	10
  1757  00196E  6E28               	movwf	___awmod@divisor,c
  1758  001970  EC86  F00B         	call	___awmod	;wreg free
  1759  001974  C026  F047         	movff	?___awmod,_iter
  1760  001978  C027  F048         	movff	?___awmod+1,_iter+1
  1761                           
  1762                           ;lpque.c: 10: my_stack[iter] = x;
  1763  00197C  90D8               	bcf	status,0,c
  1764  00197E  3447               	rlcf	_iter,w,c
  1765  001980  6ED9               	movwf	fsr2l,c
  1766  001982  3448               	rlcf	_iter+1,w,c
  1767  001984  6EDA               	movwf	fsr2h,c
  1768  001986  0E31               	movlw	low _my_stack
  1769  001988  26D9               	addwf	fsr2l,f,c
  1770  00198A  0E00               	movlw	high _my_stack
  1771  00198C  22DA               	addwfc	fsr2h,f,c
  1772  00198E  C02C  FFDE         	movff	myQueuePush@x,postinc2
  1773  001992  C02D  FFDD         	movff	myQueuePush@x+1,postdec2
  1774  001996  0012               	return		;funcret
  1775  001998                     __end_of_myQueuePush:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           prodh	equ	0xFF4
  1782                           prodl	equ	0xFF3
  1783                           intcon	equ	0xFF2
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           indf2	equ	0xFDF
  1787                           postinc2	equ	0xFDE
  1788                           postdec2	equ	0xFDD
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _myQueueCheck *****************
  1794 ;; Defined at:
  1795 ;;		line 12 in file "lpque.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;  i               2    0[BANK0 ] int 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2   43[COMRAM] int 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;Total ram usage:        6 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    4
  1816 ;; This function calls:
  1817 ;;		___awmod
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text13
  1824  00168C                     __ptext13:
  1825                           	opt stack 0
  1826  00168C                     _myQueueCheck:
  1827                           	opt stack 26
  1828                           
  1829                           ;lpque.c: 13: for (int i = 10; i > 7; i--){
  1830                           
  1831                           ;incstack = 0
  1832  00168C  0E00               	movlw	0
  1833  00168E  0100               	movlb	0	; () banked
  1834  001690  6FEA               	movwf	(myQueueCheck@i+1)& (0+255),b
  1835  001692  0E0A               	movlw	10
  1836  001694  6FE9               	movwf	myQueueCheck@i& (0+255),b
  1837  001696                     l2751:
  1838                           
  1839                           ; BSR set to: 0
  1840  001696  0100               	movlb	0	; () banked
  1841  001698  BFEA               	btfsc	(myQueueCheck@i+1)& (0+255),7,b
  1842  00169A  D033               	goto	l2765
  1843  00169C  0100               	movlb	0	; () banked
  1844  00169E  51EA               	movf	(myQueueCheck@i+1)& (0+255),w,b
  1845  0016A0  E105               	bnz	l2755
  1846  0016A2  0E08               	movlw	8
  1847  0016A4  0100               	movlb	0	; () banked
  1848  0016A6  5DE9               	subwf	myQueueCheck@i& (0+255),w,b
  1849  0016A8  A0D8               	btfss	status,0,c
  1850  0016AA  D02B               	goto	l2765
  1851  0016AC                     l2755:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;lpque.c: 16: if (my_stack[(iter + i) % 10] > 20)
  1855  0016AC  0100               	movlb	0	; () banked
  1856  0016AE  51E9               	movf	myQueueCheck@i& (0+255),w,b
  1857  0016B0  2447               	addwf	_iter,w,c
  1858  0016B2  6E26               	movwf	___awmod@dividend,c
  1859  0016B4  0100               	movlb	0	; () banked
  1860  0016B6  51EA               	movf	(myQueueCheck@i+1)& (0+255),w,b
  1861  0016B8  2048               	addwfc	_iter+1,w,c
  1862  0016BA  6E27               	movwf	___awmod@dividend+1,c
  1863  0016BC  0E00               	movlw	0
  1864  0016BE  6E29               	movwf	___awmod@divisor+1,c
  1865  0016C0  0E0A               	movlw	10
  1866  0016C2  6E28               	movwf	___awmod@divisor,c
  1867  0016C4  EC86  F00B         	call	___awmod	;wreg free
  1868  0016C8  90D8               	bcf	status,0,c
  1869  0016CA  3626               	rlcf	?___awmod,f,c
  1870  0016CC  3627               	rlcf	?___awmod+1,f,c
  1871  0016CE  0E31               	movlw	low _my_stack
  1872  0016D0  2426               	addwf	?___awmod,w,c
  1873  0016D2  6ED9               	movwf	fsr2l,c
  1874  0016D4  0E00               	movlw	high _my_stack
  1875  0016D6  2027               	addwfc	?___awmod+1,w,c
  1876  0016D8  6EDA               	movwf	fsr2h,c
  1877  0016DA  0E01               	movlw	1
  1878  0016DC  BEDB               	btfsc	plusw2,7,c
  1879  0016DE  D00C               	goto	l2761
  1880  0016E0  0E01               	movlw	1
  1881  0016E2  50DB               	movf	plusw2,w,c
  1882  0016E4  E104               	bnz	u1710
  1883  0016E6  0E15               	movlw	21
  1884  0016E8  5CDE               	subwf	postinc2,w,c
  1885  0016EA  A0D8               	btfss	status,0,c
  1886  0016EC  D005               	goto	l2761
  1887  0016EE                     u1710:
  1888                           
  1889                           ;lpque.c: 17: return 0;
  1890  0016EE  0E00               	movlw	0
  1891  0016F0  6E2D               	movwf	?_myQueueCheck+1,c
  1892  0016F2  0E00               	movlw	0
  1893  0016F4  6E2C               	movwf	?_myQueueCheck,c
  1894  0016F6  0012               	return	
  1895  0016F8                     l2761:
  1896  0016F8  0100               	movlb	0	; () banked
  1897  0016FA  07E9               	decf	myQueueCheck@i& (0+255),f,b
  1898  0016FC  A0D8               	btfss	status,0,c
  1899  0016FE  07EA               	decf	(myQueueCheck@i+1)& (0+255),f,b
  1900  001700  D7CA               	goto	l2751
  1901  001702                     l2765:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;lpque.c: 18: }
  1905                           ;lpque.c: 19: return 1;
  1906  001702  0E00               	movlw	0
  1907  001704  6E2D               	movwf	?_myQueueCheck+1,c
  1908  001706  0E01               	movlw	1
  1909  001708  6E2C               	movwf	?_myQueueCheck,c
  1910  00170A  0012               	return	
  1911  00170C                     __end_of_myQueueCheck:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _moreLight *****************
  1931 ;; Defined at:
  1932 ;;		line 61 in file "pwm.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    5
  1953 ;; This function calls:
  1954 ;;		_dutyCycleDown
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text14
  1961  001B52                     __ptext14:
  1962                           	opt stack 0
  1963  001B52                     _moreLight:
  1964                           	opt stack 25
  1965                           
  1966                           ;pwm.c: 62: if (lightStatus == 1){
  1967                           
  1968                           ;incstack = 0
  1969  001B52  0458               	decf	_lightStatus,w,c
  1970  001B54  A4D8               	btfss	status,2,c
  1971  001B56  0012               	return	
  1972                           
  1973                           ;pwm.c: 63: dutyCycleDown();
  1974  001B58  ECF6  F00B         	call	_dutyCycleDown	;wreg free
  1975  001B5C  0012               	return	
  1976  001B5E                     __end_of_moreLight:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           prodh	equ	0xFF4
  1983                           prodl	equ	0xFF3
  1984                           intcon	equ	0xFF2
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           indf2	equ	0xFDF
  1988                           postinc2	equ	0xFDE
  1989                           postdec2	equ	0xFDD
  1990                           plusw2	equ	0xFDB
  1991                           fsr2h	equ	0xFDA
  1992                           fsr2l	equ	0xFD9
  1993                           status	equ	0xFD8
  1994                           
  1995 ;; *************** function _dutyCycleDown *****************
  1996 ;; Defined at:
  1997 ;;		line 44 in file "pwm.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        6 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    4
  2018 ;; This function calls:
  2019 ;;		_setDutyCycle
  2020 ;; This function is called by:
  2021 ;;		_moreLight
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text15
  2026  0017EC                     __ptext15:
  2027                           	opt stack 0
  2028  0017EC                     _dutyCycleDown:
  2029                           	opt stack 25
  2030                           
  2031                           ;pwm.c: 45: if(rate > 20)
  2032                           
  2033                           ;incstack = 0
  2034  0017EC  0E14               	movlw	20
  2035  0017EE  6459               	cpfsgt	_rate,c
  2036  0017F0  D021               	goto	l2611
  2037                           
  2038                           ;pwm.c: 46: rate = (rate - 20>20?rate - 20:20);
  2039  0017F2  0EEC               	movlw	236
  2040  0017F4  6E27               	movwf	??_dutyCycleDown& (0+255),c
  2041  0017F6  0EFF               	movlw	255
  2042  0017F8  6E28               	movwf	(??_dutyCycleDown+1)& (0+255),c
  2043  0017FA  5059               	movf	_rate,w,c
  2044  0017FC  6E29               	movwf	(??_dutyCycleDown+2)& (0+255),c
  2045  0017FE  6A2A               	clrf	(??_dutyCycleDown+3)& (0+255),c
  2046  001800  5027               	movf	??_dutyCycleDown,w,c
  2047  001802  2629               	addwf	??_dutyCycleDown+2,f,c
  2048  001804  5028               	movf	??_dutyCycleDown+1,w,c
  2049  001806  222A               	addwfc	??_dutyCycleDown+3,f,c
  2050  001808  BE2A               	btfsc	??_dutyCycleDown+3,7,c
  2051  00180A  D006               	goto	l2605
  2052  00180C  502A               	movf	??_dutyCycleDown+3,w,c
  2053  00180E  E109               	bnz	l2607
  2054  001810  0E15               	movlw	21
  2055  001812  5C29               	subwf	??_dutyCycleDown+2,w,c
  2056  001814  B0D8               	btfsc	status,0,c
  2057  001816  D005               	goto	l2607
  2058  001818                     l2605:
  2059  001818  0E00               	movlw	0
  2060  00181A  6E2C               	movwf	_dutyCycleDown$670+1,c
  2061  00181C  0E14               	movlw	20
  2062  00181E  6E2B               	movwf	_dutyCycleDown$670,c
  2063  001820  D006               	goto	l2609
  2064  001822                     l2607:
  2065  001822  0EEC               	movlw	236
  2066  001824  2459               	addwf	_rate,w,c
  2067  001826  6E2B               	movwf	_dutyCycleDown$670,c
  2068  001828  6A2C               	clrf	_dutyCycleDown$670+1,c
  2069  00182A  0EFF               	movlw	255
  2070  00182C  222C               	addwfc	_dutyCycleDown$670+1,f,c
  2071  00182E                     l2609:
  2072  00182E  C02B  F059         	movff	_dutyCycleDown$670,_rate
  2073  001832  D002               	goto	l2613
  2074  001834                     l2611:
  2075                           
  2076                           ;pwm.c: 47: else
  2077                           ;pwm.c: 48: rate = 20;
  2078  001834  0E14               	movlw	20
  2079  001836  6E59               	movwf	_rate,c
  2080  001838                     l2613:
  2081                           
  2082                           ;pwm.c: 49: setDutyCycle(rate);
  2083  001838  5059               	movf	_rate,w,c
  2084  00183A  ECB5  F00D         	call	_setDutyCycle
  2085  00183E  0012               	return		;funcret
  2086  001840                     __end_of_dutyCycleDown:
  2087                           	opt stack 0
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           prodh	equ	0xFF4
  2093                           prodl	equ	0xFF3
  2094                           intcon	equ	0xFF2
  2095                           postinc0	equ	0xFEE
  2096                           wreg	equ	0xFE8
  2097                           indf2	equ	0xFDF
  2098                           postinc2	equ	0xFDE
  2099                           postdec2	equ	0xFDD
  2100                           plusw2	equ	0xFDB
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _lightSwitch *****************
  2106 ;; Defined at:
  2107 ;;		line 73 in file "pwm.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;Total ram usage:        0 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    5
  2128 ;; This function calls:
  2129 ;;		_dutyCycleClear
  2130 ;;		_dutyCycleSet
  2131 ;;		_initQueue
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text16
  2138  001AA2                     __ptext16:
  2139                           	opt stack 0
  2140  001AA2                     _lightSwitch:
  2141                           	opt stack 25
  2142                           
  2143                           ;pwm.c: 74: if (lightStatus == 0){
  2144                           
  2145                           ;incstack = 0
  2146  001AA2  5058               	movf	_lightStatus,w,c
  2147  001AA4  A4D8               	btfss	status,2,c
  2148  001AA6  D005               	goto	l2775
  2149                           
  2150                           ;pwm.c: 75: lightStatus = 1;
  2151  001AA8  0E01               	movlw	1
  2152  001AAA  6E58               	movwf	_lightStatus,c
  2153                           
  2154                           ;pwm.c: 76: dutyCycleSet();
  2155  001AAC  ECCD  F00D         	call	_dutyCycleSet	;wreg free
  2156                           
  2157                           ;pwm.c: 77: }
  2158  001AB0  D004               	goto	l2779
  2159  001AB2                     l2775:
  2160                           
  2161                           ;pwm.c: 78: else{
  2162                           ;pwm.c: 79: lightStatus = 0;
  2163  001AB2  0E00               	movlw	0
  2164  001AB4  6E58               	movwf	_lightStatus,c
  2165                           
  2166                           ;pwm.c: 80: dutyCycleClear();
  2167  001AB6  ECD1  F00D         	call	_dutyCycleClear	;wreg free
  2168  001ABA                     l2779:
  2169                           
  2170                           ;pwm.c: 81: }
  2171                           ;pwm.c: 82: initQueue();
  2172  001ABA  ECCC  F00C         	call	_initQueue	;wreg free
  2173  001ABE  0012               	return		;funcret
  2174  001AC0                     __end_of_lightSwitch:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _initQueue *****************
  2194 ;; Defined at:
  2195 ;;		line 3 in file "lpque.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  i               2   37[COMRAM] int 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;Total ram usage:        2 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    3
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;;		_lightSwitch
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text17
  2225  001998                     __ptext17:
  2226                           	opt stack 0
  2227  001998                     _initQueue:
  2228                           	opt stack 26
  2229                           
  2230                           ;lpque.c: 4: for (int i = 0; i < 10; i++)
  2231                           
  2232                           ;incstack = 0
  2233  001998  0E00               	movlw	0
  2234  00199A  6E27               	movwf	initQueue@i+1,c
  2235  00199C  0E00               	movlw	0
  2236  00199E  6E26               	movwf	initQueue@i,c
  2237  0019A0                     l2557:
  2238  0019A0  BE27               	btfsc	initQueue@i+1,7,c
  2239  0019A2  D006               	goto	l2561
  2240  0019A4  5027               	movf	initQueue@i+1,w,c
  2241  0019A6  E114               	bnz	l405
  2242  0019A8  0E0A               	movlw	10
  2243  0019AA  5C26               	subwf	initQueue@i,w,c
  2244  0019AC  B0D8               	btfsc	status,0,c
  2245  0019AE  0012               	return	
  2246  0019B0                     l2561:
  2247                           
  2248                           ;lpque.c: 5: my_stack[i] = 101;
  2249  0019B0  90D8               	bcf	status,0,c
  2250  0019B2  3426               	rlcf	initQueue@i,w,c
  2251  0019B4  6ED9               	movwf	fsr2l,c
  2252  0019B6  3427               	rlcf	initQueue@i+1,w,c
  2253  0019B8  6EDA               	movwf	fsr2h,c
  2254  0019BA  0E31               	movlw	low _my_stack
  2255  0019BC  26D9               	addwf	fsr2l,f,c
  2256  0019BE  0E00               	movlw	high _my_stack
  2257  0019C0  22DA               	addwfc	fsr2h,f,c
  2258  0019C2  0E65               	movlw	101
  2259  0019C4  6EDE               	movwf	postinc2,c
  2260  0019C6  0E00               	movlw	0
  2261  0019C8  6EDD               	movwf	postdec2,c
  2262  0019CA  4A26               	infsnz	initQueue@i,f,c
  2263  0019CC  2A27               	incf	initQueue@i+1,f,c
  2264  0019CE  D7E8               	goto	l2557
  2265  0019D0                     l405:
  2266  0019D0  0012               	return		;funcret
  2267  0019D2                     __end_of_initQueue:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           indf2	equ	0xFDF
  2279                           postinc2	equ	0xFDE
  2280                           postdec2	equ	0xFDD
  2281                           plusw2	equ	0xFDB
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _dutyCycleSet *****************
  2287 ;; Defined at:
  2288 ;;		line 52 in file "pwm.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    4
  2309 ;; This function calls:
  2310 ;;		_setDutyCycle
  2311 ;; This function is called by:
  2312 ;;		_lightSwitch
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text18
  2317  001B9A                     __ptext18:
  2318                           	opt stack 0
  2319  001B9A                     _dutyCycleSet:
  2320                           	opt stack 25
  2321                           
  2322                           ;pwm.c: 53: setDutyCycle(rate);
  2323                           
  2324                           ;incstack = 0
  2325  001B9A  5059               	movf	_rate,w,c
  2326  001B9C  ECB5  F00D         	call	_setDutyCycle
  2327  001BA0  0012               	return		;funcret
  2328  001BA2                     __end_of_dutyCycleSet:
  2329                           	opt stack 0
  2330                           tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           prodh	equ	0xFF4
  2335                           prodl	equ	0xFF3
  2336                           intcon	equ	0xFF2
  2337                           postinc0	equ	0xFEE
  2338                           wreg	equ	0xFE8
  2339                           indf2	equ	0xFDF
  2340                           postinc2	equ	0xFDE
  2341                           postdec2	equ	0xFDD
  2342                           plusw2	equ	0xFDB
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function _dutyCycleClear *****************
  2348 ;; Defined at:
  2349 ;;		line 56 in file "pwm.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      void 
  2356 ;; Registers used:
  2357 ;;		wreg, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;Total ram usage:        0 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    4
  2370 ;; This function calls:
  2371 ;;		_setDutyCycle
  2372 ;; This function is called by:
  2373 ;;		_lightSwitch
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text19
  2378  001BA2                     __ptext19:
  2379                           	opt stack 0
  2380  001BA2                     _dutyCycleClear:
  2381                           	opt stack 25
  2382                           
  2383                           ;pwm.c: 58: setDutyCycle(77 + 20);
  2384                           
  2385                           ;incstack = 0
  2386  001BA2  0E61               	movlw	97
  2387  001BA4  ECB5  F00D         	call	_setDutyCycle
  2388  001BA8  0012               	return		;funcret
  2389  001BAA                     __end_of_dutyCycleClear:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           postinc0	equ	0xFEE
  2399                           wreg	equ	0xFE8
  2400                           indf2	equ	0xFDF
  2401                           postinc2	equ	0xFDE
  2402                           postdec2	equ	0xFDD
  2403                           plusw2	equ	0xFDB
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _lessLight *****************
  2409 ;; Defined at:
  2410 ;;		line 67 in file "pwm.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;Total ram usage:        0 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    5
  2431 ;; This function calls:
  2432 ;;		_dutyCycleUp
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text20
  2439  001B5E                     __ptext20:
  2440                           	opt stack 0
  2441  001B5E                     _lessLight:
  2442                           	opt stack 25
  2443                           
  2444                           ;pwm.c: 68: if (lightStatus == 1){
  2445                           
  2446                           ;incstack = 0
  2447  001B5E  0458               	decf	_lightStatus,w,c
  2448  001B60  A4D8               	btfss	status,2,c
  2449  001B62  0012               	return	
  2450                           
  2451                           ;pwm.c: 69: dutyCycleUp();
  2452  001B64  EC6C  F00D         	call	_dutyCycleUp	;wreg free
  2453  001B68  0012               	return	
  2454  001B6A                     __end_of_lessLight:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           indf2	equ	0xFDF
  2466                           postinc2	equ	0xFDE
  2467                           postdec2	equ	0xFDD
  2468                           plusw2	equ	0xFDB
  2469                           fsr2h	equ	0xFDA
  2470                           fsr2l	equ	0xFD9
  2471                           status	equ	0xFD8
  2472                           
  2473 ;; *************** function _dutyCycleUp *****************
  2474 ;; Defined at:
  2475 ;;		line 36 in file "pwm.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, status,2, status,0, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		_setDutyCycle
  2498 ;; This function is called by:
  2499 ;;		_lessLight
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text21
  2504  001AD8                     __ptext21:
  2505                           	opt stack 0
  2506  001AD8                     _dutyCycleUp:
  2507                           	opt stack 25
  2508                           
  2509                           ;pwm.c: 37: if(77 - 20 > rate)
  2510                           
  2511                           ;incstack = 0
  2512  001AD8  0E39               	movlw	57
  2513  001ADA  6059               	cpfslt	_rate,c
  2514  001ADC  D003               	goto	l2597
  2515                           
  2516                           ;pwm.c: 38: rate = rate + 20;
  2517  001ADE  5059               	movf	_rate,w,c
  2518  001AE0  0F14               	addlw	20
  2519  001AE2  D001               	goto	L1
  2520  001AE4                     l2597:
  2521                           
  2522                           ;pwm.c: 39: else
  2523                           ;pwm.c: 40: rate = 77;
  2524  001AE4  0E4D               	movlw	77
  2525  001AE6                     L1:
  2526  001AE6  6E59               	movwf	_rate,c
  2527                           
  2528                           ;pwm.c: 41: setDutyCycle(rate);
  2529  001AE8  5059               	movf	_rate,w,c
  2530  001AEA  ECB5  F00D         	call	_setDutyCycle
  2531  001AEE  0012               	return		;funcret
  2532  001AF0                     __end_of_dutyCycleUp:
  2533                           	opt stack 0
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           intcon	equ	0xFF2
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           indf2	equ	0xFDF
  2544                           postinc2	equ	0xFDE
  2545                           postdec2	equ	0xFDD
  2546                           plusw2	equ	0xFDB
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _setDutyCycle *****************
  2552 ;; Defined at:
  2553 ;;		line 28 in file "pwm.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  x               1    wreg     unsigned char 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  x               1   37[COMRAM] unsigned char 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;Total ram usage:        1 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    3
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_dutyCycleUp
  2578 ;;		_dutyCycleDown
  2579 ;;		_dutyCycleSet
  2580 ;;		_dutyCycleClear
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text22
  2585  001B6A                     __ptext22:
  2586                           	opt stack 0
  2587  001B6A                     _setDutyCycle:
  2588                           	opt stack 25
  2589                           
  2590                           ;incstack = 0
  2591                           ;setDutyCycle@x stored from wreg
  2592  001B6A  6E26               	movwf	setDutyCycle@x,c
  2593                           
  2594                           ;pwm.c: 29: CCPR2L = x;
  2595  001B6C  C026  FFBB         	movff	setDutyCycle@x,4027	;volatile
  2596                           
  2597                           ;pwm.c: 30: T2CONbits.TMR2ON = 1;
  2598  001B70  84CA               	bsf	4042,2,c	;volatile
  2599                           
  2600                           ;pwm.c: 31: PIR1bits.CCP1IF = 0;
  2601  001B72  949E               	bcf	3998,2,c	;volatile
  2602  001B74  0012               	return		;funcret
  2603  001B76                     __end_of_setDutyCycle:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           prodh	equ	0xFF4
  2610                           prodl	equ	0xFF3
  2611                           intcon	equ	0xFF2
  2612                           postinc0	equ	0xFEE
  2613                           wreg	equ	0xFE8
  2614                           indf2	equ	0xFDF
  2615                           postinc2	equ	0xFDE
  2616                           postdec2	equ	0xFDD
  2617                           plusw2	equ	0xFDB
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function _lcdWriteString *****************
  2623 ;; Defined at:
  2624 ;;		line 95 in file "user.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  str             2   39[COMRAM] PTR unsigned char 
  2627 ;;		 -> STR_2(13), STR_1(2), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  i               2   43[COMRAM] int 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;Total ram usage:        6 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    5
  2646 ;; This function calls:
  2647 ;;		_lcdWriteChar
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text23
  2654  001892                     __ptext23:
  2655                           	opt stack 0
  2656  001892                     _lcdWriteString:
  2657                           	opt stack 25
  2658                           
  2659                           ;user.c: 96: for(int i = 0; str[i]; i++){
  2660                           
  2661                           ;incstack = 0
  2662  001892  0E00               	movlw	0
  2663  001894  6E2D               	movwf	lcdWriteString@i+1,c
  2664  001896  0E00               	movlw	0
  2665  001898  6E2C               	movwf	lcdWriteString@i,c
  2666  00189A  D010               	goto	l2735
  2667  00189C                     l2731:
  2668                           
  2669                           ;user.c: 97: lcdWriteChar(str[i]);
  2670  00189C  502C               	movf	lcdWriteString@i,w,c
  2671  00189E  2428               	addwf	lcdWriteString@str,w,c
  2672  0018A0  6E2A               	movwf	??_lcdWriteString& (0+255),c
  2673  0018A2  502D               	movf	lcdWriteString@i+1,w,c
  2674  0018A4  2029               	addwfc	lcdWriteString@str+1,w,c
  2675  0018A6  6E2B               	movwf	(??_lcdWriteString+1)& (0+255),c
  2676  0018A8  C02A  FFF6         	movff	??_lcdWriteString,tblptrl
  2677  0018AC  C02B  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2678  0018B0                     	if	0	;tblptru may be non-zero
  2679  0018B0                     	endif
  2680  0018B0                     	if	0	;tblptru may be non-zero
  2681  0018B0                     	endif
  2682  0018B0  0008               	tblrd		*
  2683  0018B2  50F5               	movf	tablat,w,c
  2684  0018B4  ECE9  F00C         	call	_lcdWriteChar
  2685  0018B8  4A2C               	infsnz	lcdWriteString@i,f,c
  2686  0018BA  2A2D               	incf	lcdWriteString@i+1,f,c
  2687  0018BC                     l2735:
  2688  0018BC  502C               	movf	lcdWriteString@i,w,c
  2689  0018BE  2428               	addwf	lcdWriteString@str,w,c
  2690  0018C0  6E2A               	movwf	??_lcdWriteString& (0+255),c
  2691  0018C2  502D               	movf	lcdWriteString@i+1,w,c
  2692  0018C4  2029               	addwfc	lcdWriteString@str+1,w,c
  2693  0018C6  6E2B               	movwf	(??_lcdWriteString+1)& (0+255),c
  2694  0018C8  C02A  FFF6         	movff	??_lcdWriteString,tblptrl
  2695  0018CC  C02B  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2696  0018D0                     	if	0	;tblptru may be non-zero
  2697  0018D0                     	endif
  2698  0018D0                     	if	0	;tblptru may be non-zero
  2699  0018D0                     	endif
  2700  0018D0  0008               	tblrd		*
  2701  0018D2  50F5               	movf	tablat,w,c
  2702  0018D4  0900               	iorlw	0
  2703  0018D6  B4D8               	btfsc	status,2,c
  2704  0018D8  0012               	return	
  2705  0018DA  D7E0               	goto	l2731
  2706  0018DC                     __end_of_lcdWriteString:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           intcon	equ	0xFF2
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           plusw2	equ	0xFDB
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _lcdWriteInt *****************
  2726 ;; Defined at:
  2727 ;;		line 114 in file "user.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  num             2   46[COMRAM] int 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;Total ram usage:        2 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    6
  2748 ;; This function calls:
  2749 ;;		_lcdWriteChar
  2750 ;;		_lcdWriteUI
  2751 ;; This function is called by:
  2752 ;;		_main
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text24
  2757  001A62                     __ptext24:
  2758                           	opt stack 0
  2759  001A62                     _lcdWriteInt:
  2760                           	opt stack 24
  2761                           
  2762                           ;user.c: 115: if(num < 0){
  2763                           
  2764                           ;incstack = 0
  2765  001A62  AE30               	btfss	lcdWriteInt@num+1,7,c
  2766  001A64  D007               	goto	l2743
  2767                           
  2768                           ;user.c: 116: lcdWriteChar('-');
  2769  001A66  0E2D               	movlw	45
  2770  001A68  ECE9  F00C         	call	_lcdWriteChar
  2771                           
  2772                           ;user.c: 117: num = -num;
  2773  001A6C  6C2F               	negf	lcdWriteInt@num,c
  2774  001A6E  1E30               	comf	lcdWriteInt@num+1,f,c
  2775  001A70  B0D8               	btfsc	status,0,c
  2776  001A72  2A30               	incf	lcdWriteInt@num+1,f,c
  2777  001A74                     l2743:
  2778                           
  2779                           ;user.c: 118: }
  2780                           ;user.c: 119: lcdWriteUI((unsigned int) num);
  2781  001A74  C02F  F02D         	movff	lcdWriteInt@num,lcdWriteUI@num
  2782  001A78  C030  F02E         	movff	lcdWriteInt@num+1,lcdWriteUI@num+1
  2783  001A7C  EC78  F00A         	call	_lcdWriteUI	;wreg free
  2784  001A80  0012               	return		;funcret
  2785  001A82                     __end_of_lcdWriteInt:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           indf2	equ	0xFDF
  2797                           postinc2	equ	0xFDE
  2798                           postdec2	equ	0xFDD
  2799                           plusw2	equ	0xFDB
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _lcdWriteUI *****************
  2805 ;; Defined at:
  2806 ;;		line 101 in file "user.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  num             2   44[COMRAM] unsigned int 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  stack          20    0[BANK0 ] unsigned char [20]
  2811 ;;  i               2   20[BANK0 ] int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;Total ram usage:       24 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    5
  2828 ;; This function calls:
  2829 ;;		___lwdiv
  2830 ;;		___lwmod
  2831 ;;		_lcdWriteChar
  2832 ;; This function is called by:
  2833 ;;		_lcdWriteInt
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text25
  2838  0014F0                     __ptext25:
  2839                           	opt stack 0
  2840  0014F0                     _lcdWriteUI:
  2841                           	opt stack 24
  2842                           
  2843                           ;user.c: 102: char stack[20];
  2844                           ;user.c: 103: int i = 0;
  2845                           
  2846                           ;incstack = 0
  2847  0014F0  0E00               	movlw	0
  2848  0014F2  0100               	movlb	0	; () banked
  2849  0014F4  6FFE               	movwf	(lcdWriteUI@i+1)& (0+255),b
  2850  0014F6  0E00               	movlw	0
  2851  0014F8  6FFD               	movwf	lcdWriteUI@i& (0+255),b
  2852  0014FA                     l2569:
  2853                           
  2854                           ;user.c: 105: stack[i++] = '0' + (num % 10);
  2855  0014FA  0EE9               	movlw	low lcdWriteUI@stack
  2856  0014FC  0100               	movlb	0	; () banked
  2857  0014FE  25FD               	addwf	lcdWriteUI@i& (0+255),w,b
  2858  001500  6ED9               	movwf	fsr2l,c
  2859  001502  0E00               	movlw	high lcdWriteUI@stack
  2860  001504  0100               	movlb	0	; () banked
  2861  001506  21FE               	addwfc	(lcdWriteUI@i+1)& (0+255),w,b
  2862  001508  6EDA               	movwf	fsr2h,c
  2863  00150A  C02D  F026         	movff	lcdWriteUI@num,___lwmod@dividend
  2864  00150E  C02E  F027         	movff	lcdWriteUI@num+1,___lwmod@dividend+1
  2865  001512  0E00               	movlw	0
  2866  001514  6E29               	movwf	___lwmod@divisor+1,c
  2867  001516  0E0A               	movlw	10
  2868  001518  6E28               	movwf	___lwmod@divisor,c
  2869  00151A  EC6E  F00C         	call	___lwmod	;wreg free
  2870  00151E  5026               	movf	?___lwmod,w,c
  2871  001520  0F30               	addlw	48
  2872  001522  6EDF               	movwf	indf2,c
  2873  001524  0100               	movlb	0	; () banked
  2874  001526  4BFD               	infsnz	lcdWriteUI@i& (0+255),f,b
  2875  001528  2BFE               	incf	(lcdWriteUI@i+1)& (0+255),f,b
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;user.c: 106: num /= 10;
  2879  00152A  C02D  F026         	movff	lcdWriteUI@num,___lwdiv@dividend
  2880  00152E  C02E  F027         	movff	lcdWriteUI@num+1,___lwdiv@dividend+1
  2881  001532  0E00               	movlw	0
  2882  001534  6E29               	movwf	___lwdiv@divisor+1,c
  2883  001536  0E0A               	movlw	10
  2884  001538  6E28               	movwf	___lwdiv@divisor,c
  2885  00153A  EC20  F00C         	call	___lwdiv	;wreg free
  2886  00153E  C026  F02D         	movff	?___lwdiv,lcdWriteUI@num
  2887  001542  C027  F02E         	movff	?___lwdiv+1,lcdWriteUI@num+1
  2888                           
  2889                           ;user.c: 107: }
  2890                           ;user.c: 108: while(num != 0);
  2891  001546  502D               	movf	lcdWriteUI@num,w,c
  2892  001548  102E               	iorwf	lcdWriteUI@num+1,w,c
  2893  00154A  B4D8               	btfsc	status,2,c
  2894  00154C  D010               	goto	l2579
  2895  00154E  D7D5               	goto	l2569
  2896  001550                     l2577:
  2897                           
  2898                           ;user.c: 110: lcdWriteChar(stack[--i]);
  2899  001550  0100               	movlb	0	; () banked
  2900  001552  07FD               	decf	lcdWriteUI@i& (0+255),f,b
  2901  001554  A0D8               	btfss	status,0,c
  2902  001556  07FE               	decf	(lcdWriteUI@i+1)& (0+255),f,b
  2903  001558  0EE9               	movlw	low lcdWriteUI@stack
  2904  00155A  0100               	movlb	0	; () banked
  2905  00155C  25FD               	addwf	lcdWriteUI@i& (0+255),w,b
  2906  00155E  6ED9               	movwf	fsr2l,c
  2907  001560  0E00               	movlw	high lcdWriteUI@stack
  2908  001562  0100               	movlb	0	; () banked
  2909  001564  21FE               	addwfc	(lcdWriteUI@i+1)& (0+255),w,b
  2910  001566  6EDA               	movwf	fsr2h,c
  2911  001568  50DF               	movf	indf2,w,c
  2912  00156A  ECE9  F00C         	call	_lcdWriteChar
  2913  00156E                     l2579:
  2914  00156E  0100               	movlb	0	; () banked
  2915  001570  51FD               	movf	lcdWriteUI@i& (0+255),w,b
  2916  001572  0100               	movlb	0	; () banked
  2917  001574  11FE               	iorwf	(lcdWriteUI@i+1)& (0+255),w,b
  2918  001576  B4D8               	btfsc	status,2,c
  2919  001578  0012               	return	
  2920  00157A  D7EA               	goto	l2577
  2921  00157C                     __end_of_lcdWriteUI:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           indf2	equ	0xFDF
  2933                           postinc2	equ	0xFDE
  2934                           postdec2	equ	0xFDD
  2935                           plusw2	equ	0xFDB
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _lcdWriteChar *****************
  2941 ;; Defined at:
  2942 ;;		line 80 in file "user.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  leter           1    wreg     unsigned char 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  leter           1   38[COMRAM] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;Total ram usage:        2 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    4
  2963 ;; This function calls:
  2964 ;;		_lcdEnable
  2965 ;; This function is called by:
  2966 ;;		_main
  2967 ;;		_lcdWriteString
  2968 ;;		_lcdWriteUI
  2969 ;;		_lcdWriteInt
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text26
  2974  0019D2                     __ptext26:
  2975                           	opt stack 0
  2976  0019D2                     _lcdWriteChar:
  2977                           	opt stack 25
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;incstack = 0
  2981                           ;lcdWriteChar@leter stored from wreg
  2982  0019D2  6E27               	movwf	lcdWriteChar@leter,c
  2983                           
  2984                           ;user.c: 81: PORTCbits.RC2 = 1;
  2985  0019D4  8482               	bsf	3970,2,c	;volatile
  2986                           
  2987                           ;user.c: 82: _delay((unsigned long)((10)*(4000000/4000.0)));
  2988  0019D6  0E0D               	movlw	13
  2989  0019D8  6E26               	movwf	??_lcdWriteChar& (0+255),c
  2990  0019DA  0EFC               	movlw	252
  2991  0019DC                     u2037:
  2992  0019DC  2EE8               	decfsz	wreg,f,c
  2993  0019DE  D7FE               	bra	u2037
  2994  0019E0  2E26               	decfsz	??_lcdWriteChar& (0+255),f,c
  2995  0019E2  D7FC               	bra	u2037
  2996                           
  2997                           ;user.c: 85: PORTD = (leter >> 4) & 0b00001111;
  2998  0019E4  3827               	swapf	lcdWriteChar@leter,w,c
  2999  0019E6  0B0F               	andlw	15
  3000  0019E8  0B0F               	andlw	15
  3001  0019EA  6E83               	movwf	3971,c	;volatile
  3002                           
  3003                           ;user.c: 86: lcdEnable();
  3004  0019EC  ECD5  F00D         	call	_lcdEnable	;wreg free
  3005                           
  3006                           ;user.c: 87: _delay((unsigned long)((1)*(4000000/4000.0)));
  3007  0019F0  0EC8               	movlw	200
  3008  0019F2                     u2047:
  3009  0019F2  D000               	nop2	
  3010  0019F4  2EE8               	decfsz	wreg,f,c
  3011  0019F6  D7FD               	bra	u2047
  3012                           
  3013                           ;user.c: 89: PORTD = leter & 0b00001111;
  3014  0019F8  5027               	movf	lcdWriteChar@leter,w,c
  3015  0019FA  0B0F               	andlw	15
  3016  0019FC  6E83               	movwf	3971,c	;volatile
  3017                           
  3018                           ;user.c: 90: lcdEnable();
  3019  0019FE  ECD5  F00D         	call	_lcdEnable	;wreg free
  3020                           
  3021                           ;user.c: 91: _delay((unsigned long)((1)*(4000000/4000.0)));
  3022  001A02  0EC8               	movlw	200
  3023  001A04                     u2057:
  3024  001A04  D000               	nop2	
  3025  001A06  2EE8               	decfsz	wreg,f,c
  3026  001A08  D7FD               	bra	u2057
  3027  001A0A  0012               	return		;funcret
  3028  001A0C                     __end_of_lcdWriteChar:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           indf2	equ	0xFDF
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           plusw2	equ	0xFDB
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function ___lwmod *****************
  3048 ;; Defined at:
  3049 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  dividend        2   37[COMRAM] unsigned int 
  3052 ;;  divisor         2   39[COMRAM] unsigned int 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  counter         1   41[COMRAM] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  2   37[COMRAM] unsigned int 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        5 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    3
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_lcdWriteUI
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text27
  3079  0018DC                     __ptext27:
  3080                           	opt stack 0
  3081  0018DC                     ___lwmod:
  3082                           	opt stack 25
  3083                           
  3084                           ;incstack = 0
  3085  0018DC  5028               	movf	___lwmod@divisor,w,c
  3086  0018DE  1029               	iorwf	___lwmod@divisor+1,w,c
  3087  0018E0  B4D8               	btfsc	status,2,c
  3088  0018E2  D018               	goto	l936
  3089  0018E4  0E01               	movlw	1
  3090  0018E6  6E2A               	movwf	___lwmod@counter,c
  3091  0018E8  D004               	goto	l2545
  3092  0018EA                     l2543:
  3093  0018EA  90D8               	bcf	status,0,c
  3094  0018EC  3628               	rlcf	___lwmod@divisor,f,c
  3095  0018EE  3629               	rlcf	___lwmod@divisor+1,f,c
  3096  0018F0  2A2A               	incf	___lwmod@counter,f,c
  3097  0018F2                     l2545:
  3098  0018F2  AE29               	btfss	___lwmod@divisor+1,7,c
  3099  0018F4  D7FA               	goto	l2543
  3100  0018F6                     l2547:
  3101  0018F6  5028               	movf	___lwmod@divisor,w,c
  3102  0018F8  5C26               	subwf	___lwmod@dividend,w,c
  3103  0018FA  5029               	movf	___lwmod@divisor+1,w,c
  3104  0018FC  5827               	subwfb	___lwmod@dividend+1,w,c
  3105  0018FE  A0D8               	btfss	status,0,c
  3106  001900  D004               	goto	l2551
  3107  001902  5028               	movf	___lwmod@divisor,w,c
  3108  001904  5E26               	subwf	___lwmod@dividend,f,c
  3109  001906  5029               	movf	___lwmod@divisor+1,w,c
  3110  001908  5A27               	subwfb	___lwmod@dividend+1,f,c
  3111  00190A                     l2551:
  3112  00190A  90D8               	bcf	status,0,c
  3113  00190C  3229               	rrcf	___lwmod@divisor+1,f,c
  3114  00190E  3228               	rrcf	___lwmod@divisor,f,c
  3115  001910  2E2A               	decfsz	___lwmod@counter,f,c
  3116  001912  D7F1               	goto	l2547
  3117  001914                     l936:
  3118  001914  C026  F026         	movff	___lwmod@dividend,?___lwmod
  3119  001918  C027  F027         	movff	___lwmod@dividend+1,?___lwmod+1
  3120  00191C  0012               	return		;funcret
  3121  00191E                     __end_of___lwmod:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           postdec2	equ	0xFDD
  3135                           plusw2	equ	0xFDB
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function ___lwdiv *****************
  3141 ;; Defined at:
  3142 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  dividend        2   37[COMRAM] unsigned int 
  3145 ;;  divisor         2   39[COMRAM] unsigned int 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  quotient        2   42[COMRAM] unsigned int 
  3148 ;;  counter         1   41[COMRAM] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   37[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:        7 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_lcdWriteUI
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text28
  3173  001840                     __ptext28:
  3174                           	opt stack 0
  3175  001840                     ___lwdiv:
  3176                           	opt stack 25
  3177                           
  3178                           ;incstack = 0
  3179  001840  0E00               	movlw	0
  3180  001842  6E2C               	movwf	___lwdiv@quotient+1,c
  3181  001844  0E00               	movlw	0
  3182  001846  6E2B               	movwf	___lwdiv@quotient,c
  3183  001848  5028               	movf	___lwdiv@divisor,w,c
  3184  00184A  1029               	iorwf	___lwdiv@divisor+1,w,c
  3185  00184C  B4D8               	btfsc	status,2,c
  3186  00184E  D01C               	goto	l926
  3187  001850  0E01               	movlw	1
  3188  001852  6E2A               	movwf	___lwdiv@counter,c
  3189  001854  D004               	goto	l2525
  3190  001856                     l2523:
  3191  001856  90D8               	bcf	status,0,c
  3192  001858  3628               	rlcf	___lwdiv@divisor,f,c
  3193  00185A  3629               	rlcf	___lwdiv@divisor+1,f,c
  3194  00185C  2A2A               	incf	___lwdiv@counter,f,c
  3195  00185E                     l2525:
  3196  00185E  AE29               	btfss	___lwdiv@divisor+1,7,c
  3197  001860  D7FA               	goto	l2523
  3198  001862                     l2527:
  3199  001862  90D8               	bcf	status,0,c
  3200  001864  362B               	rlcf	___lwdiv@quotient,f,c
  3201  001866  362C               	rlcf	___lwdiv@quotient+1,f,c
  3202  001868  5028               	movf	___lwdiv@divisor,w,c
  3203  00186A  5C26               	subwf	___lwdiv@dividend,w,c
  3204  00186C  5029               	movf	___lwdiv@divisor+1,w,c
  3205  00186E  5827               	subwfb	___lwdiv@dividend+1,w,c
  3206  001870  A0D8               	btfss	status,0,c
  3207  001872  D005               	goto	l2535
  3208  001874  5028               	movf	___lwdiv@divisor,w,c
  3209  001876  5E26               	subwf	___lwdiv@dividend,f,c
  3210  001878  5029               	movf	___lwdiv@divisor+1,w,c
  3211  00187A  5A27               	subwfb	___lwdiv@dividend+1,f,c
  3212  00187C  802B               	bsf	___lwdiv@quotient,0,c
  3213  00187E                     l2535:
  3214  00187E  90D8               	bcf	status,0,c
  3215  001880  3229               	rrcf	___lwdiv@divisor+1,f,c
  3216  001882  3228               	rrcf	___lwdiv@divisor,f,c
  3217  001884  2E2A               	decfsz	___lwdiv@counter,f,c
  3218  001886  D7ED               	goto	l2527
  3219  001888                     l926:
  3220  001888  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  3221  00188C  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3222  001890  0012               	return		;funcret
  3223  001892                     __end_of___lwdiv:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           plusw2	equ	0xFDB
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _initUART *****************
  3243 ;; Defined at:
  3244 ;;		line 4 in file "eusart.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    3
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_main
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text29
  3273  001A82                     __ptext29:
  3274                           	opt stack 0
  3275  001A82                     _initUART:
  3276                           	opt stack 27
  3277                           
  3278                           ;eusart.c: 5: TRISCbits.RC7 = 1;
  3279                           
  3280                           ;incstack = 0
  3281  001A82  8E94               	bsf	3988,7,c	;volatile
  3282                           
  3283                           ;eusart.c: 6: TRISCbits.RC6 = 1;
  3284  001A84  8C94               	bsf	3988,6,c	;volatile
  3285                           
  3286                           ;eusart.c: 8: TXSTAbits.BRGH = 1;
  3287  001A86  84AC               	bsf	4012,2,c	;volatile
  3288                           
  3289                           ;eusart.c: 9: BAUDCONbits.BRG16 = 1;
  3290  001A88  86B8               	bsf	4024,3,c	;volatile
  3291                           
  3292                           ;eusart.c: 10: TXSTAbits.SYNC =0;
  3293  001A8A  98AC               	bcf	4012,4,c	;volatile
  3294                           
  3295                           ;eusart.c: 14: SPBRGH = 0x00;
  3296  001A8C  0E00               	movlw	0
  3297  001A8E  6EB0               	movwf	4016,c	;volatile
  3298                           
  3299                           ;eusart.c: 15: SPBRG = 0x07;
  3300  001A90  0E07               	movlw	7
  3301  001A92  6EAF               	movwf	4015,c	;volatile
  3302                           
  3303                           ;eusart.c: 18: PIE1bits.RCIE = 1;
  3304  001A94  8A9D               	bsf	3997,5,c	;volatile
  3305                           
  3306                           ;eusart.c: 19: INTCONbits.PEIE = 1;
  3307  001A96  8CF2               	bsf	intcon,6,c	;volatile
  3308                           
  3309                           ;eusart.c: 20: INTCONbits.GIE = 1;
  3310  001A98  8EF2               	bsf	intcon,7,c	;volatile
  3311                           
  3312                           ;eusart.c: 23: RCSTAbits.CREN = 1;
  3313  001A9A  88AB               	bsf	4011,4,c	;volatile
  3314                           
  3315                           ;eusart.c: 24: TXSTAbits.TXEN = 1;
  3316  001A9C  8AAC               	bsf	4012,5,c	;volatile
  3317                           
  3318                           ;eusart.c: 25: RCSTAbits.SPEN = 1;
  3319  001A9E  8EAB               	bsf	4011,7,c	;volatile
  3320  001AA0  0012               	return		;funcret
  3321  001AA2                     __end_of_initUART:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           intcon	equ	0xFF2
  3330                           postinc0	equ	0xFEE
  3331                           wreg	equ	0xFE8
  3332                           indf2	equ	0xFDF
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           plusw2	equ	0xFDB
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _initPWM *****************
  3341 ;; Defined at:
  3342 ;;		line 8 in file "pwm.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:        0 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    3
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_main
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text30
  3371  001AF0                     __ptext30:
  3372                           	opt stack 0
  3373  001AF0                     _initPWM:
  3374                           	opt stack 27
  3375                           
  3376                           ;pwm.c: 9: PR2 = 0x4F;
  3377                           
  3378                           ;incstack = 0
  3379  001AF0  0E4F               	movlw	79
  3380  001AF2  6ECB               	movwf	4043,c	;volatile
  3381                           
  3382                           ;pwm.c: 10: CCPR2L = 40;
  3383  001AF4  0E28               	movlw	40
  3384  001AF6  6EBB               	movwf	4027,c	;volatile
  3385                           
  3386                           ;pwm.c: 11: CCP2CON = 0b00011110;
  3387  001AF8  0E1E               	movlw	30
  3388  001AFA  6EBA               	movwf	4026,c	;volatile
  3389                           
  3390                           ;pwm.c: 12: TRISCbits.RC1 = 0;
  3391  001AFC  9294               	bcf	3988,1,c	;volatile
  3392                           
  3393                           ;pwm.c: 13: T2CON = 0x03;
  3394  001AFE  0E03               	movlw	3
  3395  001B00  6ECA               	movwf	4042,c	;volatile
  3396                           
  3397                           ;pwm.c: 14: T2CONbits.TMR2ON = 1;
  3398  001B02  84CA               	bsf	4042,2,c	;volatile
  3399  001B04  0012               	return		;funcret
  3400  001B06                     __end_of_initPWM:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           plusw2	equ	0xFDB
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _initLCD *****************
  3420 ;; Defined at:
  3421 ;;		line 47 in file "user.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        1 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    4
  3442 ;; This function calls:
  3443 ;;		_lcdEnable
  3444 ;; This function is called by:
  3445 ;;		_main
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text31
  3450  00157C                     __ptext31:
  3451                           	opt stack 0
  3452  00157C                     _initLCD:
  3453                           	opt stack 26
  3454                           
  3455                           ;user.c: 48: PORTCbits.RC5 = 0;
  3456                           
  3457                           ;incstack = 0
  3458  00157C  9A82               	bcf	3970,5,c	;volatile
  3459                           
  3460                           ;user.c: 49: PORTCbits.RC2 = 0;
  3461  00157E  9482               	bcf	3970,2,c	;volatile
  3462                           
  3463                           ;user.c: 50: _delay((unsigned long)((100)*(4000000/4000.0)));
  3464  001580  0E82               	movlw	130
  3465  001582  6E26               	movwf	??_initLCD& (0+255),c
  3466  001584  0EDE               	movlw	222
  3467  001586                     u2067:
  3468  001586  2EE8               	decfsz	wreg,f,c
  3469  001588  D7FE               	bra	u2067
  3470  00158A  2E26               	decfsz	??_initLCD& (0+255),f,c
  3471  00158C  D7FC               	bra	u2067
  3472                           
  3473                           ;user.c: 52: PORTD = 0b00000010;
  3474  00158E  0E02               	movlw	2
  3475  001590  6E83               	movwf	3971,c	;volatile
  3476                           
  3477                           ;user.c: 53: lcdEnable();
  3478  001592  ECD5  F00D         	call	_lcdEnable	;wreg free
  3479                           
  3480                           ;user.c: 54: PORTD = 0b00000010;
  3481  001596  0E02               	movlw	2
  3482  001598  6E83               	movwf	3971,c	;volatile
  3483                           
  3484                           ;user.c: 55: lcdEnable();
  3485  00159A  ECD5  F00D         	call	_lcdEnable	;wreg free
  3486                           
  3487                           ;user.c: 56: PORTD = 0b00001111;
  3488  00159E  0E0F               	movlw	15
  3489  0015A0  6E83               	movwf	3971,c	;volatile
  3490                           
  3491                           ;user.c: 57: lcdEnable();
  3492  0015A2  ECD5  F00D         	call	_lcdEnable	;wreg free
  3493                           
  3494                           ;user.c: 58: _delay((unsigned long)((70)*(4000000/4000000.0)));
  3495  0015A6  0E17               	movlw	23
  3496  0015A8                     u2077:
  3497  0015A8  2EE8               	decfsz	wreg,f,c
  3498  0015AA  D7FE               	bra	u2077
  3499  0015AC  F000               	nop	
  3500                           
  3501                           ;user.c: 60: PORTD = 0b00000000;
  3502  0015AE  0E00               	movlw	0
  3503  0015B0  6E83               	movwf	3971,c	;volatile
  3504                           
  3505                           ;user.c: 61: lcdEnable();
  3506  0015B2  ECD5  F00D         	call	_lcdEnable	;wreg free
  3507                           
  3508                           ;user.c: 62: PORTD = 0b00001111;
  3509  0015B6  0E0F               	movlw	15
  3510  0015B8  6E83               	movwf	3971,c	;volatile
  3511                           
  3512                           ;user.c: 63: lcdEnable();
  3513  0015BA  ECD5  F00D         	call	_lcdEnable	;wreg free
  3514                           
  3515                           ;user.c: 64: _delay((unsigned long)((70)*(4000000/4000000.0)));
  3516  0015BE  0E17               	movlw	23
  3517  0015C0                     u2087:
  3518  0015C0  2EE8               	decfsz	wreg,f,c
  3519  0015C2  D7FE               	bra	u2087
  3520  0015C4  F000               	nop	
  3521                           
  3522                           ;user.c: 66: PORTD = 0b00000000;
  3523  0015C6  0E00               	movlw	0
  3524  0015C8  6E83               	movwf	3971,c	;volatile
  3525                           
  3526                           ;user.c: 67: lcdEnable();
  3527  0015CA  ECD5  F00D         	call	_lcdEnable	;wreg free
  3528                           
  3529                           ;user.c: 68: PORTD = 0b00000001;
  3530  0015CE  0E01               	movlw	1
  3531  0015D0  6E83               	movwf	3971,c	;volatile
  3532                           
  3533                           ;user.c: 69: lcdEnable();
  3534  0015D2  ECD5  F00D         	call	_lcdEnable	;wreg free
  3535                           
  3536                           ;user.c: 70: _delay((unsigned long)((10)*(4000000/4000.0)));
  3537  0015D6  0E0D               	movlw	13
  3538  0015D8  6E26               	movwf	??_initLCD& (0+255),c
  3539  0015DA  0EFC               	movlw	252
  3540  0015DC                     u2097:
  3541  0015DC  2EE8               	decfsz	wreg,f,c
  3542  0015DE  D7FE               	bra	u2097
  3543  0015E0  2E26               	decfsz	??_initLCD& (0+255),f,c
  3544  0015E2  D7FC               	bra	u2097
  3545                           
  3546                           ;user.c: 72: PORTD = 0b00000000;
  3547  0015E4  0E00               	movlw	0
  3548  0015E6  6E83               	movwf	3971,c	;volatile
  3549                           
  3550                           ;user.c: 73: lcdEnable();
  3551  0015E8  ECD5  F00D         	call	_lcdEnable	;wreg free
  3552                           
  3553                           ;user.c: 74: PORTD = 0b00000011;
  3554  0015EC  0E03               	movlw	3
  3555  0015EE  6E83               	movwf	3971,c	;volatile
  3556                           
  3557                           ;user.c: 75: lcdEnable();
  3558  0015F0  ECD5  F00D         	call	_lcdEnable	;wreg free
  3559                           
  3560                           ;user.c: 76: _delay((unsigned long)((30)*(4000000/4000.0)));
  3561  0015F4  0E27               	movlw	39
  3562  0015F6  6E26               	movwf	??_initLCD& (0+255),c
  3563  0015F8  0EF5               	movlw	245
  3564  0015FA                     u2107:
  3565  0015FA  2EE8               	decfsz	wreg,f,c
  3566  0015FC  D7FE               	bra	u2107
  3567  0015FE  2E26               	decfsz	??_initLCD& (0+255),f,c
  3568  001600  D7FC               	bra	u2107
  3569  001602  F000               	nop	
  3570  001604  0012               	return		;funcret
  3571  001606                     __end_of_initLCD:
  3572                           	opt stack 0
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           postinc0	equ	0xFEE
  3581                           wreg	equ	0xFE8
  3582                           indf2	equ	0xFDF
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           plusw2	equ	0xFDB
  3586                           fsr2h	equ	0xFDA
  3587                           fsr2l	equ	0xFD9
  3588                           status	equ	0xFD8
  3589                           
  3590 ;; *************** function _lcdEnable *****************
  3591 ;; Defined at:
  3592 ;;		line 41 in file "user.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		None
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    3
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_initLCD
  3617 ;;		_lcdWriteChar
  3618 ;;		_clearDisplay
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text32
  3623  001BAA                     __ptext32:
  3624                           	opt stack 0
  3625  001BAA                     _lcdEnable:
  3626                           	opt stack 25
  3627                           
  3628                           ;user.c: 42: PORTCbits.RC5 = 1;
  3629                           
  3630                           ;incstack = 0
  3631  001BAA  8A82               	bsf	3970,5,c	;volatile
  3632                           
  3633                           ;user.c: 43: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3634  001BAC  F000               	nop	
  3635                           
  3636                           ;user.c: 44: PORTCbits.RC5 = 0;
  3637  001BAE  9A82               	bcf	3970,5,c	;volatile
  3638  001BB0  0012               	return		;funcret
  3639  001BB2                     __end_of_lcdEnable:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           postinc0	equ	0xFEE
  3649                           wreg	equ	0xFE8
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _getCommand *****************
  3659 ;; Defined at:
  3660 ;;		line 34 in file "eusart.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  ret             1   44[COMRAM] unsigned char 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      unsigned char 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;Total ram usage:        2 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    4
  3681 ;; This function calls:
  3682 ;;		___awmod
  3683 ;; This function is called by:
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text33
  3689  001012                     __ptext33:
  3690                           	opt stack 0
  3691  001012                     _getCommand:
  3692                           	opt stack 26
  3693                           
  3694                           ;eusart.c: 35: unsigned char ret = 0x00;
  3695                           
  3696                           ;incstack = 0
  3697  001012  0E00               	movlw	0
  3698  001014  6E2D               	movwf	getCommand@ret,c
  3699                           
  3700                           ;eusart.c: 36: if (uart_buffer[uart_head] == 'o' || uart_buffer[uart_head] == 'O'){
  3701  001016  5055               	movf	_uart_head,w,c
  3702  001018  0D01               	mullw	1
  3703  00101A  0E80               	movlw	low _uart_buffer
  3704  00101C  24F3               	addwf	prodl,w,c
  3705  00101E  6ED9               	movwf	fsr2l,c
  3706  001020  0E00               	movlw	high _uart_buffer
  3707  001022  20F4               	addwfc	prodh,w,c
  3708  001024  6EDA               	movwf	fsr2h,c
  3709  001026  0E6F               	movlw	111
  3710  001028  18DE               	xorwf	postinc2,w,c
  3711  00102A  B4D8               	btfsc	status,2,c
  3712  00102C  D00C               	goto	l2817
  3713  00102E  5055               	movf	_uart_head,w,c
  3714  001030  0D01               	mullw	1
  3715  001032  0E80               	movlw	low _uart_buffer
  3716  001034  24F3               	addwf	prodl,w,c
  3717  001036  6ED9               	movwf	fsr2l,c
  3718  001038  0E00               	movlw	high _uart_buffer
  3719  00103A  20F4               	addwfc	prodh,w,c
  3720  00103C  6EDA               	movwf	fsr2h,c
  3721  00103E  0E4F               	movlw	79
  3722  001040  18DE               	xorwf	postinc2,w,c
  3723  001042  A4D8               	btfss	status,2,c
  3724  001044  D042               	goto	l2831
  3725  001046                     l2817:
  3726                           
  3727                           ;eusart.c: 37: uart_head = (uart_head + 1) % 100;
  3728  001046  0E01               	movlw	1
  3729  001048  2455               	addwf	_uart_head,w,c
  3730  00104A  6E26               	movwf	___awmod@dividend,c
  3731  00104C  6A27               	clrf	___awmod@dividend+1,c
  3732  00104E  0E00               	movlw	0
  3733  001050  2227               	addwfc	___awmod@dividend+1,f,c
  3734  001052  0E00               	movlw	0
  3735  001054  6E29               	movwf	___awmod@divisor+1,c
  3736  001056  0E64               	movlw	100
  3737  001058  6E28               	movwf	___awmod@divisor,c
  3738  00105A  EC86  F00B         	call	___awmod	;wreg free
  3739  00105E  5026               	movf	?___awmod,w,c
  3740  001060  6E55               	movwf	_uart_head,c
  3741                           
  3742                           ;eusart.c: 38: if (uart_buffer[uart_head] == 'd' || uart_buffer[uart_head] == 'D')
  3743  001062  5055               	movf	_uart_head,w,c
  3744  001064  0D01               	mullw	1
  3745  001066  0E80               	movlw	low _uart_buffer
  3746  001068  24F3               	addwf	prodl,w,c
  3747  00106A  6ED9               	movwf	fsr2l,c
  3748  00106C  0E00               	movlw	high _uart_buffer
  3749  00106E  20F4               	addwfc	prodh,w,c
  3750  001070  6EDA               	movwf	fsr2h,c
  3751  001072  0E64               	movlw	100
  3752  001074  18DE               	xorwf	postinc2,w,c
  3753  001076  B4D8               	btfsc	status,2,c
  3754  001078  D00C               	goto	l2823
  3755  00107A  5055               	movf	_uart_head,w,c
  3756  00107C  0D01               	mullw	1
  3757  00107E  0E80               	movlw	low _uart_buffer
  3758  001080  24F3               	addwf	prodl,w,c
  3759  001082  6ED9               	movwf	fsr2l,c
  3760  001084  0E00               	movlw	high _uart_buffer
  3761  001086  20F4               	addwfc	prodh,w,c
  3762  001088  6EDA               	movwf	fsr2h,c
  3763  00108A  0E44               	movlw	68
  3764  00108C  18DE               	xorwf	postinc2,w,c
  3765  00108E  A4D8               	btfss	status,2,c
  3766  001090  D002               	goto	l2825
  3767  001092                     l2823:
  3768                           
  3769                           ;eusart.c: 39: ret = 0x01;
  3770  001092  0E01               	movlw	1
  3771  001094  6E2D               	movwf	getCommand@ret,c
  3772  001096                     l2825:
  3773                           
  3774                           ;eusart.c: 40: if (uart_buffer[uart_head] == 'a' || uart_buffer[uart_head] == 'A')
  3775  001096  5055               	movf	_uart_head,w,c
  3776  001098  0D01               	mullw	1
  3777  00109A  0E80               	movlw	low _uart_buffer
  3778  00109C  24F3               	addwf	prodl,w,c
  3779  00109E  6ED9               	movwf	fsr2l,c
  3780  0010A0  0E00               	movlw	high _uart_buffer
  3781  0010A2  20F4               	addwfc	prodh,w,c
  3782  0010A4  6EDA               	movwf	fsr2h,c
  3783  0010A6  0E61               	movlw	97
  3784  0010A8  18DE               	xorwf	postinc2,w,c
  3785  0010AA  B4D8               	btfsc	status,2,c
  3786  0010AC  D00C               	goto	l2829
  3787  0010AE  5055               	movf	_uart_head,w,c
  3788  0010B0  0D01               	mullw	1
  3789  0010B2  0E80               	movlw	low _uart_buffer
  3790  0010B4  24F3               	addwf	prodl,w,c
  3791  0010B6  6ED9               	movwf	fsr2l,c
  3792  0010B8  0E00               	movlw	high _uart_buffer
  3793  0010BA  20F4               	addwfc	prodh,w,c
  3794  0010BC  6EDA               	movwf	fsr2h,c
  3795  0010BE  0E41               	movlw	65
  3796  0010C0  18DE               	xorwf	postinc2,w,c
  3797  0010C2  A4D8               	btfss	status,2,c
  3798  0010C4  D0B8               	goto	l2869
  3799  0010C6                     l2829:
  3800                           
  3801                           ;eusart.c: 41: ret = 0x05;
  3802  0010C6  0E05               	movlw	5
  3803  0010C8  D0B5               	goto	L3
  3804  0010CA                     l2831:
  3805                           
  3806                           ;eusart.c: 43: else if (uart_buffer[uart_head] == 'c' || uart_buffer[uart_head] == 'C'){
  3807  0010CA  5055               	movf	_uart_head,w,c
  3808  0010CC  0D01               	mullw	1
  3809  0010CE  0E80               	movlw	low _uart_buffer
  3810  0010D0  24F3               	addwf	prodl,w,c
  3811  0010D2  6ED9               	movwf	fsr2l,c
  3812  0010D4  0E00               	movlw	high _uart_buffer
  3813  0010D6  20F4               	addwfc	prodh,w,c
  3814  0010D8  6EDA               	movwf	fsr2h,c
  3815  0010DA  0E63               	movlw	99
  3816  0010DC  18DE               	xorwf	postinc2,w,c
  3817  0010DE  B4D8               	btfsc	status,2,c
  3818  0010E0  D00C               	goto	l2835
  3819  0010E2  5055               	movf	_uart_head,w,c
  3820  0010E4  0D01               	mullw	1
  3821  0010E6  0E80               	movlw	low _uart_buffer
  3822  0010E8  24F3               	addwf	prodl,w,c
  3823  0010EA  6ED9               	movwf	fsr2l,c
  3824  0010EC  0E00               	movlw	high _uart_buffer
  3825  0010EE  20F4               	addwfc	prodh,w,c
  3826  0010F0  6EDA               	movwf	fsr2h,c
  3827  0010F2  0E43               	movlw	67
  3828  0010F4  18DE               	xorwf	postinc2,w,c
  3829  0010F6  A4D8               	btfss	status,2,c
  3830  0010F8  D042               	goto	l2849
  3831  0010FA                     l2835:
  3832                           
  3833                           ;eusart.c: 44: uart_head = (uart_head + 1) % 100;
  3834  0010FA  0E01               	movlw	1
  3835  0010FC  2455               	addwf	_uart_head,w,c
  3836  0010FE  6E26               	movwf	___awmod@dividend,c
  3837  001100  6A27               	clrf	___awmod@dividend+1,c
  3838  001102  0E00               	movlw	0
  3839  001104  2227               	addwfc	___awmod@dividend+1,f,c
  3840  001106  0E00               	movlw	0
  3841  001108  6E29               	movwf	___awmod@divisor+1,c
  3842  00110A  0E64               	movlw	100
  3843  00110C  6E28               	movwf	___awmod@divisor,c
  3844  00110E  EC86  F00B         	call	___awmod	;wreg free
  3845  001112  5026               	movf	?___awmod,w,c
  3846  001114  6E55               	movwf	_uart_head,c
  3847                           
  3848                           ;eusart.c: 45: if (uart_buffer[uart_head] == 'd' || uart_buffer[uart_head] == 'D')
  3849  001116  5055               	movf	_uart_head,w,c
  3850  001118  0D01               	mullw	1
  3851  00111A  0E80               	movlw	low _uart_buffer
  3852  00111C  24F3               	addwf	prodl,w,c
  3853  00111E  6ED9               	movwf	fsr2l,c
  3854  001120  0E00               	movlw	high _uart_buffer
  3855  001122  20F4               	addwfc	prodh,w,c
  3856  001124  6EDA               	movwf	fsr2h,c
  3857  001126  0E64               	movlw	100
  3858  001128  18DE               	xorwf	postinc2,w,c
  3859  00112A  B4D8               	btfsc	status,2,c
  3860  00112C  D00C               	goto	l2841
  3861  00112E  5055               	movf	_uart_head,w,c
  3862  001130  0D01               	mullw	1
  3863  001132  0E80               	movlw	low _uart_buffer
  3864  001134  24F3               	addwf	prodl,w,c
  3865  001136  6ED9               	movwf	fsr2l,c
  3866  001138  0E00               	movlw	high _uart_buffer
  3867  00113A  20F4               	addwfc	prodh,w,c
  3868  00113C  6EDA               	movwf	fsr2h,c
  3869  00113E  0E44               	movlw	68
  3870  001140  18DE               	xorwf	postinc2,w,c
  3871  001142  A4D8               	btfss	status,2,c
  3872  001144  D002               	goto	l2843
  3873  001146                     l2841:
  3874                           
  3875                           ;eusart.c: 46: ret = 0x02;
  3876  001146  0E02               	movlw	2
  3877  001148  6E2D               	movwf	getCommand@ret,c
  3878  00114A                     l2843:
  3879                           
  3880                           ;eusart.c: 47: if (uart_buffer[uart_head] == 'a' || uart_buffer[uart_head] == 'A')
  3881  00114A  5055               	movf	_uart_head,w,c
  3882  00114C  0D01               	mullw	1
  3883  00114E  0E80               	movlw	low _uart_buffer
  3884  001150  24F3               	addwf	prodl,w,c
  3885  001152  6ED9               	movwf	fsr2l,c
  3886  001154  0E00               	movlw	high _uart_buffer
  3887  001156  20F4               	addwfc	prodh,w,c
  3888  001158  6EDA               	movwf	fsr2h,c
  3889  00115A  0E61               	movlw	97
  3890  00115C  18DE               	xorwf	postinc2,w,c
  3891  00115E  B4D8               	btfsc	status,2,c
  3892  001160  D00C               	goto	l2847
  3893  001162  5055               	movf	_uart_head,w,c
  3894  001164  0D01               	mullw	1
  3895  001166  0E80               	movlw	low _uart_buffer
  3896  001168  24F3               	addwf	prodl,w,c
  3897  00116A  6ED9               	movwf	fsr2l,c
  3898  00116C  0E00               	movlw	high _uart_buffer
  3899  00116E  20F4               	addwfc	prodh,w,c
  3900  001170  6EDA               	movwf	fsr2h,c
  3901  001172  0E41               	movlw	65
  3902  001174  18DE               	xorwf	postinc2,w,c
  3903  001176  A4D8               	btfss	status,2,c
  3904  001178  D05E               	goto	l2869
  3905  00117A                     l2847:
  3906                           
  3907                           ;eusart.c: 48: ret = 0x06;
  3908  00117A  0E06               	movlw	6
  3909  00117C  D05B               	goto	L3
  3910  00117E                     l2849:
  3911                           
  3912                           ;eusart.c: 50: else{
  3913                           ;eusart.c: 51: if (uart_buffer[uart_head] == 'm' || uart_buffer[uart_head] == 'M')
  3914  00117E  5055               	movf	_uart_head,w,c
  3915  001180  0D01               	mullw	1
  3916  001182  0E80               	movlw	low _uart_buffer
  3917  001184  24F3               	addwf	prodl,w,c
  3918  001186  6ED9               	movwf	fsr2l,c
  3919  001188  0E00               	movlw	high _uart_buffer
  3920  00118A  20F4               	addwfc	prodh,w,c
  3921  00118C  6EDA               	movwf	fsr2h,c
  3922  00118E  0E6D               	movlw	109
  3923  001190  18DE               	xorwf	postinc2,w,c
  3924  001192  B4D8               	btfsc	status,2,c
  3925  001194  D00C               	goto	l2853
  3926  001196  5055               	movf	_uart_head,w,c
  3927  001198  0D01               	mullw	1
  3928  00119A  0E80               	movlw	low _uart_buffer
  3929  00119C  24F3               	addwf	prodl,w,c
  3930  00119E  6ED9               	movwf	fsr2l,c
  3931  0011A0  0E00               	movlw	high _uart_buffer
  3932  0011A2  20F4               	addwfc	prodh,w,c
  3933  0011A4  6EDA               	movwf	fsr2h,c
  3934  0011A6  0E4D               	movlw	77
  3935  0011A8  18DE               	xorwf	postinc2,w,c
  3936  0011AA  A4D8               	btfss	status,2,c
  3937  0011AC  D002               	goto	l2855
  3938  0011AE                     l2853:
  3939                           
  3940                           ;eusart.c: 52: ret = 0x03;
  3941  0011AE  0E03               	movlw	3
  3942  0011B0  6E2D               	movwf	getCommand@ret,c
  3943  0011B2                     l2855:
  3944                           
  3945                           ;eusart.c: 53: if (uart_buffer[uart_head] == 'l' || uart_buffer[uart_head] == 'L')
  3946  0011B2  5055               	movf	_uart_head,w,c
  3947  0011B4  0D01               	mullw	1
  3948  0011B6  0E80               	movlw	low _uart_buffer
  3949  0011B8  24F3               	addwf	prodl,w,c
  3950  0011BA  6ED9               	movwf	fsr2l,c
  3951  0011BC  0E00               	movlw	high _uart_buffer
  3952  0011BE  20F4               	addwfc	prodh,w,c
  3953  0011C0  6EDA               	movwf	fsr2h,c
  3954  0011C2  0E6C               	movlw	108
  3955  0011C4  18DE               	xorwf	postinc2,w,c
  3956  0011C6  B4D8               	btfsc	status,2,c
  3957  0011C8  D00C               	goto	l2859
  3958  0011CA  5055               	movf	_uart_head,w,c
  3959  0011CC  0D01               	mullw	1
  3960  0011CE  0E80               	movlw	low _uart_buffer
  3961  0011D0  24F3               	addwf	prodl,w,c
  3962  0011D2  6ED9               	movwf	fsr2l,c
  3963  0011D4  0E00               	movlw	high _uart_buffer
  3964  0011D6  20F4               	addwfc	prodh,w,c
  3965  0011D8  6EDA               	movwf	fsr2h,c
  3966  0011DA  0E4C               	movlw	76
  3967  0011DC  18DE               	xorwf	postinc2,w,c
  3968  0011DE  A4D8               	btfss	status,2,c
  3969  0011E0  D002               	goto	l2861
  3970  0011E2                     l2859:
  3971                           
  3972                           ;eusart.c: 54: ret = 0x04;
  3973  0011E2  0E04               	movlw	4
  3974  0011E4  6E2D               	movwf	getCommand@ret,c
  3975  0011E6                     l2861:
  3976                           
  3977                           ;eusart.c: 55: uart_head = (uart_head + 1) % 100;
  3978  0011E6  0E01               	movlw	1
  3979  0011E8  2455               	addwf	_uart_head,w,c
  3980  0011EA  6E26               	movwf	___awmod@dividend,c
  3981  0011EC  6A27               	clrf	___awmod@dividend+1,c
  3982  0011EE  0E00               	movlw	0
  3983  0011F0  2227               	addwfc	___awmod@dividend+1,f,c
  3984  0011F2  0E00               	movlw	0
  3985  0011F4  6E29               	movwf	___awmod@divisor+1,c
  3986  0011F6  0E64               	movlw	100
  3987  0011F8  6E28               	movwf	___awmod@divisor,c
  3988  0011FA  EC86  F00B         	call	___awmod	;wreg free
  3989  0011FE  5026               	movf	?___awmod,w,c
  3990  001200  6E55               	movwf	_uart_head,c
  3991                           
  3992                           ;eusart.c: 56: if (uart_buffer[uart_head] != 'l' && uart_buffer[uart_head] == 'L')
  3993  001202  5055               	movf	_uart_head,w,c
  3994  001204  0D01               	mullw	1
  3995  001206  0E80               	movlw	low _uart_buffer
  3996  001208  24F3               	addwf	prodl,w,c
  3997  00120A  6ED9               	movwf	fsr2l,c
  3998  00120C  0E00               	movlw	high _uart_buffer
  3999  00120E  20F4               	addwfc	prodh,w,c
  4000  001210  6EDA               	movwf	fsr2h,c
  4001  001212  0E6C               	movlw	108
  4002  001214  18DE               	xorwf	postinc2,w,c
  4003  001216  B4D8               	btfsc	status,2,c
  4004  001218  D00E               	goto	l2869
  4005  00121A  5055               	movf	_uart_head,w,c
  4006  00121C  0D01               	mullw	1
  4007  00121E  0E80               	movlw	low _uart_buffer
  4008  001220  24F3               	addwf	prodl,w,c
  4009  001222  6ED9               	movwf	fsr2l,c
  4010  001224  0E00               	movlw	high _uart_buffer
  4011  001226  20F4               	addwfc	prodh,w,c
  4012  001228  6EDA               	movwf	fsr2h,c
  4013  00122A  0E4C               	movlw	76
  4014  00122C  18DE               	xorwf	postinc2,w,c
  4015  00122E  A4D8               	btfss	status,2,c
  4016  001230  D002               	goto	l2869
  4017                           
  4018                           ;eusart.c: 57: ret = 0x00;
  4019  001232  0E00               	movlw	0
  4020  001234                     L3:
  4021  001234  6E2D               	movwf	getCommand@ret,c
  4022  001236                     l2869:
  4023                           
  4024                           ;eusart.c: 58: }
  4025                           ;eusart.c: 59: uart_head = (uart_head + 1) % 100;
  4026  001236  0E01               	movlw	1
  4027  001238  2455               	addwf	_uart_head,w,c
  4028  00123A  6E26               	movwf	___awmod@dividend,c
  4029  00123C  6A27               	clrf	___awmod@dividend+1,c
  4030  00123E  0E00               	movlw	0
  4031  001240  2227               	addwfc	___awmod@dividend+1,f,c
  4032  001242  0E00               	movlw	0
  4033  001244  6E29               	movwf	___awmod@divisor+1,c
  4034  001246  0E64               	movlw	100
  4035  001248  6E28               	movwf	___awmod@divisor,c
  4036  00124A  EC86  F00B         	call	___awmod	;wreg free
  4037  00124E  5026               	movf	?___awmod,w,c
  4038  001250  6E55               	movwf	_uart_head,c
  4039                           
  4040                           ;eusart.c: 60: return ret;
  4041  001252  502D               	movf	getCommand@ret,w,c
  4042  001254  0012               	return	
  4043  001256                     __end_of_getCommand:
  4044                           	opt stack 0
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           postinc0	equ	0xFEE
  4053                           wreg	equ	0xFE8
  4054                           indf2	equ	0xFDF
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           plusw2	equ	0xFDB
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function ___awmod *****************
  4063 ;; Defined at:
  4064 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  dividend        2   37[COMRAM] int 
  4067 ;;  divisor         2   39[COMRAM] int 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  sign            1   42[COMRAM] unsigned char 
  4070 ;;  counter         1   41[COMRAM] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  2   37[COMRAM] int 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4080 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;Total ram usage:        6 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    3
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_main
  4091 ;;		_myQueuePush
  4092 ;;		_myQueueCheck
  4093 ;;		_getCommand
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text34
  4098  00170C                     __ptext34:
  4099                           	opt stack 0
  4100  00170C                     ___awmod:
  4101                           	opt stack 26
  4102                           
  4103                           ;incstack = 0
  4104  00170C  0E00               	movlw	0
  4105  00170E  6E2B               	movwf	___awmod@sign,c
  4106  001710  AE27               	btfss	___awmod@dividend+1,7,c
  4107  001712  D006               	goto	l2631
  4108  001714  6C26               	negf	___awmod@dividend,c
  4109  001716  1E27               	comf	___awmod@dividend+1,f,c
  4110  001718  B0D8               	btfsc	status,0,c
  4111  00171A  2A27               	incf	___awmod@dividend+1,f,c
  4112  00171C  0E01               	movlw	1
  4113  00171E  6E2B               	movwf	___awmod@sign,c
  4114  001720                     l2631:
  4115  001720  AE29               	btfss	___awmod@divisor+1,7,c
  4116  001722  D004               	goto	l2635
  4117  001724  6C28               	negf	___awmod@divisor,c
  4118  001726  1E29               	comf	___awmod@divisor+1,f,c
  4119  001728  B0D8               	btfsc	status,0,c
  4120  00172A  2A29               	incf	___awmod@divisor+1,f,c
  4121  00172C                     l2635:
  4122  00172C  5028               	movf	___awmod@divisor,w,c
  4123  00172E  1029               	iorwf	___awmod@divisor+1,w,c
  4124  001730  B4D8               	btfsc	status,2,c
  4125  001732  D018               	goto	l2651
  4126  001734  0E01               	movlw	1
  4127  001736  6E2A               	movwf	___awmod@counter,c
  4128  001738  D004               	goto	l2641
  4129  00173A                     l2639:
  4130  00173A  90D8               	bcf	status,0,c
  4131  00173C  3628               	rlcf	___awmod@divisor,f,c
  4132  00173E  3629               	rlcf	___awmod@divisor+1,f,c
  4133  001740  2A2A               	incf	___awmod@counter,f,c
  4134  001742                     l2641:
  4135  001742  AE29               	btfss	___awmod@divisor+1,7,c
  4136  001744  D7FA               	goto	l2639
  4137  001746                     l2643:
  4138  001746  5028               	movf	___awmod@divisor,w,c
  4139  001748  5C26               	subwf	___awmod@dividend,w,c
  4140  00174A  5029               	movf	___awmod@divisor+1,w,c
  4141  00174C  5827               	subwfb	___awmod@dividend+1,w,c
  4142  00174E  A0D8               	btfss	status,0,c
  4143  001750  D004               	goto	l2647
  4144  001752  5028               	movf	___awmod@divisor,w,c
  4145  001754  5E26               	subwf	___awmod@dividend,f,c
  4146  001756  5029               	movf	___awmod@divisor+1,w,c
  4147  001758  5A27               	subwfb	___awmod@dividend+1,f,c
  4148  00175A                     l2647:
  4149  00175A  90D8               	bcf	status,0,c
  4150  00175C  3229               	rrcf	___awmod@divisor+1,f,c
  4151  00175E  3228               	rrcf	___awmod@divisor,f,c
  4152  001760  2E2A               	decfsz	___awmod@counter,f,c
  4153  001762  D7F1               	goto	l2643
  4154  001764                     l2651:
  4155  001764  502B               	movf	___awmod@sign,w,c
  4156  001766  B4D8               	btfsc	status,2,c
  4157  001768  D004               	goto	l2655
  4158  00176A  6C26               	negf	___awmod@dividend,c
  4159  00176C  1E27               	comf	___awmod@dividend+1,f,c
  4160  00176E  B0D8               	btfsc	status,0,c
  4161  001770  2A27               	incf	___awmod@dividend+1,f,c
  4162  001772                     l2655:
  4163  001772  C026  F026         	movff	___awmod@dividend,?___awmod
  4164  001776  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  4165  00177A  0012               	return	
  4166  00177C                     __end_of___awmod:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           indf2	equ	0xFDF
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           plusw2	equ	0xFDB
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _closeDoor *****************
  4186 ;; Defined at:
  4187 ;;		line 51 in file "servo.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    4
  4208 ;; This function calls:
  4209 ;;		_startTurning
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text35
  4216  001BB2                     __ptext35:
  4217                           	opt stack 0
  4218  001BB2                     _closeDoor:
  4219                           	opt stack 26
  4220                           
  4221                           ;servo.c: 52: startTurning(1);
  4222                           
  4223                           ;incstack = 0
  4224  001BB2  0E01               	movlw	1
  4225  001BB4  EC83  F00D         	call	_startTurning
  4226  001BB8  0012               	return		;funcret
  4227  001BBA                     __end_of_closeDoor:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           plusw2	equ	0xFDB
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _startTurning *****************
  4247 ;; Defined at:
  4248 ;;		line 5 in file "servo.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  dirct           1    wreg     unsigned char 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  dirct           1   37[COMRAM] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;Total ram usage:        1 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    3
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_openDoor
  4273 ;;		_closeDoor
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text36
  4278  001B06                     __ptext36:
  4279                           	opt stack 0
  4280  001B06                     _startTurning:
  4281                           	opt stack 26
  4282                           
  4283                           ;incstack = 0
  4284                           ;startTurning@dirct stored from wreg
  4285  001B06  6E26               	movwf	startTurning@dirct,c
  4286                           
  4287                           ;servo.c: 6: servo_direction = dirct;
  4288  001B08  C026  F04F         	movff	startTurning@dirct,_servo_direction
  4289  001B0C  6A50               	clrf	_servo_direction+1,c
  4290                           
  4291                           ;servo.c: 7: servo_counter = 0;
  4292  001B0E  0E00               	movlw	0
  4293  001B10  6E4A               	movwf	_servo_counter+1,c
  4294  001B12  0E00               	movlw	0
  4295  001B14  6E49               	movwf	_servo_counter,c
  4296  001B16  0012               	return		;funcret
  4297  001B18                     __end_of_startTurning:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           tblptrh	equ	0xFF7
  4301                           tblptrl	equ	0xFF6
  4302                           tablat	equ	0xFF5
  4303                           prodh	equ	0xFF4
  4304                           prodl	equ	0xFF3
  4305                           intcon	equ	0xFF2
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           plusw2	equ	0xFDB
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _closeAirCondition *****************
  4317 ;; Defined at:
  4318 ;;		line 68 in file "eusart.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		None
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;Total ram usage:        0 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    3
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text37
  4347  001BBE                     __ptext37:
  4348                           	opt stack 0
  4349  001BBE                     _closeAirCondition:
  4350                           	opt stack 27
  4351                           
  4352                           ;eusart.c: 69: PORTBbits.RB7 = 0;
  4353                           
  4354                           ;incstack = 0
  4355  001BBE  9E81               	bcf	3969,7,c	;volatile
  4356  001BC0  0012               	return		;funcret
  4357  001BC2                     __end_of_closeAirCondition:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           intcon	equ	0xFF2
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           plusw2	equ	0xFDB
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function _InitApp *****************
  4377 ;; Defined at:
  4378 ;;		line 28 in file "user.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		None
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    3
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_main
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text38
  4407  001BC4                     __ptext38:
  4408                           	opt stack 0
  4409  001BC4                     _InitApp:
  4410                           	opt stack 27
  4411                           
  4412                           ;incstack = 0
  4413  001BC4  0012               	return		;funcret
  4414  001BC6                     __end_of_InitApp:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           postinc0	equ	0xFEE
  4424                           wreg	equ	0xFE8
  4425                           indf2	equ	0xFDF
  4426                           postinc2	equ	0xFDE
  4427                           postdec2	equ	0xFDD
  4428                           plusw2	equ	0xFDB
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _ConfigureOscillator *****************
  4434 ;; Defined at:
  4435 ;;		line 24 in file "system.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		None
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;Total ram usage:        0 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    3
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_main
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text39
  4464  001BC6                     __ptext39:
  4465                           	opt stack 0
  4466  001BC6                     _ConfigureOscillator:
  4467                           	opt stack 27
  4468                           
  4469                           ;incstack = 0
  4470  001BC6  0012               	return		;funcret
  4471  001BC8                     __end_of_ConfigureOscillator:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           intcon	equ	0xFF2
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           indf2	equ	0xFDF
  4483                           postinc2	equ	0xFDE
  4484                           postdec2	equ	0xFDD
  4485                           plusw2	equ	0xFDB
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function _low_isr *****************
  4491 ;; Defined at:
  4492 ;;		line 85 in file "interrupts.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		None
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;Total ram usage:       17 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    2
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		Interrupt level 1
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	intcodelo
  4521  000018                     __pintcodelo:
  4522                           	opt stack 0
  4523  000018                     _low_isr:
  4524                           	opt stack 24
  4525                           
  4526                           ;incstack = 0
  4527  000018  805A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4528  00001A  CFD8 F015          	movff	status,??_low_isr
  4529  00001E  CFE8 F016          	movff	wreg,??_low_isr+1
  4530  000022  CFE0 F017          	movff	bsr,??_low_isr+2
  4531  000026  CFFA F018          	movff	pclath,??_low_isr+3
  4532  00002A  CFFB F019          	movff	pclatu,??_low_isr+4
  4533  00002E  CFE9 F01A          	movff	fsr0l,??_low_isr+5
  4534  000032  CFEA F01B          	movff	fsr0h,??_low_isr+6
  4535  000036  CFE1 F01C          	movff	fsr1l,??_low_isr+7
  4536  00003A  CFE2 F01D          	movff	fsr1h,??_low_isr+8
  4537  00003E  CFD9 F01E          	movff	fsr2l,??_low_isr+9
  4538  000042  CFDA F01F          	movff	fsr2h,??_low_isr+10
  4539  000046  CFF3 F020          	movff	prodl,??_low_isr+11
  4540  00004A  CFF4 F021          	movff	prodh,??_low_isr+12
  4541  00004E  CFF6 F022          	movff	tblptrl,??_low_isr+13
  4542  000052  CFF7 F023          	movff	tblptrh,??_low_isr+14
  4543  000056  CFF8 F024          	movff	tblptru,??_low_isr+15
  4544  00005A  CFF5 F025          	movff	tablat,??_low_isr+16
  4545  00005E  C025  FFF5         	movff	??_low_isr+16,tablat
  4546  000062  C024  FFF8         	movff	??_low_isr+15,tblptru
  4547  000066  C023  FFF7         	movff	??_low_isr+14,tblptrh
  4548  00006A  C022  FFF6         	movff	??_low_isr+13,tblptrl
  4549  00006E  C021  FFF4         	movff	??_low_isr+12,prodh
  4550  000072  C020  FFF3         	movff	??_low_isr+11,prodl
  4551  000076  C01F  FFDA         	movff	??_low_isr+10,fsr2h
  4552  00007A  C01E  FFD9         	movff	??_low_isr+9,fsr2l
  4553  00007E  C01D  FFE2         	movff	??_low_isr+8,fsr1h
  4554  000082  C01C  FFE1         	movff	??_low_isr+7,fsr1l
  4555  000086  C01B  FFEA         	movff	??_low_isr+6,fsr0h
  4556  00008A  C01A  FFE9         	movff	??_low_isr+5,fsr0l
  4557  00008E  C019  FFFB         	movff	??_low_isr+4,pclatu
  4558  000092  C018  FFFA         	movff	??_low_isr+3,pclath
  4559  000096  C017  FFE0         	movff	??_low_isr+2,bsr
  4560  00009A  C016  FFE8         	movff	??_low_isr+1,wreg
  4561  00009E  C015  FFD8         	movff	??_low_isr,status
  4562  0000A2  905A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4563  0000A4  0010               	retfie	
  4564  0000A6                     __end_of_low_isr:
  4565                           	opt stack 0
  4566                           pclatu	equ	0xFFB
  4567                           pclath	equ	0xFFA
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           postinc0	equ	0xFEE
  4576                           fsr0h	equ	0xFEA
  4577                           fsr0l	equ	0xFE9
  4578                           wreg	equ	0xFE8
  4579                           fsr1h	equ	0xFE2
  4580                           fsr1l	equ	0xFE1
  4581                           bsr	equ	0xFE0
  4582                           indf2	equ	0xFDF
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           plusw2	equ	0xFDB
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function _high_isr *****************
  4591 ;; Defined at:
  4592 ;;		line 32 in file "interrupts.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;		None
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      void 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;Total ram usage:       14 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    1
  4613 ;; This function calls:
  4614 ;;		_servoInteruptions
  4615 ;;		_uartTX
  4616 ;;		i2___awmod
  4617 ;; This function is called by:
  4618 ;;		Interrupt level 2
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	intcode
  4623  000008                     __pintcode:
  4624                           	opt stack 0
  4625  000008                     _high_isr:
  4626                           	opt stack 24
  4627                           
  4628                           ;incstack = 0
  4629  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4630  00000A  EF0B  F00A         	goto	int_func
  4631                           pclatu	equ	0xFFB
  4632                           pclath	equ	0xFFA
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           postinc0	equ	0xFEE
  4641                           fsr0h	equ	0xFEA
  4642                           fsr0l	equ	0xFE9
  4643                           wreg	equ	0xFE8
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           bsr	equ	0xFE0
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           plusw2	equ	0xFDB
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655                           	psect	intcode_body
  4656  001416                     __pintcode_body:
  4657                           	opt stack 24
  4658  001416                     int_func:
  4659                           	opt stack 24
  4660  001416  CFFA F007          	movff	pclath,??_high_isr
  4661  00141A  CFFB F008          	movff	pclatu,??_high_isr+1
  4662  00141E  CFE9 F009          	movff	fsr0l,??_high_isr+2
  4663  001422  CFEA F00A          	movff	fsr0h,??_high_isr+3
  4664  001426  CFE1 F00B          	movff	fsr1l,??_high_isr+4
  4665  00142A  CFE2 F00C          	movff	fsr1h,??_high_isr+5
  4666  00142E  CFD9 F00D          	movff	fsr2l,??_high_isr+6
  4667  001432  CFDA F00E          	movff	fsr2h,??_high_isr+7
  4668  001436  CFF3 F00F          	movff	prodl,??_high_isr+8
  4669  00143A  CFF4 F010          	movff	prodh,??_high_isr+9
  4670  00143E  CFF6 F011          	movff	tblptrl,??_high_isr+10
  4671  001442  CFF7 F012          	movff	tblptrh,??_high_isr+11
  4672  001446  CFF8 F013          	movff	tblptru,??_high_isr+12
  4673  00144A  CFF5 F014          	movff	tablat,??_high_isr+13
  4674                           
  4675                           ;interrupts.c: 67: if (RCIE && RCIF) {
  4676  00144E  BA9D               	btfsc	3997,5,c	;volatile
  4677  001450  AA9E               	btfss	3998,5,c	;volatile
  4678  001452  D027               	goto	i2l2323
  4679                           
  4680                           ;interrupts.c: 68: uart_buffer[uart_tail] = RCREG;
  4681  001454  5054               	movf	_uart_tail,w,c
  4682  001456  0D01               	mullw	1
  4683  001458  0E80               	movlw	low _uart_buffer
  4684  00145A  24F3               	addwf	prodl,w,c
  4685  00145C  6ED9               	movwf	fsr2l,c
  4686  00145E  0E00               	movlw	high _uart_buffer
  4687  001460  20F4               	addwfc	prodh,w,c
  4688  001462  6EDA               	movwf	fsr2h,c
  4689  001464  CFAE FFDF          	movff	4014,indf2	;volatile
  4690                           
  4691                           ;interrupts.c: 69: uartTX(uart_buffer[uart_tail]);
  4692  001468  5054               	movf	_uart_tail,w,c
  4693  00146A  0D01               	mullw	1
  4694  00146C  0E80               	movlw	low _uart_buffer
  4695  00146E  24F3               	addwf	prodl,w,c
  4696  001470  6ED9               	movwf	fsr2l,c
  4697  001472  0E00               	movlw	high _uart_buffer
  4698  001474  20F4               	addwfc	prodh,w,c
  4699  001476  6EDA               	movwf	fsr2h,c
  4700  001478  50DF               	movf	indf2,w,c
  4701  00147A  ECBB  F00D         	call	_uartTX
  4702                           
  4703                           ;interrupts.c: 70: uart_tail = (1 + uart_tail) % 100;
  4704  00147E  0E01               	movlw	1
  4705  001480  2454               	addwf	_uart_tail,w,c
  4706  001482  6E01               	movwf	i2___awmod@dividend,c
  4707  001484  6A02               	clrf	i2___awmod@dividend+1,c
  4708  001486  0E00               	movlw	0
  4709  001488  2202               	addwfc	i2___awmod@dividend+1,f,c
  4710  00148A  0E00               	movlw	0
  4711  00148C  6E04               	movwf	i2___awmod@divisor+1,c
  4712  00148E  0E64               	movlw	100
  4713  001490  6E03               	movwf	i2___awmod@divisor,c
  4714  001492  ECBE  F00B         	call	i2___awmod	;wreg free
  4715  001496  5001               	movf	?i2___awmod,w,c
  4716  001498  6E54               	movwf	_uart_tail,c
  4717                           
  4718                           ;interrupts.c: 71: RC_FLAG = 1;
  4719  00149A  0E01               	movlw	1
  4720  00149C  6E56               	movwf	_RC_FLAG,c
  4721                           
  4722                           ;interrupts.c: 72: LATA2 = 1;
  4723  00149E  8489               	bsf	3977,2,c	;volatile
  4724                           
  4725                           ;interrupts.c: 73: RCIF = 0;
  4726  0014A0  9A9E               	bcf	3998,5,c	;volatile
  4727  0014A2                     i2l2323:
  4728                           
  4729                           ;interrupts.c: 74: }
  4730                           ;interrupts.c: 75: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  4731  0014A2  BAF2               	btfsc	intcon,5,c	;volatile
  4732  0014A4  A4F2               	btfss	intcon,2,c	;volatile
  4733  0014A6  D006               	goto	i2l43
  4734                           
  4735                           ;interrupts.c: 76: servoInteruptions();
  4736  0014A8  EC03  F00B         	call	_servoInteruptions	;wreg free
  4737                           
  4738                           ;interrupts.c: 77: INTCONbits.TMR0IF = 0;
  4739  0014AC  94F2               	bcf	intcon,2,c	;volatile
  4740                           
  4741                           ;interrupts.c: 78: TMR0H = 0xFF;
  4742  0014AE  68D7               	setf	4055,c	;volatile
  4743                           
  4744                           ;interrupts.c: 79: TMR0L = 0x80;
  4745  0014B0  0E80               	movlw	128
  4746  0014B2  6ED6               	movwf	4054,c	;volatile
  4747  0014B4                     i2l43:
  4748  0014B4  C014  FFF5         	movff	??_high_isr+13,tablat
  4749  0014B8  C013  FFF8         	movff	??_high_isr+12,tblptru
  4750  0014BC  C012  FFF7         	movff	??_high_isr+11,tblptrh
  4751  0014C0  C011  FFF6         	movff	??_high_isr+10,tblptrl
  4752  0014C4  C010  FFF4         	movff	??_high_isr+9,prodh
  4753  0014C8  C00F  FFF3         	movff	??_high_isr+8,prodl
  4754  0014CC  C00E  FFDA         	movff	??_high_isr+7,fsr2h
  4755  0014D0  C00D  FFD9         	movff	??_high_isr+6,fsr2l
  4756  0014D4  C00C  FFE2         	movff	??_high_isr+5,fsr1h
  4757  0014D8  C00B  FFE1         	movff	??_high_isr+4,fsr1l
  4758  0014DC  C00A  FFEA         	movff	??_high_isr+3,fsr0h
  4759  0014E0  C009  FFE9         	movff	??_high_isr+2,fsr0l
  4760  0014E4  C008  FFFB         	movff	??_high_isr+1,pclatu
  4761  0014E8  C007  FFFA         	movff	??_high_isr,pclath
  4762  0014EC  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4763  0014EE  0011               	retfie		f
  4764  0014F0                     __end_of_high_isr:
  4765                           	opt stack 0
  4766                           pclatu	equ	0xFFB
  4767                           pclath	equ	0xFFA
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           postinc0	equ	0xFEE
  4776                           fsr0h	equ	0xFEA
  4777                           fsr0l	equ	0xFE9
  4778                           wreg	equ	0xFE8
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           bsr	equ	0xFE0
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           postdec2	equ	0xFDD
  4785                           plusw2	equ	0xFDB
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function i2___awmod *****************
  4791 ;; Defined at:
  4792 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  dividend        2    0[COMRAM] int 
  4795 ;;  divisor         2    2[COMRAM] int 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  __awmod         1    5[COMRAM] unsigned char 
  4798 ;;  __awmod         1    4[COMRAM] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  2    0[COMRAM] int 
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4808 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;Total ram usage:        6 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_high_isr
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text42
  4822  00177C                     __ptext42:
  4823                           	opt stack 0
  4824  00177C                     i2___awmod:
  4825                           	opt stack 24
  4826                           
  4827                           ;incstack = 0
  4828  00177C  0E00               	movlw	0
  4829  00177E  6E06               	movwf	i2___awmod@sign,c
  4830  001780  AE02               	btfss	i2___awmod@dividend+1,7,c
  4831  001782  D006               	goto	i2l2279
  4832  001784  6C01               	negf	i2___awmod@dividend,c
  4833  001786  1E02               	comf	i2___awmod@dividend+1,f,c
  4834  001788  B0D8               	btfsc	status,0,c
  4835  00178A  2A02               	incf	i2___awmod@dividend+1,f,c
  4836  00178C  0E01               	movlw	1
  4837  00178E  6E06               	movwf	i2___awmod@sign,c
  4838  001790                     i2l2279:
  4839  001790  AE04               	btfss	i2___awmod@divisor+1,7,c
  4840  001792  D004               	goto	i2l2283
  4841  001794  6C03               	negf	i2___awmod@divisor,c
  4842  001796  1E04               	comf	i2___awmod@divisor+1,f,c
  4843  001798  B0D8               	btfsc	status,0,c
  4844  00179A  2A04               	incf	i2___awmod@divisor+1,f,c
  4845  00179C                     i2l2283:
  4846  00179C  5003               	movf	i2___awmod@divisor,w,c
  4847  00179E  1004               	iorwf	i2___awmod@divisor+1,w,c
  4848  0017A0  B4D8               	btfsc	status,2,c
  4849  0017A2  D018               	goto	i2l2299
  4850  0017A4  0E01               	movlw	1
  4851  0017A6  6E05               	movwf	i2___awmod@counter,c
  4852  0017A8  D004               	goto	i2l2289
  4853  0017AA                     i2l2287:
  4854  0017AA  90D8               	bcf	status,0,c
  4855  0017AC  3603               	rlcf	i2___awmod@divisor,f,c
  4856  0017AE  3604               	rlcf	i2___awmod@divisor+1,f,c
  4857  0017B0  2A05               	incf	i2___awmod@counter,f,c
  4858  0017B2                     i2l2289:
  4859  0017B2  AE04               	btfss	i2___awmod@divisor+1,7,c
  4860  0017B4  D7FA               	goto	i2l2287
  4861  0017B6                     i2l2291:
  4862  0017B6  5003               	movf	i2___awmod@divisor,w,c
  4863  0017B8  5C01               	subwf	i2___awmod@dividend,w,c
  4864  0017BA  5004               	movf	i2___awmod@divisor+1,w,c
  4865  0017BC  5802               	subwfb	i2___awmod@dividend+1,w,c
  4866  0017BE  A0D8               	btfss	status,0,c
  4867  0017C0  D004               	goto	i2l2295
  4868  0017C2  5003               	movf	i2___awmod@divisor,w,c
  4869  0017C4  5E01               	subwf	i2___awmod@dividend,f,c
  4870  0017C6  5004               	movf	i2___awmod@divisor+1,w,c
  4871  0017C8  5A02               	subwfb	i2___awmod@dividend+1,f,c
  4872  0017CA                     i2l2295:
  4873  0017CA  90D8               	bcf	status,0,c
  4874  0017CC  3204               	rrcf	i2___awmod@divisor+1,f,c
  4875  0017CE  3203               	rrcf	i2___awmod@divisor,f,c
  4876  0017D0  2E05               	decfsz	i2___awmod@counter,f,c
  4877  0017D2  D7F1               	goto	i2l2291
  4878  0017D4                     i2l2299:
  4879  0017D4  5006               	movf	i2___awmod@sign,w,c
  4880  0017D6  B4D8               	btfsc	status,2,c
  4881  0017D8  D004               	goto	i2l2303
  4882  0017DA  6C01               	negf	i2___awmod@dividend,c
  4883  0017DC  1E02               	comf	i2___awmod@dividend+1,f,c
  4884  0017DE  B0D8               	btfsc	status,0,c
  4885  0017E0  2A02               	incf	i2___awmod@dividend+1,f,c
  4886  0017E2                     i2l2303:
  4887  0017E2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4888  0017E6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4889  0017EA  0012               	return	
  4890  0017EC                     __end_ofi2___awmod:
  4891                           	opt stack 0
  4892                           pclatu	equ	0xFFB
  4893                           pclath	equ	0xFFA
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           postinc0	equ	0xFEE
  4902                           fsr0h	equ	0xFEA
  4903                           fsr0l	equ	0xFE9
  4904                           wreg	equ	0xFE8
  4905                           fsr1h	equ	0xFE2
  4906                           fsr1l	equ	0xFE1
  4907                           bsr	equ	0xFE0
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           plusw2	equ	0xFDB
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _uartTX *****************
  4917 ;; Defined at:
  4918 ;;		line 29 in file "eusart.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  data            1    wreg     unsigned char 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  data            1    0[COMRAM] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;Total ram usage:        1 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_high_isr
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text43
  4946  001B76                     __ptext43:
  4947                           	opt stack 0
  4948  001B76                     _uartTX:
  4949                           	opt stack 24
  4950                           
  4951                           ;incstack = 0
  4952                           ;uartTX@data stored from wreg
  4953  001B76  6E01               	movwf	uartTX@data,c
  4954                           
  4955                           ;eusart.c: 30: TXREG = data;
  4956  001B78  C001  FFAD         	movff	uartTX@data,4013	;volatile
  4957  001B7C                     i2l484:
  4958  001B7C  B2AC               	btfsc	4012,1,c	;volatile
  4959  001B7E  0012               	return	
  4960  001B80  D7FD               	goto	i2l484
  4961  001B82                     __end_of_uartTX:
  4962                           	opt stack 0
  4963                           pclatu	equ	0xFFB
  4964                           pclath	equ	0xFFA
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           postinc0	equ	0xFEE
  4973                           fsr0h	equ	0xFEA
  4974                           fsr0l	equ	0xFE9
  4975                           wreg	equ	0xFE8
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           bsr	equ	0xFE0
  4979                           indf2	equ	0xFDF
  4980                           postinc2	equ	0xFDE
  4981                           postdec2	equ	0xFDD
  4982                           plusw2	equ	0xFDB
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _servoInteruptions *****************
  4988 ;; Defined at:
  4989 ;;		line 10 in file "servo.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_high_isr
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text44
  5017  001606                     __ptext44:
  5018                           	opt stack 0
  5019  001606                     _servoInteruptions:
  5020                           	opt stack 24
  5021                           
  5022                           ;servo.c: 12: if(onCounter != 0 || offCounter != 0){
  5023                           
  5024                           ;incstack = 0
  5025  001606  504D               	movf	_onCounter,w,c
  5026  001608  104E               	iorwf	_onCounter+1,w,c
  5027  00160A  A4D8               	btfss	status,2,c
  5028  00160C  D004               	goto	i2l2021
  5029  00160E  504B               	movf	_offCounter,w,c
  5030  001610  104C               	iorwf	_offCounter+1,w,c
  5031  001612  B4D8               	btfsc	status,2,c
  5032  001614  D00E               	goto	i2l2033
  5033  001616                     i2l2021:
  5034                           
  5035                           ;servo.c: 13: if(onCounter != 0){
  5036  001616  504D               	movf	_onCounter,w,c
  5037  001618  104E               	iorwf	_onCounter+1,w,c
  5038  00161A  B4D8               	btfsc	status,2,c
  5039  00161C  D005               	goto	i2l2027
  5040                           
  5041                           ;servo.c: 14: onCounter--;
  5042  00161E  064D               	decf	_onCounter,f,c
  5043  001620  A0D8               	btfss	status,0,c
  5044  001622  064E               	decf	_onCounter+1,f,c
  5045                           
  5046                           ;servo.c: 15: PORTCbits.RC2 = 1;
  5047  001624  8482               	bsf	3970,2,c	;volatile
  5048                           
  5049                           ;servo.c: 16: }
  5050  001626  0012               	return	
  5051  001628                     i2l2027:
  5052                           
  5053                           ;servo.c: 17: else{
  5054                           ;servo.c: 18: offCounter--;
  5055  001628  064B               	decf	_offCounter,f,c
  5056  00162A  A0D8               	btfss	status,0,c
  5057  00162C  064C               	decf	_offCounter+1,f,c
  5058                           
  5059                           ;servo.c: 19: PORTCbits.RC2 = 0;
  5060  00162E  9482               	bcf	3970,2,c	;volatile
  5061                           
  5062                           ;servo.c: 20: }
  5063                           ;servo.c: 21: return;
  5064  001630  0012               	return	
  5065  001632                     i2l2033:
  5066                           
  5067                           ;servo.c: 22: }
  5068                           ;servo.c: 23: if(servo_counter < 45){
  5069  001632  504A               	movf	_servo_counter+1,w,c
  5070  001634  E12A               	bnz	i2l435
  5071  001636  0E2D               	movlw	45
  5072  001638  5C49               	subwf	_servo_counter,w,c
  5073  00163A  B0D8               	btfsc	status,0,c
  5074  00163C  0012               	return	
  5075                           
  5076                           ;servo.c: 24: servo_counter++;
  5077  00163E  4A49               	infsnz	_servo_counter,f,c
  5078  001640  2A4A               	incf	_servo_counter+1,f,c
  5079                           
  5080                           ;servo.c: 25: if(servo_direction == 3){
  5081  001642  0E03               	movlw	3
  5082  001644  184F               	xorwf	_servo_direction,w,c
  5083  001646  1050               	iorwf	_servo_direction+1,w,c
  5084  001648  A4D8               	btfss	status,2,c
  5085  00164A  D009               	goto	i2l2041
  5086                           
  5087                           ;servo.c: 26: onCounter = 5;
  5088  00164C  0E00               	movlw	0
  5089  00164E  6E4E               	movwf	_onCounter+1,c
  5090  001650  0E05               	movlw	5
  5091  001652  6E4D               	movwf	_onCounter,c
  5092                           
  5093                           ;servo.c: 27: offCounter = 15;
  5094  001654  0E00               	movlw	0
  5095  001656  6E4C               	movwf	_offCounter+1,c
  5096  001658  0E0F               	movlw	15
  5097  00165A  6E4B               	movwf	_offCounter,c
  5098                           
  5099                           ;servo.c: 28: }
  5100  00165C  0012               	return	
  5101  00165E                     i2l2041:
  5102                           
  5103                           ;servo.c: 29: else if(servo_direction == 1){
  5104  00165E  044F               	decf	_servo_direction,w,c
  5105  001660  1050               	iorwf	_servo_direction+1,w,c
  5106  001662  A4D8               	btfss	status,2,c
  5107  001664  D009               	goto	i2l2045
  5108                           
  5109                           ;servo.c: 30: onCounter = 11;
  5110  001666  0E00               	movlw	0
  5111  001668  6E4E               	movwf	_onCounter+1,c
  5112  00166A  0E0B               	movlw	11
  5113  00166C  6E4D               	movwf	_onCounter,c
  5114                           
  5115                           ;servo.c: 31: offCounter = 9;
  5116  00166E  0E00               	movlw	0
  5117  001670  6E4C               	movwf	_offCounter+1,c
  5118  001672  0E09               	movlw	9
  5119  001674  6E4B               	movwf	_offCounter,c
  5120                           
  5121                           ;servo.c: 32: }
  5122  001676  0012               	return	
  5123  001678                     i2l2045:
  5124                           
  5125                           ;servo.c: 33: else{
  5126                           ;servo.c: 34: onCounter = 8;
  5127  001678  0E00               	movlw	0
  5128  00167A  6E4E               	movwf	_onCounter+1,c
  5129  00167C  0E08               	movlw	8
  5130  00167E  6E4D               	movwf	_onCounter,c
  5131                           
  5132                           ;servo.c: 35: offCounter = 12;
  5133  001680  0E00               	movlw	0
  5134  001682  6E4C               	movwf	_offCounter+1,c
  5135  001684  0E0C               	movlw	12
  5136  001686  6E4B               	movwf	_offCounter,c
  5137  001688  0012               	return	
  5138  00168A                     i2l435:
  5139  00168A  0012               	return		;funcret
  5140  00168C                     __end_of_servoInteruptions:
  5141                           	opt stack 0
  5142                           pclatu	equ	0xFFB
  5143                           pclath	equ	0xFFA
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           intcon	equ	0xFF2
  5151                           postinc0	equ	0xFEE
  5152                           fsr0h	equ	0xFEA
  5153                           fsr0l	equ	0xFE9
  5154                           wreg	equ	0xFE8
  5155                           fsr1h	equ	0xFE2
  5156                           fsr1l	equ	0xFE1
  5157                           bsr	equ	0xFE0
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           plusw2	equ	0xFDB
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8
  5165                           pclatu	equ	0xFFB
  5166                           pclath	equ	0xFFA
  5167                           tblptru	equ	0xFF8
  5168                           tblptrh	equ	0xFF7
  5169                           tblptrl	equ	0xFF6
  5170                           tablat	equ	0xFF5
  5171                           prodh	equ	0xFF4
  5172                           prodl	equ	0xFF3
  5173                           intcon	equ	0xFF2
  5174                           postinc0	equ	0xFEE
  5175                           fsr0h	equ	0xFEA
  5176                           fsr0l	equ	0xFE9
  5177                           wreg	equ	0xFE8
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           bsr	equ	0xFE0
  5181                           indf2	equ	0xFDF
  5182                           postinc2	equ	0xFDE
  5183                           postdec2	equ	0xFDD
  5184                           plusw2	equ	0xFDB
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189                           	psect	rparam
  5190  0000                     pclatu	equ	0xFFB
  5191                           pclath	equ	0xFFA
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           postinc0	equ	0xFEE
  5200                           fsr0h	equ	0xFEA
  5201                           fsr0l	equ	0xFE9
  5202                           wreg	equ	0xFE8
  5203                           fsr1h	equ	0xFE2
  5204                           fsr1l	equ	0xFE1
  5205                           bsr	equ	0xFE0
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214                           	psect	temp
  5215  00005A                     btemp:
  5216                           	opt stack 0
  5217  00005A                     	ds	1
  5218  0000                     int$flags	set	btemp
  5219                           pclatu	equ	0xFFB
  5220                           pclath	equ	0xFFA
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           postinc0	equ	0xFEE
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           bsr	equ	0xFE0
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           plusw2	equ	0xFDB
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        2
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     48      89
    BANK0           128     22     127
    BANK1           256      5       5
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    lcdWriteString@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_lcdWriteInt
    _readZ->_readDataByte
    _readGesture->_readDataByte
    _readDataByte->_writeDataByte
    _writeDataByte->_sendByte
    _openDoor->_startTurning
    _myQueuePush->___awmod
    _myQueueCheck->___awmod
    _moreLight->_dutyCycleDown
    _dutyCycleDown->_setDutyCycle
    _lightSwitch->_initQueue
    _dutyCycleSet->_setDutyCycle
    _dutyCycleClear->_setDutyCycle
    _dutyCycleUp->_setDutyCycle
    _lcdWriteString->_lcdWriteChar
    _lcdWriteInt->_lcdWriteUI
    _lcdWriteUI->___lwdiv
    _getCommand->___awmod
    _closeDoor->_startTurning

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->i2___awmod

Critical Paths under _main in BANK0

    _lcdWriteInt->_lcdWriteUI

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10741
                                              0 BANK1      5     5      0
                _ConfigureOscillator
                            _InitApp
                            ___awmod
                  _closeAirCondition
                          _closeDoor
                         _getCommand
                            _initLCD
                            _initPWM
                          _initQueue
                           _initUART
                       _lcdWriteChar
                        _lcdWriteInt
                     _lcdWriteString
                          _lessLight
                        _lightSwitch
                          _moreLight
                       _myQueueCheck
                        _myQueuePush
                   _openAirCondition
                           _openDoor
                        _readGesture
                              _readZ
 ---------------------------------------------------------------------------------
 (1) _readZ                                                1     1      0     858
                                             43 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (1) _readGesture                                          1     1      0     858
                                             43 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (2) _readDataByte                                         3     2      1     824
                                             40 COMRAM     3     2      1
                         _I2CRestart
                        _receiveByte
                           _sendByte
                      _writeDataByte
 ---------------------------------------------------------------------------------
 (3) _writeDataByte                                        2     1      1     170
                                             38 COMRAM     2     1      1
                            _I2CInit
                           _I2CStart
                           _sendByte
 ---------------------------------------------------------------------------------
 (4) _sendByte                                             1     1      0      31
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _receiveByte                                          1     1      0      34
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _openDoor                                             0     0      0      31
                       _startTurning
 ---------------------------------------------------------------------------------
 (1) _openAirCondition                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myQueuePush                                          2     0      2    1703
                                             43 COMRAM     2     0      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _myQueueCheck                                         6     4      2    1694
                                             43 COMRAM     4     2      2
                                              0 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _moreLight                                            0     0      0      68
                      _dutyCycleDown
 ---------------------------------------------------------------------------------
 (2) _dutyCycleDown                                        6     6      0      68
                                             38 COMRAM     6     6      0
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lightSwitch                                          0     0      0     161
                     _dutyCycleClear
                       _dutyCycleSet
                          _initQueue
 ---------------------------------------------------------------------------------
 (2) _initQueue                                            2     2      0      99
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dutyCycleSet                                         0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (2) _dutyCycleClear                                       0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lessLight                                            0     0      0      31
                        _dutyCycleUp
 ---------------------------------------------------------------------------------
 (2) _dutyCycleUp                                          0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (3) _setDutyCycle                                         1     1      0      31
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       6     4      2     346
                                             39 COMRAM     6     4      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdWriteInt                                          2     0      2    1421
                                             46 COMRAM     2     0      2
                       _lcdWriteChar
                         _lcdWriteUI
 ---------------------------------------------------------------------------------
 (2) _lcdWriteUI                                          24    22      2    1186
                                             44 COMRAM     2     0      2
                                              0 BANK0     22    22      0
                            ___lwdiv
                            ___lwmod
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _lcdWriteChar                                         2     2      0      62
                                             37 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             37 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             37 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0       0
                                             37 COMRAM     1     1      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) _lcdEnable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getCommand                                           2     2      0    1650
                                             43 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1595
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _closeDoor                                            0     0      0      31
                       _startTurning
 ---------------------------------------------------------------------------------
 (2) _startTurning                                         1     1      0      31
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _closeAirCondition                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             20 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            14    14      0     370
                                              6 COMRAM    14    14      0
                  _servoInteruptions
                             _uartTX
                          i2___awmod
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _uartTX                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _servoInteruptions                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___awmod
   _closeAirCondition
   _closeDoor
     _startTurning
   _getCommand
     ___awmod
   _initLCD
     _lcdEnable
   _initPWM
   _initQueue
   _initUART
   _lcdWriteChar
     _lcdEnable
   _lcdWriteInt
     _lcdWriteChar
       _lcdEnable
     _lcdWriteUI
       ___lwdiv
       ___lwmod
       _lcdWriteChar
         _lcdEnable
   _lcdWriteString
     _lcdWriteChar
       _lcdEnable
   _lessLight
     _dutyCycleUp
       _setDutyCycle
   _lightSwitch
     _dutyCycleClear
       _setDutyCycle
     _dutyCycleSet
       _setDutyCycle
     _initQueue
   _moreLight
     _dutyCycleDown
       _setDutyCycle
   _myQueueCheck
     ___awmod
   _myQueuePush
     ___awmod
   _openAirCondition
   _openDoor
     _startTurning
   _readGesture
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte
   _readZ
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte

 _low_isr (ROOT)

 _high_isr (ROOT)
   _servoInteruptions
   _uartTX
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5       5       7        2.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     16      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     30      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DD      34        0.0%
DATA                 0      0      DD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Apr 28 16:50:08 2017

                 lcdWriteUI@i 00FD                            bsr 000FE0                   __CFG_BORV$3 000000  
         __size_of_I2CRestart 0008                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                 __CFG_WDT$ON 000000                           l405 19D0                           l282 1B8C  
                         l276 1B84                           l294 1B2C                           l288 1B40  
                         l926 1888                           l936 1914                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           _ack 0052  
             __end_of_I2CInit 1B52                  ___awmod@sign 002B                           prod 000FF3  
                         wreg 000FE8                 lcdWriteUI@num 002D                ??_lcdWriteChar 0026  
                 main@command 0103                          l2523 1856                          l2611 1834  
                        l2525 185E                          l2613 1838                          l2605 1818  
                        l2631 1720                          l2535 187E                          l2527 1862  
                        l2551 190A                          l2543 18EA                          l2607 1822  
                        l2641 1742                          l2545 18F2                          l2561 19B0  
                        l2609 182E                          l2801 1A2A                          l2643 1746  
                        l2651 1764                          l2635 172C                          l2547 18F6  
                        l2731 189C                          l2557 19A0                          l2655 1772  
                        l2647 175A                          l2639 173A                          l2823 1092  
                        l2831 10CA                          l2743 1A74                          l2735 18BC  
                        l2751 1696                          l2841 1146                          l2825 1096  
                        l2817 1046                          l2577 1550                          l2569 14FA  
                        l2761 16F8                          l2843 114A                          l2835 10FA  
                        l2579 156E                          l2755 16AC                          l2923 12F6  
                        l2915 12BC                          l2861 11E6                          l2853 11AE  
                        l2829 10C6                          l2597 1AE4                          l2765 1702  
                        l2855 11B2                          l2847 117A                          l2775 1AB2  
                        l2791 1A22                          l2783 1A1A                          l2951 1378  
                        l2943 1362                          l2919 12C4                          l2927 1302  
                        l2849 117E                          l2961 13B2                          l2953 138A  
                        l2945 136C                          l2859 11E2                          l2779 1ABA  
                        l2795 1A26                          l2787 1A1E                          l2963 13B8  
                        l2947 1372                          l2869 1236                          l2965 13BE  
                        l2973 13D0                          l2967 13C4                          l2959 13AC  
                        l2975 13FE                          l2969 13CA                          l2977 1402  
                        STR_1 100E                          STR_2 1001                          u2007 1354  
                        u2017 1398                          u2107 15FA                          u2027 140A  
                        u2037 19DC                          _LATB 000F8A                          u2047 19F2  
                        u2057 1A04                          u2067 1586                          u2077 15A8  
                        u1710 16EE                          u2087 15C0                          u2097 15DC  
                        u1987 1282                          _RCIE 007CED                          _RCIF 007CF5  
                        u1997 129E                          i2l43 14B4                          _TRMT 007D61  
                _startTurning 1B06              ??_dutyCycleClear 0027                          _main 1256  
                        _iter 0047                          _rate 0059                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 005A              __end_of_I2CStart 1B8A                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               __end_of_InitApp 1BC6  
                ?_readGesture 0001                  ?_lightSwitch 0001                lcdWriteInt@num 002F  
                       ?_main 0001               __end_of___awmod 177C                         _T0CON 000FD5  
                       _T2CON 000FCA                         _LATA2 007C4A               __end_of___lwdiv 1892  
             __end_of___lwmod 191E                         i2l435 168A                         i2l484 1B7C  
                       _RCREG 000FAE                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _SPBRG 000FAF                         _PORTB 000F81                         _PORTD 000F83  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TXREG 000FAD           _ConfigureOscillator 1BC6  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                  ?_dutyCycleUp 0001                 __CFG_WRTB$OFF 000000  
                       __addr 0051                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 1606                __CFG_EBTRB$OFF 000000               __end_of_initPWM 1B06  
                       _readZ 1B18               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5                         plusw2 000FDB                         status 000FD8  
                ?_receiveByte 0001            __size_ofi2___awmod 0070                __CFG_PBADEN$ON 000000  
        ?_ConfigureOscillator 0001               __initialization 191E                 ?_readDataByte 0029  
                __end_of_main 1416               lcdWriteUI@stack 00E9                     ??_I2CInit 0026  
              __CFG_OSC$RCIO6 000000                        ??_main 0100                 __activetblptr 000002  
            ??_lcdWriteString 002A                  ?_myQueuePush 002C                        ?_readZ 0001  
                      _CCPR2L 000FBB                  ??_I2CRestart 0026                        i2l2021 1616  
                      i2l2041 165E                        i2l2033 1632                        i2l2027 1628  
                      i2l2045 1678                        i2l2303 17E2                        i2l2323 14A2  
                      i2l2291 17B6                        i2l2283 179C                        i2l2295 17CA  
                      i2l2287 17AA                        i2l2279 1790                        i2l2289 17B2  
                      i2l2299 17D4                        _SPBRGH 000FB0                        _SSPBUF 000FC9  
                   ??_InitApp 0026         ??_ConfigureOscillator 0026              _openAirCondition 1BBA  
        __size_of_lcdWriteInt 0020                ??_readDataByte 002A                __CFG_XINST$OFF 000000  
               ?_dutyCycleSet 0001              __end_of_high_isr 14F0          __end_of_lcdWriteChar 1A0C  
              __CFG_STVREN$ON 000000                     ??___awmod 002A               lcdWriteString@i 002C  
            __end_of_initUART 1AA2                     ??___lwdiv 002A                     ??___lwmod 002A  
                      clear_0 193C                        clear_1 1948               ___awmod@divisor 0028  
                      _uartTX 1B76               ___awmod@counter 002A            __end_of_I2CRestart 1B92  
            __end_of_sendByte 1B46              __end_of_openDoor 1B9A                     ??_initLCD 0026  
                   ??_initPWM 0026                  __pdataCOMRAM 0058        __size_of_writeDataByte 0018  
           __end_ofi2___awmod 17EC                     ?_I2CStart 0001                  __mediumconst 0000  
                   ??_low_isr 0015                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                i2___awmod@sign 0006        __size_of_dutyCycleDown 0054  
                  __accesstop 0080       __end_of__initialization 194E                 ___rparam_used 000001  
              ??_dutyCycleSet 0027                __pcstackCOMRAM 0001                 __end_of_readZ 1B28  
          __size_of_lcdEnable 0008          __size_of_readGesture 0034          __size_of_lightSwitch 001E  
                  ??_I2CStart 0026            __size_of_closeDoor 0008                       ??_readZ 002C  
        __size_of_dutyCycleUp 0018                    __pbssBANK0 0080                 ?_setDutyCycle 0001  
               ?_myQueueCheck 002C            __size_of_initQueue 003A            __size_of_lessLight 000C  
               _writeDataByte 1AC0          __size_of_receiveByte 0010                 _dutyCycleDown 17EC  
                  _getCommand 1012            __size_of_moreLight 000C                       _CCP2CON 000FBA  
                     _I2CInit 1B46                       ?_uartTX 0001             startTurning@dirct 0026  
                  _lcdWriteUI 14F0                       _RC_DATA 0057                       _RC_FLAG 0056  
        __end_of_readDataByte 1A62          __size_of_myQueuePush 003C             _dutyCycleDown$670 002B  
            writeDataByte@reg 0027                     ?_high_isr 0001                ??_setDutyCycle 0026  
                   ?_initUART 0001                ??_myQueueCheck 002E                    _offCounter 004B  
           __end_of_lcdEnable 1BB2                ?_writeDataByte 0027                       _InitApp 1BC4  
       __size_of_lcdWriteChar 003A                     ?_sendByte 0001                     ?_openDoor 0001  
                     __Hparam 0000                       __Lparam 0000                ?_dutyCycleDown 0001  
           __end_of_closeDoor 1BBA                       ___awmod 170C                       ___lwdiv 1840  
                     ___lwmod 18DC                  __psmallconst 1000                       __pcinit 191E  
               setDutyCycle@x 0026                       __ramtop 1000                 myQueueCheck@i 00E9  
                     __ptext0 1256               __size_of_uartTX 000C                       __ptext1 1B18  
                     __ptext2 1A0C                       __ptext3 1A40                       __ptext4 1AC0  
                     __ptext5 1B38                       __ptext6 1B82                       __ptext7 1B46  
                     __ptext8 1B28                       __ptext9 1B8A                       _initLCD 157C  
                     _initPWM 1AF0             __end_of_initQueue 19D2             __end_of_lessLight 1B6A  
                   _T2CONbits 000FCA                       _myCount 0045      __end_of_openAirCondition 1BBE  
            ___awmod@dividend 0026                       _low_isr 0018          __end_of_dutyCycleSet 1BA2  
                     main@ges 0102                       main@pos 0104                    ??_high_isr 0007  
                _lcdWriteChar 19D2                __pintcode_body 1416             __end_of_moreLight 1B5E  
        end_of_initialization 194E                    ??_initUART 0026                 __Lmediumconst 0000  
                     int_func 1416              readDataByte@addr 002B              readDataByte@retc 002A  
                  ??_sendByte 0026                    ??_openDoor 0027            readGesture@gesture 002C  
                   _RCSTAbits 000FAB                       postdec2 000FDD                   ?_getCommand 0001  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_dutyCycleClear 0008  
                   _PORTBbits 000F81                     _PORTCbits 000F82                   ?_lcdWriteUI 002D  
                   _TRISCbits 000F94             __size_of_I2CStart 0008                     i2___awmod 177C  
 __end_of_ConfigureOscillator 1BC8               ??_writeDataByte 0028               receiveByte@retc 0026  
               ??_lcdWriteInt 0031                     _TXSTAbits 000FAC               ??_dutyCycleDown 0027  
                 _BAUDCONbits 000FB8                 __pidataCOMRAM 1BC2          __end_of_setDutyCycle 1B76  
        __end_of_myQueueCheck 170C         __size_of_readDataByte 0022               _servo_direction 004F  
              __end_of_uartTX 1B82           start_initialization 191E                    ?i2___awmod 0001  
         __size_of_getCommand 0244                 ?_startTurning 0001       __size_of_lcdWriteString 004A  
                  readZ@z_pos 002C           __size_of_lcdWriteUI 008C             lcdWriteChar@leter 0027  
                  initQueue@i 0026                  _readDataByte 1A40           __end_of_lcdWriteInt 1A82  
               ??_readGesture 002C              __CFG_LPT1OSC$OFF 000000                 ??_lightSwitch 0028  
                    ?_I2CInit 0001                      ??_uartTX 0001         __size_of_dutyCycleSet 0008  
                 __pbssCOMRAM 0031                 ??_dutyCycleUp 0027                 __pcstackBANK0 00E9  
               __pcstackBANK1 0100                ??_startTurning 0026             __size_of_high_isr 14E8  
               ??_receiveByte 0026             __size_of_initUART 0020                      ?_InitApp 0001  
            ___lwdiv@dividend 0026             __CFG_CCP2MX$PORTC 000000                     _lcdEnable 1BAA  
                _dutyCycleSet 1B9A                     __pintcode 0008             __size_of_sendByte 000E  
           __size_of_openDoor 0008                _dutyCycleClear 1BA2                      ?___awmod 0026  
                    ?___lwdiv 0026                      ?___lwmod 0026                     _closeDoor 1BB2  
                 __pintcodelo 0018                 getCommand@ret 002D                      ?_initLCD 0001  
                    ?_initPWM 0001                   __smallconst 1000                 ??_myQueuePush 002E  
         __end_of_readGesture 1A40                      _I2CStart 1B82                     _onCounter 004D  
         __end_of_lightSwitch 1AC0             ?_openAirCondition 0001                      ?_low_isr 0001  
                   _initQueue 1998              ___lwdiv@quotient 002B                     _lessLight 1B5E  
          ??_openAirCondition 0026                   ??i2___awmod 0005                __size_of_readZ 0010  
                  uartTX@data 0001           __end_of_dutyCycleUp 1AF0                  myQueuePush@x 002C  
                 _lcdWriteInt 1A62                     _moreLight 1B52                      _PIE1bits 000F9D  
             readDataByte@reg 0029        __end_of_dutyCycleClear 1BAA                      _PIR1bits 000F9E  
           _servoInteruptions 1606                    ?_lcdEnable 0001                     _valuePort 0053  
            __CFG_WDTPS$32768 000000         __size_of_setDutyCycle 000C                  ??_getCommand 002C  
       __size_of_myQueueCheck 0080                     _uart_head 0055           __end_of_receiveByte 1B38  
                   _uart_tail 0054            ?_servoInteruptions 0001             writeDataByte@addr 0028  
                  ?_closeDoor 0001              __size_of_I2CInit 000C             _closeAirCondition 1BBE  
         ??_servoInteruptions 0001                  ??_lcdWriteUI 002F            ?_closeAirCondition 0001  
                  ?_initQueue 0001                    ?_lessLight 0001            i2___awmod@dividend 0001  
                  _I2CRestart 1B8A           __end_of_myQueuePush 1998            __end_of_getCommand 1256  
         ??_closeAirCondition 0026                _lcdWriteString 1892                  _setDutyCycle 1B6A  
                _myQueueCheck 168C                    ?_moreLight 0001     __end_of_servoInteruptions 168C  
            __size_of_InitApp 0002                      __Hrparam 0000               ?_dutyCycleClear 0001  
                    __Lrparam 0000            __end_of_lcdWriteUI 157C            __CFG_BOREN$SBORDIS 000000  
                 _readGesture 1A0C              __size_of___awmod 0070          __end_of_startTurning 1B18  
                 _lightStatus 0058              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                 _lightSwitch 1AA2     __end_of_closeAirCondition 1BC2              __size_of_initLCD 008A  
            __size_of_initPWM 0016             lcdWriteString@str 0028                     sendByte@c 0026  
             ___lwdiv@divisor 0028                   _dutyCycleUp 1AD8               ___lwdiv@counter 002A  
            __size_of_low_isr 008E                      __ptext10 1B92                      __ptext11 1BBA  
                    __ptext20 1B5E                      __ptext12 195C                      __ptext21 1AD8  
                    __ptext13 168C                      __ptext30 1AF0                      __ptext22 1B6A  
                    __ptext14 1B52                      __ptext31 157C                      __ptext23 1892  
                    __ptext15 17EC                      __ptext32 1BAA                      __ptext24 1A62  
                    __ptext16 1AA2                      __ptext33 1012                      __ptext25 14F0  
                    __ptext17 1998                      __ptext42 177C                      __ptext34 170C  
                    __ptext26 19D2                      __ptext18 1B9A                      __ptext43 1B76  
                    __ptext35 1BB2                      __ptext27 18DC                      __ptext19 1BA2  
                    __ptext44 1606                      __ptext36 1B06                      __ptext28 1840  
                    __ptext37 1BBE                      __ptext29 1A82                      __ptext38 1BC4  
                    __ptext39 1BC6        __end_of_lcdWriteString 18DC                      _high_isr 0008  
                    _initUART 1A82                 __size_of_main 01C0         __end_of_writeDataByte 1AD8  
                 _receiveByte 1B28                      _sendByte 1B38                      _openDoor 1B92  
__size_of_ConfigureOscillator 0002         __end_of_dutyCycleDown 1840                   ??_lcdEnable 0026  
                    _my_stack 0031                      int$flags 005A                   ??_closeDoor 0027  
           i2___awmod@divisor 0003             i2___awmod@counter 0005                 _servo_counter 0049  
                  _INTCONbits 000FF2                   _myQueuePush 195C                   ??_initQueue 0026  
                 ??_lessLight 0027               ?_lcdWriteString 0028                   ?_I2CRestart 0001  
                    intlevel1 0000                      intlevel2 0000              ___lwmod@dividend 0026  
                 ??_moreLight 002D    __size_of_servoInteruptions 0086    __size_of_closeAirCondition 0004  
                 _uart_buffer 0080               ___lwmod@divisor 0028               ___lwmod@counter 002A  
                 _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5                 ?_lcdWriteChar 0001  
                ?_lcdWriteInt 002F     __size_of_openAirCondition 0004         __size_of_startTurning 0012  
