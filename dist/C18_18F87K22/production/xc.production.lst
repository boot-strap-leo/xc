

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 27 15:30:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18LF4620 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataCOMRAM
    92  00178C                     __pidataCOMRAM:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _lightStatus
    96  00178C  01                 	db	1
    97                           
    98                           ;initializer for _rate
    99  00178D  14                 	db	20
   100                           
   101                           	psect	idataBANK0
   102  0016F8                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for main@F2922
   106  0016F8  50                 	db	80
   107  0016F9  52                 	db	82
   108  0016FA  4F                 	db	79
   109  0016FB  47                 	db	71
   110  0016FC  52                 	db	82
   111  0016FD  41                 	db	65
   112  0016FE  4D                 	db	77
   113  0016FF  20                 	db	32
   114  001700  42                 	db	66
   115  001701  45                 	db	69
   116  001702  47                 	db	71
   117  001703  49                 	db	73
   118  001704  4E                 	db	78
   119  001705  00                 	db	0
   120  001706  00                 	db	0
   121  0000                     _T2CONbits	set	4042
   122  0000                     _CCPR2L	set	4027
   123  0000                     _PR2	set	4043
   124  0000                     _T2CON	set	4042
   125  0000                     _CCP2CON	set	4026
   126  0000                     _TRISCbits	set	3988
   127  0000                     _SSPBUF	set	4041
   128  0000                     _PIR1bits	set	3998
   129  0000                     _SSPCON2bits	set	4037
   130  0000                     _SSPCON1bits	set	4038
   131  0000                     _LATB	set	3978
   132  0000                     _PORTD	set	3971
   133  0000                     _PORTCbits	set	3970
   134  0000                     _T0CON	set	4053
   135  0000                     _PORTB	set	3969
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISD	set	3989
   138  0000                     _TRISA	set	3986
   139  0000                     _TRISB	set	3987
   140  0000                     _INTCONbits	set	4082
   141                           
   142                           	psect	smallconst
   143  001000                     __psmallconst:
   144                           	opt stack 0
   145  001000  00                 	db	0
   146  001001                     STR_2:
   147  001001  4C                 	db	76	;'L'
   148  001002  49                 	db	73	;'I'
   149  001003  47                 	db	71	;'G'
   150  001004  48                 	db	72	;'H'
   151  001005  54                 	db	84	;'T'
   152  001006  5F                 	db	95	;'_'
   153  001007  53                 	db	83	;'S'
   154  001008  57                 	db	87	;'W'
   155  001009  49                 	db	73	;'I'
   156  00100A  54                 	db	84	;'T'
   157  00100B  43                 	db	67	;'C'
   158  00100C  48                 	db	72	;'H'
   159  00100D  00                 	db	0
   160  00100E                     STR_1:
   161  00100E  20                 	db	32
   162  00100F  00                 	db	0
   163                           
   164                           ; #config settings
   165  001010  00                 	db	0	; dummy byte at the end
   166  0000                     
   167                           	psect	cinit
   168  001400                     __pcinit:
   169                           	opt stack 0
   170  001400                     start_initialization:
   171                           	opt stack 0
   172  001400                     __initialization:
   173                           	opt stack 0
   174                           
   175                           ; Initialize objects allocated to BANK0 (15 bytes)
   176                           ; load TBLPTR registers with __pidataBANK0
   177  001400  0EF8               	movlw	low __pidataBANK0
   178  001402  6EF6               	movwf	tblptrl,c
   179  001404  0E16               	movlw	high __pidataBANK0
   180  001406  6EF7               	movwf	tblptrh,c
   181  001408  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   182  00140A  6EF8               	movwf	tblptru,c
   183  00140C  EE00  F093         	lfsr	0,__pdataBANK0
   184  001410  EE10 F00F          	lfsr	1,15
   185  001414                     copy_data0:
   186  001414  0009               	tblrd		*+
   187  001416  CFF5 FFEE          	movff	tablat,postinc0
   188  00141A  50E5               	movf	postdec1,w,c
   189  00141C  50E1               	movf	fsr1l,w,c
   190  00141E  E1FA               	bnz	copy_data0
   191                           
   192                           ; Initialize objects allocated to COMRAM (2 bytes)
   193                           ; load TBLPTR registers with __pidataCOMRAM
   194  001420  0E8C               	movlw	low __pidataCOMRAM
   195  001422  6EF6               	movwf	tblptrl,c
   196  001424  0E17               	movlw	high __pidataCOMRAM
   197  001426  6EF7               	movwf	tblptrh,c
   198  001428  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   199  00142A  6EF8               	movwf	tblptru,c
   200  00142C  0009               	tblrd		*+	;fetch initializer
   201  00142E  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   202  001432  0009               	tblrd		*+	;fetch initializer
   203  001434  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   204                           
   205                           ; Clear objects allocated to COMRAM (25 bytes)
   206  001438  EE00  F043         	lfsr	0,__pbssCOMRAM
   207  00143C  0E19               	movlw	25
   208  00143E                     clear_0:
   209  00143E  6AEE               	clrf	postinc0,c
   210  001440  06E8               	decf	wreg,f,c
   211  001442  E1FD               	bnz	clear_0
   212  001444                     end_of_initialization:
   213                           	opt stack 0
   214  001444                     __end_of__initialization:
   215                           	opt stack 0
   216  001444  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   217  001446  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   218  001448  0E00               	movlw	low (__Lmediumconst shr (0+16))
   219  00144A  6EF8               	movwf	tblptru,c
   220  00144C  0100               	movlb	0
   221  00144E  EF09  F008         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec1	equ	0xFE5
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	bssCOMRAM
   232  000043                     __pbssCOMRAM:
   233                           	opt stack 0
   234  000043                     _my_stack:
   235                           	opt stack 0
   236  000043                     	ds	20
   237  000057                     _iter:
   238                           	opt stack 0
   239  000057                     	ds	2
   240  000059                     __addr:
   241                           	opt stack 0
   242  000059                     	ds	1
   243  00005A                     _ack:
   244                           	opt stack 0
   245  00005A                     	ds	1
   246  00005B                     _valuePort:
   247                           	opt stack 0
   248  00005B                     	ds	1
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec1	equ	0xFE5
   256                           fsr1l	equ	0xFE1
   257                           
   258                           	psect	dataCOMRAM
   259  00005C                     __pdataCOMRAM:
   260                           	opt stack 0
   261  00005C                     _lightStatus:
   262                           	opt stack 0
   263  00005C                     	ds	1
   264  00005D                     _rate:
   265                           	opt stack 0
   266  00005D                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	dataBANK0
   277  000093                     __pdataBANK0:
   278                           	opt stack 0
   279  000093                     main@F2922:
   280                           	opt stack 0
   281  000093                     	ds	15
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291                           	psect	cstackBANK0
   292  000080                     __pcstackBANK0:
   293                           	opt stack 0
   294  000080                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x0
   297  000080                     	ds	2
   298  000082                     main@str:
   299                           	opt stack 0
   300                           
   301                           ; 15 bytes @ 0x2
   302  000082                     	ds	15
   303  000091                     main@ges:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x11
   307  000091                     	ds	1
   308  000092                     main@pos:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x12
   312  000092                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	cstackCOMRAM
   323  000001                     __pcstackCOMRAM:
   324                           	opt stack 0
   325  000001                     ??_high_isr:
   326  000001                     
   327                           ; 2 bytes @ 0x0
   328  000001                     	ds	16
   329  000011                     ??_low_isr:
   330                           
   331                           ; 1 bytes @ 0x10
   332  000011                     	ds	17
   333  000022                     ??_initLCD:
   334  000022                     ??_lcdWriteChar:
   335  000022                     ?___awmod:
   336                           	opt stack 0
   337  000022                     ?___lwdiv:
   338                           	opt stack 0
   339  000022                     ?___lwmod:
   340                           	opt stack 0
   341  000022                     sendByte@c:
   342                           	opt stack 0
   343  000022                     receiveByte@retc:
   344                           	opt stack 0
   345  000022                     setDutyCycle@x:
   346                           	opt stack 0
   347  000022                     initQueue@i:
   348                           	opt stack 0
   349  000022                     ___awmod@dividend:
   350                           	opt stack 0
   351  000022                     ___lwdiv@dividend:
   352                           	opt stack 0
   353  000022                     ___lwmod@dividend:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x21
   357  000022                     	ds	1
   358  000023                     lcdWriteChar@leter:
   359                           	opt stack 0
   360  000023                     writeDataByte@reg:
   361                           	opt stack 0
   362  000023                     _dutyCycleUp$589:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x22
   366  000023                     	ds	1
   367  000024                     writeDataByte@addr:
   368                           	opt stack 0
   369  000024                     lcdWriteString@str:
   370                           	opt stack 0
   371  000024                     ___awmod@divisor:
   372                           	opt stack 0
   373  000024                     ___lwdiv@divisor:
   374                           	opt stack 0
   375  000024                     ___lwmod@divisor:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x23
   379  000024                     	ds	1
   380  000025                     readDataByte@reg:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x24
   384  000025                     	ds	1
   385  000026                     ??_lcdWriteString:
   386  000026                     readDataByte@retc:
   387                           	opt stack 0
   388  000026                     ___awmod@counter:
   389                           	opt stack 0
   390  000026                     ___lwdiv@counter:
   391                           	opt stack 0
   392  000026                     ___lwmod@counter:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x25
   396  000026                     	ds	1
   397  000027                     readDataByte@addr:
   398                           	opt stack 0
   399  000027                     ___awmod@sign:
   400                           	opt stack 0
   401  000027                     ___lwdiv@quotient:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x26
   405  000027                     	ds	1
   406  000028                     ?_myQueueCheck:
   407                           	opt stack 0
   408  000028                     readZ@z_pos:
   409                           	opt stack 0
   410  000028                     readGesture@gesture:
   411                           	opt stack 0
   412  000028                     lcdWriteString@i:
   413                           	opt stack 0
   414  000028                     myQueuePush@x:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x27
   418  000028                     	ds	1
   419  000029                     lcdWriteUI@num:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x28
   423  000029                     	ds	1
   424  00002A                     
   425                           ; 1 bytes @ 0x29
   426  00002A                     	ds	1
   427  00002B                     lcdWriteUI@stack:
   428                           	opt stack 0
   429                           
   430                           ; 20 bytes @ 0x2A
   431  00002B                     	ds	1
   432  00002C                     myQueueCheck@i:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x2B
   436  00002C                     	ds	19
   437  00003F                     lcdWriteUI@i:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x3E
   441  00003F                     	ds	2
   442  000041                     lcdWriteInt@num:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x40
   446  000041                     	ds	2
   447  000043                     tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           ; 1 bytes @ 0x42
   457 ;;
   458 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   459 ;;
   460 ;; *************** function _main *****************
   461 ;; Defined at:
   462 ;;		line 44 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  ges             1   17[BANK0 ] enum E2865
   467 ;;  str            15    2[BANK0 ] unsigned char [15]
   468 ;;  pos             1   18[BANK0 ] unsigned char 
   469 ;; Return value:  Size  Location     Type
   470 ;;                  2   75[None  ] int 
   471 ;; Registers used:
   472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;Total ram usage:       19 bytes
   483 ;; Hardware stack levels required when called:    6
   484 ;; This function calls:
   485 ;;		_ConfigureOscillator
   486 ;;		_InitApp
   487 ;;		_initLCD
   488 ;;		_initPWM
   489 ;;		_initQueue
   490 ;;		_lcdWriteInt
   491 ;;		_lcdWriteString
   492 ;;		_ledOff_1
   493 ;;		_ledOn_1
   494 ;;		_lessLight
   495 ;;		_lightSwitch
   496 ;;		_moreLight
   497 ;;		_myQueueCheck
   498 ;;		_myQueuePush
   499 ;;		_readGesture
   500 ;;		_readZ
   501 ;; This function is called by:
   502 ;;		Startup code after reset
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text0
   507  001012                     __ptext0:
   508                           	opt stack 0
   509  001012                     _main:
   510                           	opt stack 25
   511                           
   512                           ;main.c: 47: ConfigureOscillator();
   513                           
   514                           ;incstack = 0
   515  001012  ECC8  F00B         	call	_ConfigureOscillator	;wreg free
   516                           
   517                           ;main.c: 50: InitApp();
   518  001016  ECC7  F00B         	call	_InitApp	;wreg free
   519                           
   520                           ;main.c: 52: TRISB=0X00;
   521  00101A  0E00               	movlw	0
   522  00101C  6E93               	movwf	3987,c	;volatile
   523                           
   524                           ;main.c: 53: TRISA=0XFF;
   525  00101E  6892               	setf	3986,c	;volatile
   526                           
   527                           ;main.c: 54: TRISD = 0x00;
   528  001020  0E00               	movlw	0
   529  001022  6E95               	movwf	3989,c	;volatile
   530                           
   531                           ;main.c: 55: TRISC = 0b00011000;
   532  001024  0E18               	movlw	24
   533  001026  6E94               	movwf	3988,c	;volatile
   534                           
   535                           ;main.c: 56: PORTB=0X00;
   536  001028  0E00               	movlw	0
   537  00102A  6E81               	movwf	3969,c	;volatile
   538                           
   539                           ;main.c: 58: T0CON = 0b10001000;
   540  00102C  0E88               	movlw	136
   541  00102E  6ED5               	movwf	4053,c	;volatile
   542                           
   543                           ;main.c: 59: INTCONbits.TMR0IE = 1;
   544  001030  8AF2               	bsf	intcon,5,c	;volatile
   545                           
   546                           ;main.c: 62: _delay((unsigned long)((70)*(8000000/4000.0)));
   547  001032  0EB6               	movlw	182
   548  001034  0100               	movlb	0	; () banked
   549  001036  6F80               	movwf	??_main& (0+255),b
   550  001038  0ED0               	movlw	208
   551  00103A                     u1047:
   552  00103A  2EE8               	decfsz	wreg,f,c
   553  00103C  D7FE               	bra	u1047
   554  00103E  2F80               	decfsz	??_main& (0+255),f,b
   555  001040  D7FC               	bra	u1047
   556  001042  F000               	nop	
   557                           
   558                           ;main.c: 63: initLCD();
   559  001044  EC07  F009         	call	_initLCD	;wreg free
   560                           
   561                           ;main.c: 64: unsigned char str[15] = "PROGRAM BEGIN";
   562  001048  EE20  F093         	lfsr	2,main@F2922
   563  00104C  EE10  F082         	lfsr	1,main@str
   564  001050  0E0E               	movlw	14
   565  001052                     u1001:
   566  001052  CFDB FFE3          	movff	plusw2,plusw1
   567  001056  06E8               	decf	wreg,f,c
   568  001058  E2FC               	bc	u1001
   569                           
   570                           ;main.c: 65: _delay((unsigned long)((500)*(8000000/4000.0)));
   571  00105A  0E06               	movlw	6
   572  00105C  0100               	movlb	0	; () banked
   573  00105E  6F81               	movwf	(??_main+1)& (0+255),b
   574  001060  0E13               	movlw	19
   575  001062  0100               	movlb	0	; () banked
   576  001064  6F80               	movwf	??_main& (0+255),b
   577  001066  0EAD               	movlw	173
   578  001068                     u1057:
   579  001068  2EE8               	decfsz	wreg,f,c
   580  00106A  D7FE               	bra	u1057
   581  00106C  2F80               	decfsz	??_main& (0+255),f,b
   582  00106E  D7FC               	bra	u1057
   583  001070  2F81               	decfsz	(??_main+1)& (0+255),f,b
   584  001072  D7FA               	bra	u1057
   585  001074  D000               	nop2	
   586                           
   587                           ;main.c: 67: unsigned char pos;
   588                           ;main.c: 68: _addr = 0x20;
   589  001076  0E20               	movlw	32
   590  001078  6E59               	movwf	__addr,c
   591                           
   592                           ;main.c: 71: initPWM();
   593  00107A  EC61  F00B         	call	_initPWM	;wreg free
   594                           
   595                           ;main.c: 72: ledOn_1();
   596  00107E  ECBA  F00B         	call	_ledOn_1	;wreg free
   597                           
   598                           ;main.c: 73: _delay((unsigned long)((80)*(8000000/4000.0)));
   599  001082  0ED0               	movlw	208
   600  001084  0100               	movlb	0	; () banked
   601  001086  6F80               	movwf	??_main& (0+255),b
   602  001088  0EC9               	movlw	201
   603  00108A                     u1067:
   604  00108A  2EE8               	decfsz	wreg,f,c
   605  00108C  D7FE               	bra	u1067
   606  00108E  2F80               	decfsz	??_main& (0+255),f,b
   607  001090  D7FC               	bra	u1067
   608  001092  D000               	nop2	
   609                           
   610                           ;main.c: 74: ledOff_1();
   611  001094  ECBE  F00B         	call	_ledOff_1	;wreg free
   612                           
   613                           ;main.c: 75: _delay((unsigned long)((80)*(8000000/4000.0)));
   614  001098  0ED0               	movlw	208
   615  00109A  0100               	movlb	0	; () banked
   616  00109C  6F80               	movwf	??_main& (0+255),b
   617  00109E  0EC9               	movlw	201
   618  0010A0                     u1077:
   619  0010A0  2EE8               	decfsz	wreg,f,c
   620  0010A2  D7FE               	bra	u1077
   621  0010A4  2F80               	decfsz	??_main& (0+255),f,b
   622  0010A6  D7FC               	bra	u1077
   623  0010A8  D000               	nop2	
   624                           
   625                           ;main.c: 76: initQueue();
   626  0010AA  ECDA  F00A         	call	_initQueue	;wreg free
   627                           
   628                           ;main.c: 77: ledOn_1();
   629  0010AE  ECBA  F00B         	call	_ledOn_1	;wreg free
   630                           
   631                           ;main.c: 78: _delay((unsigned long)((80)*(8000000/4000.0)));
   632  0010B2  0ED0               	movlw	208
   633  0010B4  0100               	movlb	0	; () banked
   634  0010B6  6F80               	movwf	??_main& (0+255),b
   635  0010B8  0EC9               	movlw	201
   636  0010BA                     u1087:
   637  0010BA  2EE8               	decfsz	wreg,f,c
   638  0010BC  D7FE               	bra	u1087
   639  0010BE  2F80               	decfsz	??_main& (0+255),f,b
   640  0010C0  D7FC               	bra	u1087
   641  0010C2  D000               	nop2	
   642                           
   643                           ;main.c: 79: ledOff_1();
   644  0010C4  ECBE  F00B         	call	_ledOff_1	;wreg free
   645                           
   646                           ;main.c: 80: _delay((unsigned long)((80)*(8000000/4000.0)));
   647  0010C8  0ED0               	movlw	208
   648  0010CA  0100               	movlb	0	; () banked
   649  0010CC  6F80               	movwf	??_main& (0+255),b
   650  0010CE  0EC9               	movlw	201
   651  0010D0                     u1097:
   652  0010D0  2EE8               	decfsz	wreg,f,c
   653  0010D2  D7FE               	bra	u1097
   654  0010D4  2F80               	decfsz	??_main& (0+255),f,b
   655  0010D6  D7FC               	bra	u1097
   656  0010D8  D000               	nop2	
   657  0010DA                     l2235:
   658                           
   659                           ;main.c: 87: pos = readZ();
   660  0010DA  EC6C  F00B         	call	_readZ	;wreg free
   661  0010DE  0100               	movlb	0	; () banked
   662  0010E0  6F92               	movwf	main@pos& (0+255),b
   663                           
   664                           ; BSR set to: 0
   665                           ;main.c: 88: lcdWriteString(" ");
   666  0010E2  0E0E               	movlw	low STR_1
   667  0010E4  6E24               	movwf	lcdWriteString@str,c
   668  0010E6  0E10               	movlw	high STR_1
   669  0010E8  6E25               	movwf	lcdWriteString@str+1,c
   670  0010EA  EC52  F00A         	call	_lcdWriteString	;wreg free
   671                           
   672                           ;main.c: 89: lcdWriteInt(pos);
   673  0010EE  C092  F041         	movff	main@pos,lcdWriteInt@num
   674  0010F2  6A42               	clrf	lcdWriteInt@num+1,c
   675  0010F4  EC36  F00B         	call	_lcdWriteInt	;wreg free
   676                           
   677                           ;main.c: 90: myQueuePush((int)pos);
   678  0010F8  C092  F028         	movff	main@pos,myQueuePush@x
   679  0010FC  6A29               	clrf	myQueuePush@x+1,c
   680  0010FE  ECBC  F00A         	call	_myQueuePush	;wreg free
   681                           
   682                           ;main.c: 93: if (myQueueCheck() == 1){
   683  001102  EC8F  F009         	call	_myQueueCheck	;wreg free
   684  001106  0428               	decf	?_myQueueCheck,w,c
   685  001108  1029               	iorwf	?_myQueueCheck+1,w,c
   686  00110A  A4D8               	btfss	status,2,c
   687  00110C  D016               	goto	l2251
   688                           
   689                           ;main.c: 94: lightSwitch();
   690  00110E  EC46  F00B         	call	_lightSwitch	;wreg free
   691                           
   692                           ;main.c: 95: lcdWriteString("LIGHT_SWITCH");
   693  001112  0E01               	movlw	low STR_2
   694  001114  6E24               	movwf	lcdWriteString@str,c
   695  001116  0E10               	movlw	high STR_2
   696  001118  6E25               	movwf	lcdWriteString@str+1,c
   697  00111A  EC52  F00A         	call	_lcdWriteString	;wreg free
   698                           
   699                           ;main.c: 96: _delay((unsigned long)((500)*(8000000/4000.0)));
   700  00111E  0E06               	movlw	6
   701  001120  0100               	movlb	0	; () banked
   702  001122  6F81               	movwf	(??_main+1)& (0+255),b
   703  001124  0E13               	movlw	19
   704  001126  0100               	movlb	0	; () banked
   705  001128  6F80               	movwf	??_main& (0+255),b
   706  00112A  0EAD               	movlw	173
   707  00112C                     u1107:
   708  00112C  2EE8               	decfsz	wreg,f,c
   709  00112E  D7FE               	bra	u1107
   710  001130  2F80               	decfsz	??_main& (0+255),f,b
   711  001132  D7FC               	bra	u1107
   712  001134  2F81               	decfsz	(??_main+1)& (0+255),f,b
   713  001136  D7FA               	bra	u1107
   714  001138  D000               	nop2	
   715  00113A                     l2251:
   716                           
   717                           ;main.c: 97: }
   718                           ;main.c: 102: GestureType ges = readGesture();
   719  00113A  ECF7  F00A         	call	_readGesture	;wreg free
   720  00113E  0100               	movlb	0	; () banked
   721  001140  6F91               	movwf	main@ges& (0+255),b
   722                           
   723                           ;main.c: 103: switch (ges){
   724  001142  D006               	goto	l2259
   725  001144                     l2253:
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 106: moreLight();
   729  001144  EC98  F00B         	call	_moreLight	;wreg free
   730                           
   731                           ;main.c: 107: break;
   732  001148  D00C               	goto	l2261
   733  00114A                     l2255:
   734                           
   735                           ;main.c: 110: lessLight();
   736  00114A  EC9E  F00B         	call	_lessLight	;wreg free
   737                           
   738                           ;main.c: 119: }
   739                           
   740                           ;main.c: 118: break;
   741                           
   742                           ;main.c: 116: default:
   743                           
   744                           ;main.c: 115: break;
   745                           
   746                           ;main.c: 112: case UP_SWIPE:
   747                           
   748                           ;main.c: 111: break;
   749  00114E  D009               	goto	l2261
   750  001150                     l2259:
   751  001150  0100               	movlb	0	; () banked
   752  001152  5191               	movf	main@ges& (0+255),w,b
   753                           
   754                           ; Switch size 1, requested type "space"
   755                           ; Number of cases is 3, Range of values is 1 to 3
   756                           ; switch strategies available:
   757                           ; Name         Instructions Cycles
   758                           ; simple_byte           10     6 (average)
   759                           ;	Chosen strategy is simple_byte
   760  001154  0A01               	xorlw	1	; case 1
   761  001156  B4D8               	btfsc	status,2,c
   762  001158  D7F5               	goto	l2253
   763  00115A  0A03               	xorlw	3	; case 2
   764  00115C  B4D8               	btfsc	status,2,c
   765  00115E  D7F5               	goto	l2255
   766  001160  0A01               	xorlw	1	; case 3
   767  001162                     l2261:
   768                           
   769                           ;main.c: 120: _delay((unsigned long)((10)*(8000000/4000.0)));
   770  001162  0E1A               	movlw	26
   771  001164  0100               	movlb	0	; () banked
   772  001166  6F80               	movwf	??_main& (0+255),b
   773  001168  0EF8               	movlw	248
   774  00116A                     u1117:
   775  00116A  2EE8               	decfsz	wreg,f,c
   776  00116C  D7FE               	bra	u1117
   777  00116E  2F80               	decfsz	??_main& (0+255),f,b
   778  001170  D7FC               	bra	u1117
   779  001172  F000               	nop	
   780  001174  D7B2               	goto	l2235
   781  001176                     __end_of_main:
   782                           	opt stack 0
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           intcon	equ	0xFF2
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           plusw1	equ	0xFE3
   792                           fsr1l	equ	0xFE1
   793                           plusw2	equ	0xFDB
   794                           status	equ	0xFD8
   795                           
   796 ;; *************** function _readZ *****************
   797 ;; Defined at:
   798 ;;		line 117 in file "I2C.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  z_pos           1   39[COMRAM] unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      unsigned char 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;Total ram usage:        1 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    5
   819 ;; This function calls:
   820 ;;		_readDataByte
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text1
   827  0016D8                     __ptext1:
   828                           	opt stack 0
   829  0016D8                     _readZ:
   830                           	opt stack 25
   831                           
   832                           ;I2C.c: 118: unsigned char z_pos;
   833                           ;I2C.c: 119: z_pos = readDataByte(_addr, 0x0A);
   834                           
   835                           ;incstack = 0
   836  0016D8  0E0A               	movlw	10
   837  0016DA  6E25               	movwf	readDataByte@reg,c
   838  0016DC  5059               	movf	__addr,w,c
   839  0016DE  EC25  F00B         	call	_readDataByte
   840  0016E2  6E28               	movwf	readZ@z_pos,c
   841                           
   842                           ;I2C.c: 120: return z_pos;
   843  0016E4  5028               	movf	readZ@z_pos,w,c
   844  0016E6  0012               	return	
   845  0016E8                     __end_of_readZ:
   846                           	opt stack 0
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           intcon	equ	0xFF2
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           postdec1	equ	0xFE5
   855                           plusw1	equ	0xFE3
   856                           fsr1l	equ	0xFE1
   857                           plusw2	equ	0xFDB
   858                           status	equ	0xFD8
   859                           
   860 ;; *************** function _readGesture *****************
   861 ;; Defined at:
   862 ;;		line 154 in file "I2C.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;  gesture         1   39[COMRAM] unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      enum E2865
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;Total ram usage:        1 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    5
   883 ;; This function calls:
   884 ;;		_readDataByte
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text2
   891  0015EE                     __ptext2:
   892                           	opt stack 0
   893  0015EE                     _readGesture:
   894                           	opt stack 25
   895                           
   896                           ;I2C.c: 155: unsigned char gesture;
   897                           ;I2C.c: 156: gesture = readDataByte(_addr, 0x04);
   898                           
   899                           ;incstack = 0
   900  0015EE  0E04               	movlw	4
   901  0015F0  6E25               	movwf	readDataByte@reg,c
   902  0015F2  5059               	movf	__addr,w,c
   903  0015F4  EC25  F00B         	call	_readDataByte
   904  0015F8  6E28               	movwf	readGesture@gesture,c
   905                           
   906                           ;I2C.c: 162: switch (gesture){
   907  0015FA  D008               	goto	l2179
   908  0015FC                     l2161:
   909                           
   910                           ;I2C.c: 164: return RIGHT_SWIPE;
   911  0015FC  0E01               	movlw	1
   912  0015FE  0012               	return	
   913  001600                     l2165:
   914                           
   915                           ;I2C.c: 166: return LEFT_SWIPE;
   916  001600  0E02               	movlw	2
   917  001602  0012               	return	
   918  001604                     l2169:
   919                           
   920                           ;I2C.c: 168: return UP_SWIPE;
   921  001604  0E03               	movlw	3
   922  001606  0012               	return	
   923  001608                     l2173:
   924                           
   925                           ;I2C.c: 170: return NO_GESTURE;
   926  001608  0EFF               	movlw	255
   927                           
   928                           ;I2C.c: 171: }
   929  00160A  0012               	return	
   930  00160C                     l2179:
   931  00160C  5028               	movf	readGesture@gesture,w,c
   932                           
   933                           ; Switch size 1, requested type "space"
   934                           ; Number of cases is 3, Range of values is 1 to 3
   935                           ; switch strategies available:
   936                           ; Name         Instructions Cycles
   937                           ; simple_byte           10     6 (average)
   938                           ;	Chosen strategy is simple_byte
   939  00160E  0A01               	xorlw	1	; case 1
   940  001610  B4D8               	btfsc	status,2,c
   941  001612  D7F4               	goto	l2161
   942  001614  0A03               	xorlw	3	; case 2
   943  001616  B4D8               	btfsc	status,2,c
   944  001618  D7F3               	goto	l2165
   945  00161A  0A01               	xorlw	1	; case 3
   946  00161C  B4D8               	btfsc	status,2,c
   947  00161E  D7F2               	goto	l2169
   948  001620  D7F3               	goto	l2173
   949  001622                     __end_of_readGesture:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           intcon	equ	0xFF2
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           plusw1	equ	0xFE3
   960                           fsr1l	equ	0xFE1
   961                           plusw2	equ	0xFDB
   962                           status	equ	0xFD8
   963                           
   964 ;; *************** function _readDataByte *****************
   965 ;; Defined at:
   966 ;;		line 92 in file "I2C.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  addr            1    wreg     unsigned char 
   969 ;;  reg             1   36[COMRAM] unsigned char 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  addr            1   38[COMRAM] unsigned char 
   972 ;;  retc            1   37[COMRAM] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      unsigned char 
   975 ;; Registers used:
   976 ;;		wreg, status,2, status,0, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;Total ram usage:        3 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    4
   989 ;; This function calls:
   990 ;;		_I2CRestart
   991 ;;		_receiveByte
   992 ;;		_sendByte
   993 ;;		_writeDataByte
   994 ;; This function is called by:
   995 ;;		_readZ
   996 ;;		_readGesture
   997 ;;		_readX
   998 ;;		_positionAvailable
   999 ;;		_gestureAvailable
  1000 ;;		_readGestureSpeed
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text3
  1005  00164A                     __ptext3:
  1006                           	opt stack 0
  1007  00164A                     _readDataByte:
  1008                           	opt stack 25
  1009                           
  1010                           ;incstack = 0
  1011                           ;readDataByte@addr stored from wreg
  1012  00164A  6E27               	movwf	readDataByte@addr,c
  1013                           
  1014                           ;I2C.c: 93: writeDataByte(addr, reg);
  1015  00164C  C025  F023         	movff	readDataByte@reg,writeDataByte@reg
  1016  001650  5027               	movf	readDataByte@addr,w,c
  1017  001652  EC55  F00B         	call	_writeDataByte
  1018                           
  1019                           ;I2C.c: 94: I2CRestart();
  1020  001656  ECAE  F00B         	call	_I2CRestart	;wreg free
  1021                           
  1022                           ;I2C.c: 95: sendByte(addr | 0x01);
  1023  00165A  5027               	movf	readDataByte@addr,w,c
  1024  00165C  0901               	iorlw	1
  1025  00165E  EC84  F00B         	call	_sendByte
  1026                           
  1027                           ;I2C.c: 96: unsigned char retc = receiveByte();
  1028  001662  EC74  F00B         	call	_receiveByte	;wreg free
  1029  001666  6E26               	movwf	readDataByte@retc,c
  1030                           
  1031                           ;I2C.c: 97: return retc;
  1032  001668  5026               	movf	readDataByte@retc,w,c
  1033  00166A  0012               	return	
  1034  00166C                     __end_of_readDataByte:
  1035                           	opt stack 0
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           intcon	equ	0xFF2
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           plusw1	equ	0xFE3
  1045                           fsr1l	equ	0xFE1
  1046                           plusw2	equ	0xFDB
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function _writeDataByte *****************
  1050 ;; Defined at:
  1051 ;;		line 85 in file "I2C.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  addr            1    wreg     unsigned char 
  1054 ;;  reg             1   34[COMRAM] unsigned char 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  addr            1   35[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    3
  1073 ;; This function calls:
  1074 ;;		_I2CInit
  1075 ;;		_I2CStart
  1076 ;;		_sendByte
  1077 ;; This function is called by:
  1078 ;;		_readDataByte
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text4
  1083  0016AA                     __ptext4:
  1084                           	opt stack 0
  1085  0016AA                     _writeDataByte:
  1086                           	opt stack 25
  1087                           
  1088                           ;incstack = 0
  1089                           ;writeDataByte@addr stored from wreg
  1090  0016AA  6E24               	movwf	writeDataByte@addr,c
  1091                           
  1092                           ;I2C.c: 86: I2CInit();
  1093  0016AC  EC92  F00B         	call	_I2CInit	;wreg free
  1094                           
  1095                           ;I2C.c: 87: I2CStart();
  1096  0016B0  ECAA  F00B         	call	_I2CStart	;wreg free
  1097                           
  1098                           ;I2C.c: 88: sendByte(addr);
  1099  0016B4  5024               	movf	writeDataByte@addr,w,c
  1100  0016B6  EC84  F00B         	call	_sendByte
  1101                           
  1102                           ;I2C.c: 89: sendByte(reg);
  1103  0016BA  5023               	movf	writeDataByte@reg,w,c
  1104  0016BC  EC84  F00B         	call	_sendByte
  1105  0016C0  0012               	return		;funcret
  1106  0016C2                     __end_of_writeDataByte:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           intcon	equ	0xFF2
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           plusw1	equ	0xFE3
  1117                           fsr1l	equ	0xFE1
  1118                           plusw2	equ	0xFDB
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _sendByte *****************
  1122 ;; Defined at:
  1123 ;;		line 69 in file "I2C.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  c               1    wreg     unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  c               1   33[COMRAM] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1141 ;;Total ram usage:        1 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    2
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_writeDataByte
  1148 ;;		_readDataByte
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text5
  1153  001708                     __ptext5:
  1154                           	opt stack 0
  1155  001708                     _sendByte:
  1156                           	opt stack 25
  1157                           
  1158                           ;incstack = 0
  1159                           ;sendByte@c stored from wreg
  1160  001708  6E22               	movwf	sendByte@c,c
  1161                           
  1162                           ;I2C.c: 70: PIR1bits.SSPIF = 0;
  1163  00170A  969E               	bcf	3998,3,c	;volatile
  1164                           
  1165                           ;I2C.c: 71: SSPBUF = c;
  1166  00170C  C022  FFC9         	movff	sendByte@c,4041	;volatile
  1167  001710                     l209:
  1168  001710  B69E               	btfsc	3998,3,c	;volatile
  1169  001712  0012               	return	
  1170  001714  D7FD               	goto	l209
  1171  001716                     __end_of_sendByte:
  1172                           	opt stack 0
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           intcon	equ	0xFF2
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           plusw1	equ	0xFE3
  1182                           fsr1l	equ	0xFE1
  1183                           plusw2	equ	0xFDB
  1184                           status	equ	0xFD8
  1185                           
  1186 ;; *************** function _I2CStart *****************
  1187 ;; Defined at:
  1188 ;;		line 58 in file "I2C.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		None
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_writeDataByte
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text6
  1217  001754                     __ptext6:
  1218                           	opt stack 0
  1219  001754                     _I2CStart:
  1220                           	opt stack 25
  1221                           
  1222                           ;I2C.c: 60: SSPCON2bits.SEN = 1;;
  1223                           
  1224                           ;incstack = 0
  1225  001754  80C5               	bsf	4037,0,c	;volatile
  1226  001756                     l197:
  1227  001756  A0C5               	btfss	4037,0,c	;volatile
  1228  001758  0012               	return	
  1229  00175A  D7FD               	goto	l197
  1230  00175C                     __end_of_I2CStart:
  1231                           	opt stack 0
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           intcon	equ	0xFF2
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           plusw1	equ	0xFE3
  1241                           fsr1l	equ	0xFE1
  1242                           plusw2	equ	0xFDB
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _I2CInit *****************
  1246 ;; Defined at:
  1247 ;;		line 19 in file "I2C.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		None
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    2
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_writeDataByte
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text7
  1276  001724                     __ptext7:
  1277                           	opt stack 0
  1278  001724                     _I2CInit:
  1279                           	opt stack 25
  1280                           
  1281                           ;I2C.c: 20: SSPCON1bits.SSPM0 = 0;
  1282                           
  1283                           ;incstack = 0
  1284  001724  90C6               	bcf	4038,0,c	;volatile
  1285                           
  1286                           ;I2C.c: 21: SSPCON1bits.SSPM1 = 0;
  1287  001726  92C6               	bcf	4038,1,c	;volatile
  1288                           
  1289                           ;I2C.c: 22: SSPCON1bits.SSPM2 = 0;
  1290  001728  94C6               	bcf	4038,2,c	;volatile
  1291                           
  1292                           ;I2C.c: 23: SSPCON1bits.SSPM3 = 1;
  1293  00172A  86C6               	bsf	4038,3,c	;volatile
  1294                           
  1295                           ;I2C.c: 25: SSPCON1bits.SSPEN = 1;
  1296  00172C  8AC6               	bsf	4038,5,c	;volatile
  1297  00172E  0012               	return		;funcret
  1298  001730                     __end_of_I2CInit:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           intcon	equ	0xFF2
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           plusw1	equ	0xFE3
  1309                           fsr1l	equ	0xFE1
  1310                           plusw2	equ	0xFDB
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _receiveByte *****************
  1314 ;; Defined at:
  1315 ;;		line 75 in file "I2C.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  retc            1   33[COMRAM] unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      unsigned char 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;Total ram usage:        1 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    2
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_readDataByte
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text8
  1344  0016E8                     __ptext8:
  1345                           	opt stack 0
  1346  0016E8                     _receiveByte:
  1347                           	opt stack 26
  1348                           
  1349                           ;I2C.c: 76: SSPCON2bits.RCEN = 1;
  1350                           
  1351                           ;incstack = 0
  1352  0016E8  86C5               	bsf	4037,3,c	;volatile
  1353                           
  1354                           ;I2C.c: 77: PIR1bits.SSPIF = 0;
  1355  0016EA  969E               	bcf	3998,3,c	;volatile
  1356  0016EC                     l215:
  1357  0016EC  A69E               	btfss	3998,3,c	;volatile
  1358  0016EE  D7FE               	goto	l215
  1359                           
  1360                           ;I2C.c: 79: unsigned char retc = SSPBUF;
  1361  0016F0  CFC9 F022          	movff	4041,receiveByte@retc	;volatile
  1362                           
  1363                           ;I2C.c: 80: return retc;
  1364  0016F4  5022               	movf	receiveByte@retc,w,c
  1365  0016F6  0012               	return	
  1366  0016F8                     __end_of_receiveByte:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           intcon	equ	0xFF2
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           plusw1	equ	0xFE3
  1377                           fsr1l	equ	0xFE1
  1378                           plusw2	equ	0xFDB
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _I2CRestart *****************
  1382 ;; Defined at:
  1383 ;;		line 64 in file "I2C.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		None
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    2
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_readDataByte
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text9
  1412  00175C                     __ptext9:
  1413                           	opt stack 0
  1414  00175C                     _I2CRestart:
  1415                           	opt stack 26
  1416                           
  1417                           ;I2C.c: 65: SSPCON2bits.RSEN = 1;;
  1418                           
  1419                           ;incstack = 0
  1420  00175C  82C5               	bsf	4037,1,c	;volatile
  1421  00175E                     l203:
  1422  00175E  A2C5               	btfss	4037,1,c	;volatile
  1423  001760  0012               	return	
  1424  001762  D7FD               	goto	l203
  1425  001764                     __end_of_I2CRestart:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           intcon	equ	0xFF2
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           postdec1	equ	0xFE5
  1435                           plusw1	equ	0xFE3
  1436                           fsr1l	equ	0xFE1
  1437                           plusw2	equ	0xFDB
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _myQueuePush *****************
  1441 ;; Defined at:
  1442 ;;		line 8 in file "lpque.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  x               2   39[COMRAM] int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    3
  1463 ;; This function calls:
  1464 ;;		___awmod
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text10
  1471  001578                     __ptext10:
  1472                           	opt stack 0
  1473  001578                     _myQueuePush:
  1474                           	opt stack 27
  1475                           
  1476                           ;lpque.c: 9: iter = (iter + 1) % 10;
  1477                           
  1478                           ;incstack = 0
  1479  001578  0E01               	movlw	1
  1480  00157A  2457               	addwf	_iter,w,c
  1481  00157C  6E22               	movwf	___awmod@dividend,c
  1482  00157E  0E00               	movlw	0
  1483  001580  2058               	addwfc	_iter+1,w,c
  1484  001582  6E23               	movwf	___awmod@dividend+1,c
  1485  001584  0E00               	movlw	0
  1486  001586  6E25               	movwf	___awmod@divisor+1,c
  1487  001588  0E0A               	movlw	10
  1488  00158A  6E24               	movwf	___awmod@divisor,c
  1489  00158C  ECC8  F009         	call	___awmod	;wreg free
  1490  001590  C022  F057         	movff	?___awmod,_iter
  1491  001594  C023  F058         	movff	?___awmod+1,_iter+1
  1492                           
  1493                           ;lpque.c: 10: my_stack[iter] = x;
  1494  001598  90D8               	bcf	status,0,c
  1495  00159A  3457               	rlcf	_iter,w,c
  1496  00159C  6ED9               	movwf	fsr2l,c
  1497  00159E  3458               	rlcf	_iter+1,w,c
  1498  0015A0  6EDA               	movwf	fsr2h,c
  1499  0015A2  0E43               	movlw	low _my_stack
  1500  0015A4  26D9               	addwf	fsr2l,f,c
  1501  0015A6  0E00               	movlw	high _my_stack
  1502  0015A8  22DA               	addwfc	fsr2h,f,c
  1503  0015AA  C028  FFDE         	movff	myQueuePush@x,postinc2
  1504  0015AE  C029  FFDD         	movff	myQueuePush@x+1,postdec2
  1505  0015B2  0012               	return		;funcret
  1506  0015B4                     __end_of_myQueuePush:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           intcon	equ	0xFF2
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           plusw1	equ	0xFE3
  1517                           fsr1l	equ	0xFE1
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           plusw2	equ	0xFDB
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function _myQueueCheck *****************
  1526 ;; Defined at:
  1527 ;;		line 12 in file "lpque.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  i               2   43[COMRAM] int 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  2   39[COMRAM] int 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:        6 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    3
  1548 ;; This function calls:
  1549 ;;		___awmod
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text11
  1556  00131E                     __ptext11:
  1557                           	opt stack 0
  1558  00131E                     _myQueueCheck:
  1559                           	opt stack 27
  1560                           
  1561                           ;lpque.c: 13: for (int i = 10; i > 7; i--){
  1562                           
  1563                           ;incstack = 0
  1564  00131E  0E00               	movlw	0
  1565  001320  6E2D               	movwf	myQueueCheck@i+1,c
  1566  001322  0E0A               	movlw	10
  1567  001324  6E2C               	movwf	myQueueCheck@i,c
  1568  001326                     l2129:
  1569  001326  BE2D               	btfsc	myQueueCheck@i+1,7,c
  1570  001328  D02E               	goto	l2143
  1571  00132A  502D               	movf	myQueueCheck@i+1,w,c
  1572  00132C  E104               	bnz	l2133
  1573  00132E  0E08               	movlw	8
  1574  001330  5C2C               	subwf	myQueueCheck@i,w,c
  1575  001332  A0D8               	btfss	status,0,c
  1576  001334  D028               	goto	l2143
  1577  001336                     l2133:
  1578                           
  1579                           ;lpque.c: 16: if (my_stack[(iter + i) % 10] > 20)
  1580  001336  502C               	movf	myQueueCheck@i,w,c
  1581  001338  2457               	addwf	_iter,w,c
  1582  00133A  6E22               	movwf	___awmod@dividend,c
  1583  00133C  502D               	movf	myQueueCheck@i+1,w,c
  1584  00133E  2058               	addwfc	_iter+1,w,c
  1585  001340  6E23               	movwf	___awmod@dividend+1,c
  1586  001342  0E00               	movlw	0
  1587  001344  6E25               	movwf	___awmod@divisor+1,c
  1588  001346  0E0A               	movlw	10
  1589  001348  6E24               	movwf	___awmod@divisor,c
  1590  00134A  ECC8  F009         	call	___awmod	;wreg free
  1591  00134E  90D8               	bcf	status,0,c
  1592  001350  3622               	rlcf	?___awmod,f,c
  1593  001352  3623               	rlcf	?___awmod+1,f,c
  1594  001354  0E43               	movlw	low _my_stack
  1595  001356  2422               	addwf	?___awmod,w,c
  1596  001358  6ED9               	movwf	fsr2l,c
  1597  00135A  0E00               	movlw	high _my_stack
  1598  00135C  2023               	addwfc	?___awmod+1,w,c
  1599  00135E  6EDA               	movwf	fsr2h,c
  1600  001360  0E01               	movlw	1
  1601  001362  BEDB               	btfsc	plusw2,7,c
  1602  001364  D00C               	goto	l2139
  1603  001366  0E01               	movlw	1
  1604  001368  50DB               	movf	plusw2,w,c
  1605  00136A  E104               	bnz	u950
  1606  00136C  0E15               	movlw	21
  1607  00136E  5CDE               	subwf	postinc2,w,c
  1608  001370  A0D8               	btfss	status,0,c
  1609  001372  D005               	goto	l2139
  1610  001374                     u950:
  1611                           
  1612                           ;lpque.c: 17: return 0;
  1613  001374  0E00               	movlw	0
  1614  001376  6E29               	movwf	?_myQueueCheck+1,c
  1615  001378  0E00               	movlw	0
  1616  00137A  6E28               	movwf	?_myQueueCheck,c
  1617  00137C  0012               	return	
  1618  00137E                     l2139:
  1619  00137E  062C               	decf	myQueueCheck@i,f,c
  1620  001380  A0D8               	btfss	status,0,c
  1621  001382  062D               	decf	myQueueCheck@i+1,f,c
  1622  001384  D7D0               	goto	l2129
  1623  001386                     l2143:
  1624                           
  1625                           ;lpque.c: 18: }
  1626                           ;lpque.c: 19: return 1;
  1627  001386  0E00               	movlw	0
  1628  001388  6E29               	movwf	?_myQueueCheck+1,c
  1629  00138A  0E01               	movlw	1
  1630  00138C  6E28               	movwf	?_myQueueCheck,c
  1631  00138E  0012               	return	
  1632  001390                     __end_of_myQueueCheck:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           intcon	equ	0xFF2
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           plusw1	equ	0xFE3
  1643                           fsr1l	equ	0xFE1
  1644                           postinc2	equ	0xFDE
  1645                           postdec2	equ	0xFDD
  1646                           plusw2	equ	0xFDB
  1647                           fsr2h	equ	0xFDA
  1648                           fsr2l	equ	0xFD9
  1649                           status	equ	0xFD8
  1650                           
  1651 ;; *************** function ___awmod *****************
  1652 ;; Defined at:
  1653 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  dividend        2   33[COMRAM] int 
  1656 ;;  divisor         2   35[COMRAM] int 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  sign            1   38[COMRAM] unsigned char 
  1659 ;;  counter         1   37[COMRAM] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  2   33[COMRAM] int 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;Total ram usage:        6 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    2
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_myQueuePush
  1680 ;;		_myQueueCheck
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text12
  1685  001390                     __ptext12:
  1686                           	opt stack 0
  1687  001390                     ___awmod:
  1688                           	opt stack 27
  1689                           
  1690                           ;incstack = 0
  1691  001390  0E00               	movlw	0
  1692  001392  6E27               	movwf	___awmod@sign,c
  1693  001394  AE23               	btfss	___awmod@dividend+1,7,c
  1694  001396  D006               	goto	l2021
  1695  001398  6C22               	negf	___awmod@dividend,c
  1696  00139A  1E23               	comf	___awmod@dividend+1,f,c
  1697  00139C  B0D8               	btfsc	status,0,c
  1698  00139E  2A23               	incf	___awmod@dividend+1,f,c
  1699  0013A0  0E01               	movlw	1
  1700  0013A2  6E27               	movwf	___awmod@sign,c
  1701  0013A4                     l2021:
  1702  0013A4  AE25               	btfss	___awmod@divisor+1,7,c
  1703  0013A6  D004               	goto	l2025
  1704  0013A8  6C24               	negf	___awmod@divisor,c
  1705  0013AA  1E25               	comf	___awmod@divisor+1,f,c
  1706  0013AC  B0D8               	btfsc	status,0,c
  1707  0013AE  2A25               	incf	___awmod@divisor+1,f,c
  1708  0013B0                     l2025:
  1709  0013B0  5024               	movf	___awmod@divisor,w,c
  1710  0013B2  1025               	iorwf	___awmod@divisor+1,w,c
  1711  0013B4  B4D8               	btfsc	status,2,c
  1712  0013B6  D018               	goto	l2041
  1713  0013B8  0E01               	movlw	1
  1714  0013BA  6E26               	movwf	___awmod@counter,c
  1715  0013BC  D004               	goto	l2031
  1716  0013BE                     l2029:
  1717  0013BE  90D8               	bcf	status,0,c
  1718  0013C0  3624               	rlcf	___awmod@divisor,f,c
  1719  0013C2  3625               	rlcf	___awmod@divisor+1,f,c
  1720  0013C4  2A26               	incf	___awmod@counter,f,c
  1721  0013C6                     l2031:
  1722  0013C6  AE25               	btfss	___awmod@divisor+1,7,c
  1723  0013C8  D7FA               	goto	l2029
  1724  0013CA                     l2033:
  1725  0013CA  5024               	movf	___awmod@divisor,w,c
  1726  0013CC  5C22               	subwf	___awmod@dividend,w,c
  1727  0013CE  5025               	movf	___awmod@divisor+1,w,c
  1728  0013D0  5823               	subwfb	___awmod@dividend+1,w,c
  1729  0013D2  A0D8               	btfss	status,0,c
  1730  0013D4  D004               	goto	l2037
  1731  0013D6  5024               	movf	___awmod@divisor,w,c
  1732  0013D8  5E22               	subwf	___awmod@dividend,f,c
  1733  0013DA  5025               	movf	___awmod@divisor+1,w,c
  1734  0013DC  5A23               	subwfb	___awmod@dividend+1,f,c
  1735  0013DE                     l2037:
  1736  0013DE  90D8               	bcf	status,0,c
  1737  0013E0  3225               	rrcf	___awmod@divisor+1,f,c
  1738  0013E2  3224               	rrcf	___awmod@divisor,f,c
  1739  0013E4  2E26               	decfsz	___awmod@counter,f,c
  1740  0013E6  D7F1               	goto	l2033
  1741  0013E8                     l2041:
  1742  0013E8  5027               	movf	___awmod@sign,w,c
  1743  0013EA  B4D8               	btfsc	status,2,c
  1744  0013EC  D004               	goto	l2045
  1745  0013EE  6C22               	negf	___awmod@dividend,c
  1746  0013F0  1E23               	comf	___awmod@dividend+1,f,c
  1747  0013F2  B0D8               	btfsc	status,0,c
  1748  0013F4  2A23               	incf	___awmod@dividend+1,f,c
  1749  0013F6                     l2045:
  1750  0013F6  C022  F022         	movff	___awmod@dividend,?___awmod
  1751  0013FA  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  1752  0013FE  0012               	return	
  1753  001400                     __end_of___awmod:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           intcon	equ	0xFF2
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           plusw1	equ	0xFE3
  1764                           fsr1l	equ	0xFE1
  1765                           postinc2	equ	0xFDE
  1766                           postdec2	equ	0xFDD
  1767                           plusw2	equ	0xFDB
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _moreLight *****************
  1773 ;; Defined at:
  1774 ;;		line 44 in file "pwm.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;		None
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;Total ram usage:        0 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    4
  1795 ;; This function calls:
  1796 ;;		_dutyCycleUp
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text13
  1803  001730                     __ptext13:
  1804                           	opt stack 0
  1805  001730                     _moreLight:
  1806                           	opt stack 26
  1807                           
  1808                           ;pwm.c: 45: if (lightStatus == 1){
  1809                           
  1810                           ;incstack = 0
  1811  001730  045C               	decf	_lightStatus,w,c
  1812  001732  A4D8               	btfss	status,2,c
  1813  001734  0012               	return	
  1814                           
  1815                           ;pwm.c: 46: dutyCycleUp();
  1816  001736  EC11  F00B         	call	_dutyCycleUp	;wreg free
  1817  00173A  0012               	return	
  1818  00173C                     __end_of_moreLight:
  1819                           	opt stack 0
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           intcon	equ	0xFF2
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postdec1	equ	0xFE5
  1828                           plusw1	equ	0xFE3
  1829                           fsr1l	equ	0xFE1
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           plusw2	equ	0xFDB
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _dutyCycleUp *****************
  1838 ;; Defined at:
  1839 ;;		line 23 in file "pwm.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;Total ram usage:        2 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    3
  1860 ;; This function calls:
  1861 ;;		_setDutyCycle
  1862 ;; This function is called by:
  1863 ;;		_moreLight
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text14
  1868  001622                     __ptext14:
  1869                           	opt stack 0
  1870  001622                     _dutyCycleUp:
  1871                           	opt stack 26
  1872                           
  1873                           ;pwm.c: 24: rate = rate + 8;
  1874                           
  1875                           ;incstack = 0
  1876  001622  505D               	movf	_rate,w,c
  1877  001624  0F08               	addlw	8
  1878  001626  6E5D               	movwf	_rate,c
  1879                           
  1880                           ;pwm.c: 25: rate = (49<rate?49:rate);
  1881  001628  0E32               	movlw	50
  1882  00162A  605D               	cpfslt	_rate,c
  1883  00162C  D004               	goto	l1999
  1884  00162E  C05D  F023         	movff	_rate,_dutyCycleUp$589
  1885  001632  6A24               	clrf	_dutyCycleUp$589+1,c
  1886  001634  D004               	goto	l2001
  1887  001636                     l1999:
  1888  001636  0E00               	movlw	0
  1889  001638  6E24               	movwf	_dutyCycleUp$589+1,c
  1890  00163A  0E31               	movlw	49
  1891  00163C  6E23               	movwf	_dutyCycleUp$589,c
  1892  00163E                     l2001:
  1893  00163E  C023  F05D         	movff	_dutyCycleUp$589,_rate
  1894                           
  1895                           ;pwm.c: 26: setDutyCycle(rate);
  1896  001642  505D               	movf	_rate,w,c
  1897  001644  ECA4  F00B         	call	_setDutyCycle
  1898  001648  0012               	return		;funcret
  1899  00164A                     __end_of_dutyCycleUp:
  1900                           	opt stack 0
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           intcon	equ	0xFF2
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           plusw1	equ	0xFE3
  1910                           fsr1l	equ	0xFE1
  1911                           postinc2	equ	0xFDE
  1912                           postdec2	equ	0xFDD
  1913                           plusw2	equ	0xFDB
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _lightSwitch *****************
  1919 ;; Defined at:
  1920 ;;		line 56 in file "pwm.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;Total ram usage:        0 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    4
  1941 ;; This function calls:
  1942 ;;		_dutyCycleClear
  1943 ;;		_dutyCycleSet
  1944 ;;		_initQueue
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text15
  1951  00168C                     __ptext15:
  1952                           	opt stack 0
  1953  00168C                     _lightSwitch:
  1954                           	opt stack 26
  1955                           
  1956                           ;pwm.c: 57: if (lightStatus == 0){
  1957                           
  1958                           ;incstack = 0
  1959  00168C  505C               	movf	_lightStatus,w,c
  1960  00168E  A4D8               	btfss	status,2,c
  1961  001690  D005               	goto	l2153
  1962                           
  1963                           ;pwm.c: 58: lightStatus = 1;
  1964  001692  0E01               	movlw	1
  1965  001694  6E5C               	movwf	_lightStatus,c
  1966                           
  1967                           ;pwm.c: 59: dutyCycleSet();
  1968  001696  ECB2  F00B         	call	_dutyCycleSet	;wreg free
  1969                           
  1970                           ;pwm.c: 60: }
  1971  00169A  D004               	goto	l2157
  1972  00169C                     l2153:
  1973                           
  1974                           ;pwm.c: 61: else{
  1975                           ;pwm.c: 62: lightStatus = 0;
  1976  00169C  0E00               	movlw	0
  1977  00169E  6E5C               	movwf	_lightStatus,c
  1978                           
  1979                           ;pwm.c: 63: dutyCycleClear();
  1980  0016A0  ECB6  F00B         	call	_dutyCycleClear	;wreg free
  1981  0016A4                     l2157:
  1982                           
  1983                           ;pwm.c: 64: }
  1984                           ;pwm.c: 65: initQueue();
  1985  0016A4  ECDA  F00A         	call	_initQueue	;wreg free
  1986  0016A8  0012               	return		;funcret
  1987  0016AA                     __end_of_lightSwitch:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           intcon	equ	0xFF2
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           plusw1	equ	0xFE3
  1998                           fsr1l	equ	0xFE1
  1999                           postinc2	equ	0xFDE
  2000                           postdec2	equ	0xFDD
  2001                           plusw2	equ	0xFDB
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _initQueue *****************
  2007 ;; Defined at:
  2008 ;;		line 3 in file "lpque.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;		None
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  i               2   33[COMRAM] int 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;Total ram usage:        2 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    2
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;;		_lightSwitch
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text16
  2038  0015B4                     __ptext16:
  2039                           	opt stack 0
  2040  0015B4                     _initQueue:
  2041                           	opt stack 27
  2042                           
  2043                           ;lpque.c: 4: for (int i = 0; i < 10; i++)
  2044                           
  2045                           ;incstack = 0
  2046  0015B4  0E00               	movlw	0
  2047  0015B6  6E23               	movwf	initQueue@i+1,c
  2048  0015B8  0E00               	movlw	0
  2049  0015BA  6E22               	movwf	initQueue@i,c
  2050  0015BC                     l1959:
  2051  0015BC  BE23               	btfsc	initQueue@i+1,7,c
  2052  0015BE  D006               	goto	l1963
  2053  0015C0  5023               	movf	initQueue@i+1,w,c
  2054  0015C2  E114               	bnz	l324
  2055  0015C4  0E0A               	movlw	10
  2056  0015C6  5C22               	subwf	initQueue@i,w,c
  2057  0015C8  B0D8               	btfsc	status,0,c
  2058  0015CA  0012               	return	
  2059  0015CC                     l1963:
  2060                           
  2061                           ;lpque.c: 5: my_stack[i] = 101;
  2062  0015CC  90D8               	bcf	status,0,c
  2063  0015CE  3422               	rlcf	initQueue@i,w,c
  2064  0015D0  6ED9               	movwf	fsr2l,c
  2065  0015D2  3423               	rlcf	initQueue@i+1,w,c
  2066  0015D4  6EDA               	movwf	fsr2h,c
  2067  0015D6  0E43               	movlw	low _my_stack
  2068  0015D8  26D9               	addwf	fsr2l,f,c
  2069  0015DA  0E00               	movlw	high _my_stack
  2070  0015DC  22DA               	addwfc	fsr2h,f,c
  2071  0015DE  0E65               	movlw	101
  2072  0015E0  6EDE               	movwf	postinc2,c
  2073  0015E2  0E00               	movlw	0
  2074  0015E4  6EDD               	movwf	postdec2,c
  2075  0015E6  4A22               	infsnz	initQueue@i,f,c
  2076  0015E8  2A23               	incf	initQueue@i+1,f,c
  2077  0015EA  D7E8               	goto	l1959
  2078  0015EC                     l324:
  2079  0015EC  0012               	return		;funcret
  2080  0015EE                     __end_of_initQueue:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           intcon	equ	0xFF2
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postdec1	equ	0xFE5
  2090                           plusw1	equ	0xFE3
  2091                           fsr1l	equ	0xFE1
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           plusw2	equ	0xFDB
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _dutyCycleSet *****************
  2100 ;; Defined at:
  2101 ;;		line 35 in file "pwm.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;Total ram usage:        0 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    3
  2122 ;; This function calls:
  2123 ;;		_setDutyCycle
  2124 ;; This function is called by:
  2125 ;;		_lightSwitch
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text17
  2130  001764                     __ptext17:
  2131                           	opt stack 0
  2132  001764                     _dutyCycleSet:
  2133                           	opt stack 26
  2134                           
  2135                           ;pwm.c: 36: setDutyCycle(rate);
  2136                           
  2137                           ;incstack = 0
  2138  001764  505D               	movf	_rate,w,c
  2139  001766  ECA4  F00B         	call	_setDutyCycle
  2140  00176A  0012               	return		;funcret
  2141  00176C                     __end_of_dutyCycleSet:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           plusw1	equ	0xFE3
  2152                           fsr1l	equ	0xFE1
  2153                           postinc2	equ	0xFDE
  2154                           postdec2	equ	0xFDD
  2155                           plusw2	equ	0xFDB
  2156                           fsr2h	equ	0xFDA
  2157                           fsr2l	equ	0xFD9
  2158                           status	equ	0xFD8
  2159                           
  2160 ;; *************** function _dutyCycleClear *****************
  2161 ;; Defined at:
  2162 ;;		line 39 in file "pwm.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    3
  2183 ;; This function calls:
  2184 ;;		_setDutyCycle
  2185 ;; This function is called by:
  2186 ;;		_lightSwitch
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text18
  2191  00176C                     __ptext18:
  2192                           	opt stack 0
  2193  00176C                     _dutyCycleClear:
  2194                           	opt stack 26
  2195                           
  2196                           ;pwm.c: 41: setDutyCycle(0);
  2197                           
  2198                           ;incstack = 0
  2199  00176C  0E00               	movlw	0
  2200  00176E  ECA4  F00B         	call	_setDutyCycle
  2201  001772  0012               	return		;funcret
  2202  001774                     __end_of_dutyCycleClear:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           intcon	equ	0xFF2
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           postdec1	equ	0xFE5
  2212                           plusw1	equ	0xFE3
  2213                           fsr1l	equ	0xFE1
  2214                           postinc2	equ	0xFDE
  2215                           postdec2	equ	0xFDD
  2216                           plusw2	equ	0xFDB
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _lessLight *****************
  2222 ;; Defined at:
  2223 ;;		line 50 in file "pwm.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    4
  2244 ;; This function calls:
  2245 ;;		_dutyCycleDown
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text19
  2252  00173C                     __ptext19:
  2253                           	opt stack 0
  2254  00173C                     _lessLight:
  2255                           	opt stack 26
  2256                           
  2257                           ;pwm.c: 51: if (lightStatus == 1){
  2258                           
  2259                           ;incstack = 0
  2260  00173C  045C               	decf	_lightStatus,w,c
  2261  00173E  A4D8               	btfss	status,2,c
  2262  001740  0012               	return	
  2263                           
  2264                           ;pwm.c: 52: dutyCycleDown();
  2265  001742  EC8B  F00B         	call	_dutyCycleDown	;wreg free
  2266  001746  0012               	return	
  2267  001748                     __end_of_lessLight:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           intcon	equ	0xFF2
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           postdec1	equ	0xFE5
  2277                           plusw1	equ	0xFE3
  2278                           fsr1l	equ	0xFE1
  2279                           postinc2	equ	0xFDE
  2280                           postdec2	equ	0xFDD
  2281                           plusw2	equ	0xFDB
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _dutyCycleDown *****************
  2287 ;; Defined at:
  2288 ;;		line 29 in file "pwm.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		_setDutyCycle
  2311 ;; This function is called by:
  2312 ;;		_lessLight
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text20
  2317  001716                     __ptext20:
  2318                           	opt stack 0
  2319  001716                     _dutyCycleDown:
  2320                           	opt stack 26
  2321                           
  2322                           ;pwm.c: 31: rate = (0>rate?0:rate);
  2323                           
  2324                           ;incstack = 0
  2325  001716  505D               	movf	_rate,w,c
  2326  001718  0FF8               	addlw	248
  2327  00171A  6E5D               	movwf	_rate,c
  2328                           
  2329                           ;pwm.c: 32: setDutyCycle(rate);
  2330  00171C  505D               	movf	_rate,w,c
  2331  00171E  ECA4  F00B         	call	_setDutyCycle
  2332  001722  0012               	return		;funcret
  2333  001724                     __end_of_dutyCycleDown:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           intcon	equ	0xFF2
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postdec1	equ	0xFE5
  2343                           plusw1	equ	0xFE3
  2344                           fsr1l	equ	0xFE1
  2345                           postinc2	equ	0xFDE
  2346                           postdec2	equ	0xFDD
  2347                           plusw2	equ	0xFDB
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _ledOn_1 *****************
  2353 ;; Defined at:
  2354 ;;		line 138 in file "user.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    2
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;;		_I2CReceiveError
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text21
  2384  001774                     __ptext21:
  2385                           	opt stack 0
  2386  001774                     _ledOn_1:
  2387                           	opt stack 28
  2388                           
  2389                           ;user.c: 139: LATB = LATB | 0b00000010;
  2390                           
  2391                           ;incstack = 0
  2392  001774  508A               	movf	3978,w,c	;volatile
  2393  001776  0902               	iorlw	2
  2394  001778  6E8A               	movwf	3978,c	;volatile
  2395  00177A  0012               	return		;funcret
  2396  00177C                     __end_of_ledOn_1:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           intcon	equ	0xFF2
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           postdec1	equ	0xFE5
  2406                           plusw1	equ	0xFE3
  2407                           fsr1l	equ	0xFE1
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _ledOff_1 *****************
  2416 ;; Defined at:
  2417 ;;		line 151 in file "user.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;		None
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;		None
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, status,2, status,0
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;Total ram usage:        0 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    2
  2438 ;; This function calls:
  2439 ;;		Nothing
  2440 ;; This function is called by:
  2441 ;;		_main
  2442 ;;		_I2CReceiveError
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text22
  2447  00177C                     __ptext22:
  2448                           	opt stack 0
  2449  00177C                     _ledOff_1:
  2450                           	opt stack 28
  2451                           
  2452                           ;user.c: 152: LATB = LATB & 0b11111101;
  2453                           
  2454                           ;incstack = 0
  2455  00177C  508A               	movf	3978,w,c	;volatile
  2456  00177E  0BFD               	andlw	253
  2457  001780  6E8A               	movwf	3978,c	;volatile
  2458  001782  0012               	return		;funcret
  2459  001784                     __end_of_ledOff_1:
  2460                           	opt stack 0
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           intcon	equ	0xFF2
  2466                           postinc0	equ	0xFEE
  2467                           wreg	equ	0xFE8
  2468                           postdec1	equ	0xFE5
  2469                           plusw1	equ	0xFE3
  2470                           fsr1l	equ	0xFE1
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           plusw2	equ	0xFDB
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _lcdWriteString *****************
  2479 ;; Defined at:
  2480 ;;		line 95 in file "user.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  str             2   35[COMRAM] PTR unsigned char 
  2483 ;;		 -> STR_2(13), STR_1(2), 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  i               2   39[COMRAM] int 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:        6 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    4
  2502 ;; This function calls:
  2503 ;;		_lcdWriteChar
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text23
  2510  0014A4                     __ptext23:
  2511                           	opt stack 0
  2512  0014A4                     _lcdWriteString:
  2513                           	opt stack 26
  2514                           
  2515                           ;user.c: 96: for(int i = 0; str[i]; i++){
  2516                           
  2517                           ;incstack = 0
  2518  0014A4  0E00               	movlw	0
  2519  0014A6  6E29               	movwf	lcdWriteString@i+1,c
  2520  0014A8  0E00               	movlw	0
  2521  0014AA  6E28               	movwf	lcdWriteString@i,c
  2522  0014AC  D010               	goto	l2113
  2523  0014AE                     l2109:
  2524                           
  2525                           ;user.c: 97: lcdWriteChar(str[i]);
  2526  0014AE  5028               	movf	lcdWriteString@i,w,c
  2527  0014B0  2424               	addwf	lcdWriteString@str,w,c
  2528  0014B2  6E26               	movwf	??_lcdWriteString& (0+255),c
  2529  0014B4  5029               	movf	lcdWriteString@i+1,w,c
  2530  0014B6  2025               	addwfc	lcdWriteString@str+1,w,c
  2531  0014B8  6E27               	movwf	(??_lcdWriteString+1)& (0+255),c
  2532  0014BA  C026  FFF6         	movff	??_lcdWriteString,tblptrl
  2533  0014BE  C027  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2534  0014C2                     	if	0	;tblptru may be non-zero
  2535  0014C2                     	endif
  2536  0014C2                     	if	0	;tblptru may be non-zero
  2537  0014C2                     	endif
  2538  0014C2  0008               	tblrd		*
  2539  0014C4  50F5               	movf	tablat,w,c
  2540  0014C6  EC77  F00A         	call	_lcdWriteChar
  2541  0014CA  4A28               	infsnz	lcdWriteString@i,f,c
  2542  0014CC  2A29               	incf	lcdWriteString@i+1,f,c
  2543  0014CE                     l2113:
  2544  0014CE  5028               	movf	lcdWriteString@i,w,c
  2545  0014D0  2424               	addwf	lcdWriteString@str,w,c
  2546  0014D2  6E26               	movwf	??_lcdWriteString& (0+255),c
  2547  0014D4  5029               	movf	lcdWriteString@i+1,w,c
  2548  0014D6  2025               	addwfc	lcdWriteString@str+1,w,c
  2549  0014D8  6E27               	movwf	(??_lcdWriteString+1)& (0+255),c
  2550  0014DA  C026  FFF6         	movff	??_lcdWriteString,tblptrl
  2551  0014DE  C027  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2552  0014E2                     	if	0	;tblptru may be non-zero
  2553  0014E2                     	endif
  2554  0014E2                     	if	0	;tblptru may be non-zero
  2555  0014E2                     	endif
  2556  0014E2  0008               	tblrd		*
  2557  0014E4  50F5               	movf	tablat,w,c
  2558  0014E6  0900               	iorlw	0
  2559  0014E8  B4D8               	btfsc	status,2,c
  2560  0014EA  0012               	return	
  2561  0014EC  D7E0               	goto	l2109
  2562  0014EE                     __end_of_lcdWriteString:
  2563                           	opt stack 0
  2564                           tblptru	equ	0xFF8
  2565                           tblptrh	equ	0xFF7
  2566                           tblptrl	equ	0xFF6
  2567                           tablat	equ	0xFF5
  2568                           intcon	equ	0xFF2
  2569                           postinc0	equ	0xFEE
  2570                           wreg	equ	0xFE8
  2571                           postdec1	equ	0xFE5
  2572                           plusw1	equ	0xFE3
  2573                           fsr1l	equ	0xFE1
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           plusw2	equ	0xFDB
  2577                           fsr2h	equ	0xFDA
  2578                           fsr2l	equ	0xFD9
  2579                           status	equ	0xFD8
  2580                           
  2581 ;; *************** function _lcdWriteInt *****************
  2582 ;; Defined at:
  2583 ;;		line 114 in file "user.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  num             2   64[COMRAM] int 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;Total ram usage:        2 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    5
  2604 ;; This function calls:
  2605 ;;		_lcdWriteChar
  2606 ;;		_lcdWriteUI
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text24
  2613  00166C                     __ptext24:
  2614                           	opt stack 0
  2615  00166C                     _lcdWriteInt:
  2616                           	opt stack 25
  2617                           
  2618                           ;user.c: 115: if(num < 0){
  2619                           
  2620                           ;incstack = 0
  2621  00166C  AE42               	btfss	lcdWriteInt@num+1,7,c
  2622  00166E  D007               	goto	l2121
  2623                           
  2624                           ;user.c: 116: lcdWriteChar('-');
  2625  001670  0E2D               	movlw	45
  2626  001672  EC77  F00A         	call	_lcdWriteChar
  2627                           
  2628                           ;user.c: 117: num = -num;
  2629  001676  6C41               	negf	lcdWriteInt@num,c
  2630  001678  1E42               	comf	lcdWriteInt@num+1,f,c
  2631  00167A  B0D8               	btfsc	status,0,c
  2632  00167C  2A42               	incf	lcdWriteInt@num+1,f,c
  2633  00167E                     l2121:
  2634                           
  2635                           ;user.c: 118: }
  2636                           ;user.c: 119: lcdWriteUI((unsigned int) num);
  2637  00167E  C041  F029         	movff	lcdWriteInt@num,lcdWriteUI@num
  2638  001682  C042  F02A         	movff	lcdWriteInt@num+1,lcdWriteUI@num+1
  2639  001686  EC52  F009         	call	_lcdWriteUI	;wreg free
  2640  00168A  0012               	return		;funcret
  2641  00168C                     __end_of_lcdWriteInt:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           intcon	equ	0xFF2
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           plusw1	equ	0xFE3
  2652                           fsr1l	equ	0xFE1
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           plusw2	equ	0xFDB
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _lcdWriteUI *****************
  2661 ;; Defined at:
  2662 ;;		line 101 in file "user.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  num             2   40[COMRAM] unsigned int 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  stack          20   42[COMRAM] unsigned char [20]
  2667 ;;  i               2   62[COMRAM] int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:       24 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    4
  2684 ;; This function calls:
  2685 ;;		___lwdiv
  2686 ;;		___lwmod
  2687 ;;		_lcdWriteChar
  2688 ;; This function is called by:
  2689 ;;		_lcdWriteInt
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text25
  2694  0012A4                     __ptext25:
  2695                           	opt stack 0
  2696  0012A4                     _lcdWriteUI:
  2697                           	opt stack 25
  2698                           
  2699                           ;user.c: 102: char stack[20];
  2700                           ;user.c: 103: int i = 0;
  2701                           
  2702                           ;incstack = 0
  2703  0012A4  0E00               	movlw	0
  2704  0012A6  6E40               	movwf	lcdWriteUI@i+1,c
  2705  0012A8  0E00               	movlw	0
  2706  0012AA  6E3F               	movwf	lcdWriteUI@i,c
  2707  0012AC                     l1971:
  2708                           
  2709                           ;user.c: 105: stack[i++] = '0' + (num % 10);
  2710  0012AC  0E2B               	movlw	low lcdWriteUI@stack
  2711  0012AE  243F               	addwf	lcdWriteUI@i,w,c
  2712  0012B0  6ED9               	movwf	fsr2l,c
  2713  0012B2  0E00               	movlw	high lcdWriteUI@stack
  2714  0012B4  2040               	addwfc	lcdWriteUI@i+1,w,c
  2715  0012B6  6EDA               	movwf	fsr2h,c
  2716  0012B8  C029  F022         	movff	lcdWriteUI@num,___lwmod@dividend
  2717  0012BC  C02A  F023         	movff	lcdWriteUI@num+1,___lwmod@dividend+1
  2718  0012C0  0E00               	movlw	0
  2719  0012C2  6E25               	movwf	___lwmod@divisor+1,c
  2720  0012C4  0E0A               	movlw	10
  2721  0012C6  6E24               	movwf	___lwmod@divisor,c
  2722  0012C8  EC9B  F00A         	call	___lwmod	;wreg free
  2723  0012CC  5022               	movf	?___lwmod,w,c
  2724  0012CE  0F30               	addlw	48
  2725  0012D0  6EDF               	movwf	indf2,c
  2726  0012D2  4A3F               	infsnz	lcdWriteUI@i,f,c
  2727  0012D4  2A40               	incf	lcdWriteUI@i+1,f,c
  2728                           
  2729                           ;user.c: 106: num /= 10;
  2730  0012D6  C029  F022         	movff	lcdWriteUI@num,___lwdiv@dividend
  2731  0012DA  C02A  F023         	movff	lcdWriteUI@num+1,___lwdiv@dividend+1
  2732  0012DE  0E00               	movlw	0
  2733  0012E0  6E25               	movwf	___lwdiv@divisor+1,c
  2734  0012E2  0E0A               	movlw	10
  2735  0012E4  6E24               	movwf	___lwdiv@divisor,c
  2736  0012E6  EC29  F00A         	call	___lwdiv	;wreg free
  2737  0012EA  C022  F029         	movff	?___lwdiv,lcdWriteUI@num
  2738  0012EE  C023  F02A         	movff	?___lwdiv+1,lcdWriteUI@num+1
  2739                           
  2740                           ;user.c: 107: }
  2741                           ;user.c: 108: while(num != 0);
  2742  0012F2  5029               	movf	lcdWriteUI@num,w,c
  2743  0012F4  102A               	iorwf	lcdWriteUI@num+1,w,c
  2744  0012F6  B4D8               	btfsc	status,2,c
  2745  0012F8  D00D               	goto	l1981
  2746  0012FA  D7D8               	goto	l1971
  2747  0012FC                     l1979:
  2748                           
  2749                           ;user.c: 110: lcdWriteChar(stack[--i]);
  2750  0012FC  063F               	decf	lcdWriteUI@i,f,c
  2751  0012FE  A0D8               	btfss	status,0,c
  2752  001300  0640               	decf	lcdWriteUI@i+1,f,c
  2753  001302  0E2B               	movlw	low lcdWriteUI@stack
  2754  001304  243F               	addwf	lcdWriteUI@i,w,c
  2755  001306  6ED9               	movwf	fsr2l,c
  2756  001308  0E00               	movlw	high lcdWriteUI@stack
  2757  00130A  2040               	addwfc	lcdWriteUI@i+1,w,c
  2758  00130C  6EDA               	movwf	fsr2h,c
  2759  00130E  50DF               	movf	indf2,w,c
  2760  001310  EC77  F00A         	call	_lcdWriteChar
  2761  001314                     l1981:
  2762  001314  503F               	movf	lcdWriteUI@i,w,c
  2763  001316  1040               	iorwf	lcdWriteUI@i+1,w,c
  2764  001318  B4D8               	btfsc	status,2,c
  2765  00131A  0012               	return	
  2766  00131C  D7EF               	goto	l1979
  2767  00131E                     __end_of_lcdWriteUI:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           intcon	equ	0xFF2
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           plusw1	equ	0xFE3
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           postdec2	equ	0xFDD
  2782                           plusw2	equ	0xFDB
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _lcdWriteChar *****************
  2788 ;; Defined at:
  2789 ;;		line 80 in file "user.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  leter           1    wreg     unsigned char 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  leter           1   34[COMRAM] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        2 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    3
  2810 ;; This function calls:
  2811 ;;		_lcdEnable
  2812 ;; This function is called by:
  2813 ;;		_lcdWriteString
  2814 ;;		_lcdWriteUI
  2815 ;;		_lcdWriteInt
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text26
  2820  0014EE                     __ptext26:
  2821                           	opt stack 0
  2822  0014EE                     _lcdWriteChar:
  2823                           	opt stack 26
  2824                           
  2825                           ;incstack = 0
  2826                           ;lcdWriteChar@leter stored from wreg
  2827  0014EE  6E23               	movwf	lcdWriteChar@leter,c
  2828                           
  2829                           ;user.c: 81: PORTCbits.RC2 = 1;
  2830  0014F0  8482               	bsf	3970,2,c	;volatile
  2831                           
  2832                           ;user.c: 82: _delay((unsigned long)((10)*(8000000/4000.0)));
  2833  0014F2  0E1A               	movlw	26
  2834  0014F4  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2835  0014F6  0EF8               	movlw	248
  2836  0014F8                     u1127:
  2837  0014F8  2EE8               	decfsz	wreg,f,c
  2838  0014FA  D7FE               	bra	u1127
  2839  0014FC  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2840  0014FE  D7FC               	bra	u1127
  2841  001500  D000               	nop2	
  2842                           
  2843                           ;user.c: 85: PORTD = (leter >> 4) & 0b00001111;
  2844  001502  3823               	swapf	lcdWriteChar@leter,w,c
  2845  001504  0B0F               	andlw	15
  2846  001506  0B0F               	andlw	15
  2847  001508  6E83               	movwf	3971,c	;volatile
  2848                           
  2849                           ;user.c: 86: lcdEnable();
  2850  00150A  ECC2  F00B         	call	_lcdEnable	;wreg free
  2851                           
  2852                           ;user.c: 87: _delay((unsigned long)((1)*(8000000/4000.0)));
  2853  00150E  0E03               	movlw	3
  2854  001510  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2855  001512  0E98               	movlw	152
  2856  001514                     u1137:
  2857  001514  2EE8               	decfsz	wreg,f,c
  2858  001516  D7FE               	bra	u1137
  2859  001518  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2860  00151A  D7FC               	bra	u1137
  2861                           
  2862                           ;user.c: 89: PORTD = leter & 0b00001111;
  2863  00151C  5023               	movf	lcdWriteChar@leter,w,c
  2864  00151E  0B0F               	andlw	15
  2865  001520  6E83               	movwf	3971,c	;volatile
  2866                           
  2867                           ;user.c: 90: lcdEnable();
  2868  001522  ECC2  F00B         	call	_lcdEnable	;wreg free
  2869                           
  2870                           ;user.c: 91: _delay((unsigned long)((1)*(8000000/4000.0)));
  2871  001526  0E03               	movlw	3
  2872  001528  6E22               	movwf	??_lcdWriteChar& (0+255),c
  2873  00152A  0E98               	movlw	152
  2874  00152C                     u1147:
  2875  00152C  2EE8               	decfsz	wreg,f,c
  2876  00152E  D7FE               	bra	u1147
  2877  001530  2E22               	decfsz	??_lcdWriteChar& (0+255),f,c
  2878  001532  D7FC               	bra	u1147
  2879  001534  0012               	return		;funcret
  2880  001536                     __end_of_lcdWriteChar:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           intcon	equ	0xFF2
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           plusw1	equ	0xFE3
  2891                           fsr1l	equ	0xFE1
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           plusw2	equ	0xFDB
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function ___lwmod *****************
  2901 ;; Defined at:
  2902 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  dividend        2   33[COMRAM] unsigned int 
  2905 ;;  divisor         2   35[COMRAM] unsigned int 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  counter         1   37[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  2   33[COMRAM] unsigned int 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        5 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    2
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_lcdWriteUI
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text27
  2932  001536                     __ptext27:
  2933                           	opt stack 0
  2934  001536                     ___lwmod:
  2935                           	opt stack 26
  2936                           
  2937                           ;incstack = 0
  2938  001536  5024               	movf	___lwmod@divisor,w,c
  2939  001538  1025               	iorwf	___lwmod@divisor+1,w,c
  2940  00153A  B4D8               	btfsc	status,2,c
  2941  00153C  D018               	goto	l746
  2942  00153E  0E01               	movlw	1
  2943  001540  6E26               	movwf	___lwmod@counter,c
  2944  001542  D004               	goto	l1947
  2945  001544                     l1945:
  2946  001544  90D8               	bcf	status,0,c
  2947  001546  3624               	rlcf	___lwmod@divisor,f,c
  2948  001548  3625               	rlcf	___lwmod@divisor+1,f,c
  2949  00154A  2A26               	incf	___lwmod@counter,f,c
  2950  00154C                     l1947:
  2951  00154C  AE25               	btfss	___lwmod@divisor+1,7,c
  2952  00154E  D7FA               	goto	l1945
  2953  001550                     l1949:
  2954  001550  5024               	movf	___lwmod@divisor,w,c
  2955  001552  5C22               	subwf	___lwmod@dividend,w,c
  2956  001554  5025               	movf	___lwmod@divisor+1,w,c
  2957  001556  5823               	subwfb	___lwmod@dividend+1,w,c
  2958  001558  A0D8               	btfss	status,0,c
  2959  00155A  D004               	goto	l1953
  2960  00155C  5024               	movf	___lwmod@divisor,w,c
  2961  00155E  5E22               	subwf	___lwmod@dividend,f,c
  2962  001560  5025               	movf	___lwmod@divisor+1,w,c
  2963  001562  5A23               	subwfb	___lwmod@dividend+1,f,c
  2964  001564                     l1953:
  2965  001564  90D8               	bcf	status,0,c
  2966  001566  3225               	rrcf	___lwmod@divisor+1,f,c
  2967  001568  3224               	rrcf	___lwmod@divisor,f,c
  2968  00156A  2E26               	decfsz	___lwmod@counter,f,c
  2969  00156C  D7F1               	goto	l1949
  2970  00156E                     l746:
  2971  00156E  C022  F022         	movff	___lwmod@dividend,?___lwmod
  2972  001572  C023  F023         	movff	___lwmod@dividend+1,?___lwmod+1
  2973  001576  0012               	return		;funcret
  2974  001578                     __end_of___lwmod:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           intcon	equ	0xFF2
  2981                           postinc0	equ	0xFEE
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           plusw1	equ	0xFE3
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           plusw2	equ	0xFDB
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function ___lwdiv *****************
  2995 ;; Defined at:
  2996 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  dividend        2   33[COMRAM] unsigned int 
  2999 ;;  divisor         2   35[COMRAM] unsigned int 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  quotient        2   38[COMRAM] unsigned int 
  3002 ;;  counter         1   37[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2   33[COMRAM] unsigned int 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;Total ram usage:        7 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    2
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_lcdWriteUI
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text28
  3027  001452                     __ptext28:
  3028                           	opt stack 0
  3029  001452                     ___lwdiv:
  3030                           	opt stack 26
  3031                           
  3032                           ;incstack = 0
  3033  001452  0E00               	movlw	0
  3034  001454  6E28               	movwf	___lwdiv@quotient+1,c
  3035  001456  0E00               	movlw	0
  3036  001458  6E27               	movwf	___lwdiv@quotient,c
  3037  00145A  5024               	movf	___lwdiv@divisor,w,c
  3038  00145C  1025               	iorwf	___lwdiv@divisor+1,w,c
  3039  00145E  B4D8               	btfsc	status,2,c
  3040  001460  D01C               	goto	l736
  3041  001462  0E01               	movlw	1
  3042  001464  6E26               	movwf	___lwdiv@counter,c
  3043  001466  D004               	goto	l1927
  3044  001468                     l1925:
  3045  001468  90D8               	bcf	status,0,c
  3046  00146A  3624               	rlcf	___lwdiv@divisor,f,c
  3047  00146C  3625               	rlcf	___lwdiv@divisor+1,f,c
  3048  00146E  2A26               	incf	___lwdiv@counter,f,c
  3049  001470                     l1927:
  3050  001470  AE25               	btfss	___lwdiv@divisor+1,7,c
  3051  001472  D7FA               	goto	l1925
  3052  001474                     l1929:
  3053  001474  90D8               	bcf	status,0,c
  3054  001476  3627               	rlcf	___lwdiv@quotient,f,c
  3055  001478  3628               	rlcf	___lwdiv@quotient+1,f,c
  3056  00147A  5024               	movf	___lwdiv@divisor,w,c
  3057  00147C  5C22               	subwf	___lwdiv@dividend,w,c
  3058  00147E  5025               	movf	___lwdiv@divisor+1,w,c
  3059  001480  5823               	subwfb	___lwdiv@dividend+1,w,c
  3060  001482  A0D8               	btfss	status,0,c
  3061  001484  D005               	goto	l1937
  3062  001486  5024               	movf	___lwdiv@divisor,w,c
  3063  001488  5E22               	subwf	___lwdiv@dividend,f,c
  3064  00148A  5025               	movf	___lwdiv@divisor+1,w,c
  3065  00148C  5A23               	subwfb	___lwdiv@dividend+1,f,c
  3066  00148E  8027               	bsf	___lwdiv@quotient,0,c
  3067  001490                     l1937:
  3068  001490  90D8               	bcf	status,0,c
  3069  001492  3225               	rrcf	___lwdiv@divisor+1,f,c
  3070  001494  3224               	rrcf	___lwdiv@divisor,f,c
  3071  001496  2E26               	decfsz	___lwdiv@counter,f,c
  3072  001498  D7ED               	goto	l1929
  3073  00149A                     l736:
  3074  00149A  C027  F022         	movff	___lwdiv@quotient,?___lwdiv
  3075  00149E  C028  F023         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3076  0014A2  0012               	return		;funcret
  3077  0014A4                     __end_of___lwdiv:
  3078                           	opt stack 0
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           intcon	equ	0xFF2
  3084                           postinc0	equ	0xFEE
  3085                           wreg	equ	0xFE8
  3086                           postdec1	equ	0xFE5
  3087                           plusw1	equ	0xFE3
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           plusw2	equ	0xFDB
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _initPWM *****************
  3098 ;; Defined at:
  3099 ;;		line 8 in file "pwm.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;Total ram usage:        0 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    3
  3120 ;; This function calls:
  3121 ;;		_setDutyCycle
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text29
  3128  0016C2                     __ptext29:
  3129                           	opt stack 0
  3130  0016C2                     _initPWM:
  3131                           	opt stack 27
  3132                           
  3133                           ;pwm.c: 9: TRISCbits.RC1 = 0;
  3134                           
  3135                           ;incstack = 0
  3136  0016C2  9294               	bcf	3988,1,c	;volatile
  3137                           
  3138                           ;pwm.c: 10: CCP2CON = 0b00011111;
  3139  0016C4  0E1F               	movlw	31
  3140  0016C6  6EBA               	movwf	4026,c	;volatile
  3141                           
  3142                           ;pwm.c: 11: T2CON = 0x00;
  3143  0016C8  0E00               	movlw	0
  3144  0016CA  6ECA               	movwf	4042,c	;volatile
  3145                           
  3146                           ;pwm.c: 12: PR2 = 0b00110011;
  3147  0016CC  0E33               	movlw	51
  3148  0016CE  6ECB               	movwf	4043,c	;volatile
  3149                           
  3150                           ;pwm.c: 13: setDutyCycle(25);
  3151  0016D0  0E19               	movlw	25
  3152  0016D2  ECA4  F00B         	call	_setDutyCycle
  3153  0016D6  0012               	return		;funcret
  3154  0016D8                     __end_of_initPWM:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           intcon	equ	0xFF2
  3161                           postinc0	equ	0xFEE
  3162                           wreg	equ	0xFE8
  3163                           postdec1	equ	0xFE5
  3164                           plusw1	equ	0xFE3
  3165                           fsr1l	equ	0xFE1
  3166                           indf2	equ	0xFDF
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           plusw2	equ	0xFDB
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _setDutyCycle *****************
  3175 ;; Defined at:
  3176 ;;		line 16 in file "pwm.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  x               1    wreg     unsigned char 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  x               1   33[COMRAM] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        1 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    2
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_initPWM
  3201 ;;		_dutyCycleUp
  3202 ;;		_dutyCycleDown
  3203 ;;		_dutyCycleSet
  3204 ;;		_dutyCycleClear
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text30
  3209  001748                     __ptext30:
  3210                           	opt stack 0
  3211  001748                     _setDutyCycle:
  3212                           	opt stack 26
  3213                           
  3214                           ;incstack = 0
  3215                           ;setDutyCycle@x stored from wreg
  3216  001748  6E22               	movwf	setDutyCycle@x,c
  3217                           
  3218                           ;pwm.c: 17: CCPR2L = x;
  3219  00174A  C022  FFBB         	movff	setDutyCycle@x,4027	;volatile
  3220                           
  3221                           ;pwm.c: 18: T2CONbits.TMR2ON = 1;
  3222  00174E  84CA               	bsf	4042,2,c	;volatile
  3223                           
  3224                           ;pwm.c: 19: PIR1bits.CCP1IF = 0;
  3225  001750  949E               	bcf	3998,2,c	;volatile
  3226  001752  0012               	return		;funcret
  3227  001754                     __end_of_setDutyCycle:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           intcon	equ	0xFF2
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           postdec1	equ	0xFE5
  3237                           plusw1	equ	0xFE3
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _initLCD *****************
  3248 ;; Defined at:
  3249 ;;		line 47 in file "user.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        2 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    3
  3270 ;; This function calls:
  3271 ;;		_lcdEnable
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text31
  3278  00120E                     __ptext31:
  3279                           	opt stack 0
  3280  00120E                     _initLCD:
  3281                           	opt stack 27
  3282                           
  3283                           ;user.c: 48: PORTCbits.RC5 = 0;
  3284                           
  3285                           ;incstack = 0
  3286  00120E  9A82               	bcf	3970,5,c	;volatile
  3287                           
  3288                           ;user.c: 49: PORTCbits.RC2 = 0;
  3289  001210  9482               	bcf	3970,2,c	;volatile
  3290                           
  3291                           ;user.c: 50: _delay((unsigned long)((100)*(8000000/4000.0)));
  3292  001212  0E02               	movlw	2
  3293  001214  6E23               	movwf	(??_initLCD+1)& (0+255),c
  3294  001216  0E04               	movlw	4
  3295  001218  6E22               	movwf	??_initLCD& (0+255),c
  3296  00121A  0EBA               	movlw	186
  3297  00121C                     u1157:
  3298  00121C  2EE8               	decfsz	wreg,f,c
  3299  00121E  D7FE               	bra	u1157
  3300  001220  2E22               	decfsz	??_initLCD& (0+255),f,c
  3301  001222  D7FC               	bra	u1157
  3302  001224  2E23               	decfsz	(??_initLCD+1)& (0+255),f,c
  3303  001226  D7FA               	bra	u1157
  3304  001228  D000               	nop2	
  3305                           
  3306                           ;user.c: 52: PORTD = 0b00000010;
  3307  00122A  0E02               	movlw	2
  3308  00122C  6E83               	movwf	3971,c	;volatile
  3309                           
  3310                           ;user.c: 53: lcdEnable();
  3311  00122E  ECC2  F00B         	call	_lcdEnable	;wreg free
  3312                           
  3313                           ;user.c: 54: PORTD = 0b00000010;
  3314  001232  0E02               	movlw	2
  3315  001234  6E83               	movwf	3971,c	;volatile
  3316                           
  3317                           ;user.c: 55: lcdEnable();
  3318  001236  ECC2  F00B         	call	_lcdEnable	;wreg free
  3319                           
  3320                           ;user.c: 56: PORTD = 0b00001111;
  3321  00123A  0E0F               	movlw	15
  3322  00123C  6E83               	movwf	3971,c	;volatile
  3323                           
  3324                           ;user.c: 57: lcdEnable();
  3325  00123E  ECC2  F00B         	call	_lcdEnable	;wreg free
  3326                           
  3327                           ;user.c: 58: _delay((unsigned long)((70)*(8000000/4000000.0)));
  3328  001242  0E2E               	movlw	46
  3329  001244                     u1167:
  3330  001244  2EE8               	decfsz	wreg,f,c
  3331  001246  D7FE               	bra	u1167
  3332  001248  D000               	nop2	
  3333                           
  3334                           ;user.c: 60: PORTD = 0b00000000;
  3335  00124A  0E00               	movlw	0
  3336  00124C  6E83               	movwf	3971,c	;volatile
  3337                           
  3338                           ;user.c: 61: lcdEnable();
  3339  00124E  ECC2  F00B         	call	_lcdEnable	;wreg free
  3340                           
  3341                           ;user.c: 62: PORTD = 0b00001111;
  3342  001252  0E0F               	movlw	15
  3343  001254  6E83               	movwf	3971,c	;volatile
  3344                           
  3345                           ;user.c: 63: lcdEnable();
  3346  001256  ECC2  F00B         	call	_lcdEnable	;wreg free
  3347                           
  3348                           ;user.c: 64: _delay((unsigned long)((70)*(8000000/4000000.0)));
  3349  00125A  0E2E               	movlw	46
  3350  00125C                     u1177:
  3351  00125C  2EE8               	decfsz	wreg,f,c
  3352  00125E  D7FE               	bra	u1177
  3353  001260  D000               	nop2	
  3354                           
  3355                           ;user.c: 66: PORTD = 0b00000000;
  3356  001262  0E00               	movlw	0
  3357  001264  6E83               	movwf	3971,c	;volatile
  3358                           
  3359                           ;user.c: 67: lcdEnable();
  3360  001266  ECC2  F00B         	call	_lcdEnable	;wreg free
  3361                           
  3362                           ;user.c: 68: PORTD = 0b00000001;
  3363  00126A  0E01               	movlw	1
  3364  00126C  6E83               	movwf	3971,c	;volatile
  3365                           
  3366                           ;user.c: 69: lcdEnable();
  3367  00126E  ECC2  F00B         	call	_lcdEnable	;wreg free
  3368                           
  3369                           ;user.c: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  3370  001272  0E1A               	movlw	26
  3371  001274  6E22               	movwf	??_initLCD& (0+255),c
  3372  001276  0EF8               	movlw	248
  3373  001278                     u1187:
  3374  001278  2EE8               	decfsz	wreg,f,c
  3375  00127A  D7FE               	bra	u1187
  3376  00127C  2E22               	decfsz	??_initLCD& (0+255),f,c
  3377  00127E  D7FC               	bra	u1187
  3378  001280  D000               	nop2	
  3379                           
  3380                           ;user.c: 72: PORTD = 0b00000000;
  3381  001282  0E00               	movlw	0
  3382  001284  6E83               	movwf	3971,c	;volatile
  3383                           
  3384                           ;user.c: 73: lcdEnable();
  3385  001286  ECC2  F00B         	call	_lcdEnable	;wreg free
  3386                           
  3387                           ;user.c: 74: PORTD = 0b00000011;
  3388  00128A  0E03               	movlw	3
  3389  00128C  6E83               	movwf	3971,c	;volatile
  3390                           
  3391                           ;user.c: 75: lcdEnable();
  3392  00128E  ECC2  F00B         	call	_lcdEnable	;wreg free
  3393                           
  3394                           ;user.c: 76: _delay((unsigned long)((30)*(8000000/4000.0)));
  3395  001292  0E4E               	movlw	78
  3396  001294  6E22               	movwf	??_initLCD& (0+255),c
  3397  001296  0EEB               	movlw	235
  3398  001298                     u1197:
  3399  001298  2EE8               	decfsz	wreg,f,c
  3400  00129A  D7FE               	bra	u1197
  3401  00129C  2E22               	decfsz	??_initLCD& (0+255),f,c
  3402  00129E  D7FC               	bra	u1197
  3403  0012A0  F000               	nop	
  3404  0012A2  0012               	return		;funcret
  3405  0012A4                     __end_of_initLCD:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           intcon	equ	0xFF2
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           postdec1	equ	0xFE5
  3415                           plusw1	equ	0xFE3
  3416                           fsr1l	equ	0xFE1
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           plusw2	equ	0xFDB
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _lcdEnable *****************
  3426 ;; Defined at:
  3427 ;;		line 41 in file "user.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		None
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    2
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_initLCD
  3452 ;;		_lcdWriteChar
  3453 ;;		_clearDisplay
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text32
  3458  001784                     __ptext32:
  3459                           	opt stack 0
  3460  001784                     _lcdEnable:
  3461                           	opt stack 26
  3462                           
  3463                           ;user.c: 42: PORTCbits.RC5 = 1;
  3464                           
  3465                           ;incstack = 0
  3466  001784  8A82               	bsf	3970,5,c	;volatile
  3467                           
  3468                           ;user.c: 43: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3469  001786  D000               	nop2		;2 cycle nop
  3470                           
  3471                           ;user.c: 44: PORTCbits.RC5 = 0;
  3472  001788  9A82               	bcf	3970,5,c	;volatile
  3473  00178A  0012               	return		;funcret
  3474  00178C                     __end_of_lcdEnable:
  3475                           	opt stack 0
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           intcon	equ	0xFF2
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           plusw1	equ	0xFE3
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           plusw2	equ	0xFDB
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _InitApp *****************
  3495 ;; Defined at:
  3496 ;;		line 28 in file "user.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		None
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    2
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		_main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text33
  3525  00178E                     __ptext33:
  3526                           	opt stack 0
  3527  00178E                     _InitApp:
  3528                           	opt stack 28
  3529                           
  3530                           ;incstack = 0
  3531  00178E  0012               	return		;funcret
  3532  001790                     __end_of_InitApp:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           intcon	equ	0xFF2
  3539                           postinc0	equ	0xFEE
  3540                           wreg	equ	0xFE8
  3541                           postdec1	equ	0xFE5
  3542                           plusw1	equ	0xFE3
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           plusw2	equ	0xFDB
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _ConfigureOscillator *****************
  3553 ;; Defined at:
  3554 ;;		line 24 in file "system.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		None
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    2
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text34
  3583  001790                     __ptext34:
  3584                           	opt stack 0
  3585  001790                     _ConfigureOscillator:
  3586                           	opt stack 28
  3587                           
  3588                           ;incstack = 0
  3589  001790  0012               	return		;funcret
  3590  001792                     __end_of_ConfigureOscillator:
  3591                           	opt stack 0
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           intcon	equ	0xFF2
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           plusw1	equ	0xFE3
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           plusw2	equ	0xFDB
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _low_isr *****************
  3611 ;; Defined at:
  3612 ;;		line 75 in file "interrupts.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		None
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;Total ram usage:       17 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    1
  3633 ;; This function calls:
  3634 ;;		Nothing
  3635 ;; This function is called by:
  3636 ;;		Interrupt level 1
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	intcodelo
  3641  000018                     __pintcodelo:
  3642                           	opt stack 0
  3643  000018                     _low_isr:
  3644                           	opt stack 25
  3645                           
  3646                           ;incstack = 0
  3647  000018  805E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3648  00001A  CFD8 F011          	movff	status,??_low_isr
  3649  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3650  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3651  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3652  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3653  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3654  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3655  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3656  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3657  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3658  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3659  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3660  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3661  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3662  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3663  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3664  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3665  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3666  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3667  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3668  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3669  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3670  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3671  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3672  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3673  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3674  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3675  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3676  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3677  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3678  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3679  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3680  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3681  00009E  C011  FFD8         	movff	??_low_isr,status
  3682  0000A2  905E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3683  0000A4  0010               	retfie	
  3684  0000A6                     __end_of_low_isr:
  3685                           	opt stack 0
  3686                           pclatu	equ	0xFFB
  3687                           pclath	equ	0xFFA
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           postinc0	equ	0xFEE
  3696                           fsr0h	equ	0xFEA
  3697                           fsr0l	equ	0xFE9
  3698                           wreg	equ	0xFE8
  3699                           postdec1	equ	0xFE5
  3700                           plusw1	equ	0xFE3
  3701                           fsr1h	equ	0xFE2
  3702                           fsr1l	equ	0xFE1
  3703                           bsr	equ	0xFE0
  3704                           indf2	equ	0xFDF
  3705                           postinc2	equ	0xFDE
  3706                           postdec2	equ	0xFDD
  3707                           plusw2	equ	0xFDB
  3708                           fsr2h	equ	0xFDA
  3709                           fsr2l	equ	0xFD9
  3710                           status	equ	0xFD8
  3711                           
  3712 ;; *************** function _high_isr *****************
  3713 ;; Defined at:
  3714 ;;		line 30 in file "interrupts.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;		None
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  1    wreg      void 
  3721 ;; Registers used:
  3722 ;;		wreg, status,2, status,0
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;Total ram usage:       16 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		Interrupt level 2
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	intcode
  3742  000008                     __pintcode:
  3743                           	opt stack 0
  3744  000008                     _high_isr:
  3745                           	opt stack 25
  3746                           
  3747                           ;incstack = 0
  3748  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3749  00000A  EFBB  F008         	goto	int_func
  3750                           pclatu	equ	0xFFB
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           postinc0	equ	0xFEE
  3760                           fsr0h	equ	0xFEA
  3761                           fsr0l	equ	0xFE9
  3762                           wreg	equ	0xFE8
  3763                           postdec1	equ	0xFE5
  3764                           plusw1	equ	0xFE3
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           bsr	equ	0xFE0
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           plusw2	equ	0xFDB
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776                           	psect	intcode_body
  3777  001176                     __pintcode_body:
  3778                           	opt stack 25
  3779  001176                     int_func:
  3780                           	opt stack 25
  3781  001176  CFFA F003          	movff	pclath,??_high_isr+2
  3782  00117A  CFFB F004          	movff	pclatu,??_high_isr+3
  3783  00117E  CFE9 F005          	movff	fsr0l,??_high_isr+4
  3784  001182  CFEA F006          	movff	fsr0h,??_high_isr+5
  3785  001186  CFE1 F007          	movff	fsr1l,??_high_isr+6
  3786  00118A  CFE2 F008          	movff	fsr1h,??_high_isr+7
  3787  00118E  CFD9 F009          	movff	fsr2l,??_high_isr+8
  3788  001192  CFDA F00A          	movff	fsr2h,??_high_isr+9
  3789  001196  CFF3 F00B          	movff	prodl,??_high_isr+10
  3790  00119A  CFF4 F00C          	movff	prodh,??_high_isr+11
  3791  00119E  CFF6 F00D          	movff	tblptrl,??_high_isr+12
  3792  0011A2  CFF7 F00E          	movff	tblptrh,??_high_isr+13
  3793  0011A6  CFF8 F00F          	movff	tblptru,??_high_isr+14
  3794  0011AA  CFF5 F010          	movff	tablat,??_high_isr+15
  3795                           
  3796                           ;interrupts.c: 66: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  3797  0011AE  BAF2               	btfsc	intcon,5,c	;volatile
  3798  0011B0  A4F2               	btfss	intcon,2,c	;volatile
  3799  0011B2  D00F               	goto	i2l10
  3800                           
  3801                           ;interrupts.c: 67: valuePort = valuePort + 1;
  3802  0011B4  285B               	incf	_valuePort,w,c
  3803  0011B6  6E5B               	movwf	_valuePort,c
  3804                           
  3805                           ;interrupts.c: 68: _delay(200000);
  3806  0011B8  0E02               	movlw	2
  3807  0011BA  6E02               	movwf	(??_high_isr+1)& (0+255),c
  3808  0011BC  0E04               	movlw	4
  3809  0011BE  6E01               	movwf	??_high_isr& (0+255),c
  3810  0011C0  0EBA               	movlw	186
  3811  0011C2                     i2u120_47:
  3812  0011C2  2EE8               	decfsz	wreg,f,c
  3813  0011C4  D7FE               	bra	i2u120_47
  3814  0011C6  2E01               	decfsz	??_high_isr& (0+255),f,c
  3815  0011C8  D7FC               	bra	i2u120_47
  3816  0011CA  2E02               	decfsz	(??_high_isr+1)& (0+255),f,c
  3817  0011CC  D7FA               	bra	i2u120_47
  3818  0011CE  D000               	nop2	
  3819                           
  3820                           ;interrupts.c: 69: INTCONbits.TMR0IF = 0;
  3821  0011D0  94F2               	bcf	intcon,2,c	;volatile
  3822  0011D2                     i2l10:
  3823  0011D2  C010  FFF5         	movff	??_high_isr+15,tablat
  3824  0011D6  C00F  FFF8         	movff	??_high_isr+14,tblptru
  3825  0011DA  C00E  FFF7         	movff	??_high_isr+13,tblptrh
  3826  0011DE  C00D  FFF6         	movff	??_high_isr+12,tblptrl
  3827  0011E2  C00C  FFF4         	movff	??_high_isr+11,prodh
  3828  0011E6  C00B  FFF3         	movff	??_high_isr+10,prodl
  3829  0011EA  C00A  FFDA         	movff	??_high_isr+9,fsr2h
  3830  0011EE  C009  FFD9         	movff	??_high_isr+8,fsr2l
  3831  0011F2  C008  FFE2         	movff	??_high_isr+7,fsr1h
  3832  0011F6  C007  FFE1         	movff	??_high_isr+6,fsr1l
  3833  0011FA  C006  FFEA         	movff	??_high_isr+5,fsr0h
  3834  0011FE  C005  FFE9         	movff	??_high_isr+4,fsr0l
  3835  001202  C004  FFFB         	movff	??_high_isr+3,pclatu
  3836  001206  C003  FFFA         	movff	??_high_isr+2,pclath
  3837  00120A  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3838  00120C  0011               	retfie		f
  3839  00120E                     __end_of_high_isr:
  3840                           	opt stack 0
  3841                           pclatu	equ	0xFFB
  3842                           pclath	equ	0xFFA
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           postinc0	equ	0xFEE
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           postdec1	equ	0xFE5
  3855                           plusw1	equ	0xFE3
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           bsr	equ	0xFE0
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           plusw2	equ	0xFDB
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           pclatu	equ	0xFFB
  3867                           pclath	equ	0xFFA
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           postinc0	equ	0xFEE
  3876                           fsr0h	equ	0xFEA
  3877                           fsr0l	equ	0xFE9
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           plusw1	equ	0xFE3
  3881                           fsr1h	equ	0xFE2
  3882                           fsr1l	equ	0xFE1
  3883                           bsr	equ	0xFE0
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           postdec2	equ	0xFDD
  3887                           plusw2	equ	0xFDB
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892                           	psect	rparam
  3893  0000                     pclatu	equ	0xFFB
  3894                           pclath	equ	0xFFA
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           postinc0	equ	0xFEE
  3903                           fsr0h	equ	0xFEA
  3904                           fsr0l	equ	0xFE9
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           plusw1	equ	0xFE3
  3908                           fsr1h	equ	0xFE2
  3909                           fsr1l	equ	0xFE1
  3910                           bsr	equ	0xFE0
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           plusw2	equ	0xFDB
  3915                           fsr2h	equ	0xFDA
  3916                           fsr2l	equ	0xFD9
  3917                           status	equ	0xFD8
  3918                           
  3919                           	psect	temp
  3920  00005E                     btemp:
  3921                           	opt stack 0
  3922  00005E                     	ds	1
  3923  0000                     int$flags	set	btemp
  3924                           pclatu	equ	0xFFB
  3925                           pclath	equ	0xFFA
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           intcon	equ	0xFF2
  3933                           postinc0	equ	0xFEE
  3934                           fsr0h	equ	0xFEA
  3935                           fsr0l	equ	0xFE9
  3936                           wreg	equ	0xFE8
  3937                           postdec1	equ	0xFE5
  3938                           plusw1	equ	0xFE3
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           bsr	equ	0xFE0
  3942                           indf2	equ	0xFDF
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           plusw2	equ	0xFDB
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        17
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      93
    BANK0           128     19      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    lcdWriteString@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_lcdWriteInt
    _readZ->_readDataByte
    _readGesture->_readDataByte
    _readDataByte->_writeDataByte
    _writeDataByte->_sendByte
    _myQueuePush->___awmod
    _myQueueCheck->___awmod
    _moreLight->_dutyCycleUp
    _dutyCycleUp->_setDutyCycle
    _lightSwitch->_initQueue
    _dutyCycleSet->_setDutyCycle
    _dutyCycleClear->_setDutyCycle
    _dutyCycleDown->_setDutyCycle
    _lcdWriteString->_lcdWriteChar
    _lcdWriteInt->_lcdWriteUI
    _lcdWriteUI->___lwdiv
    _initPWM->_setDutyCycle

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    5664
                                              0 BANK0     19    19      0
                _ConfigureOscillator
                            _InitApp
                            _initLCD
                            _initPWM
                          _initQueue
                        _lcdWriteInt
                     _lcdWriteString
                           _ledOff_1
                            _ledOn_1
                          _lessLight
                        _lightSwitch
                          _moreLight
                       _myQueueCheck
                        _myQueuePush
                        _readGesture
                              _readZ
 ---------------------------------------------------------------------------------
 (1) _readZ                                                1     1      0     858
                                             39 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (1) _readGesture                                          1     1      0     858
                                             39 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (2) _readDataByte                                         3     2      1     824
                                             36 COMRAM     3     2      1
                         _I2CRestart
                        _receiveByte
                           _sendByte
                      _writeDataByte
 ---------------------------------------------------------------------------------
 (3) _writeDataByte                                        2     1      1     170
                                             34 COMRAM     2     1      1
                            _I2CInit
                           _I2CStart
                           _sendByte
 ---------------------------------------------------------------------------------
 (4) _sendByte                                             1     1      0      31
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _receiveByte                                          1     1      0      34
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myQueuePush                                          2     0      2     849
                                             39 COMRAM     2     0      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _myQueueCheck                                         6     4      2     840
                                             39 COMRAM     6     4      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     741
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _moreLight                                            0     0      0      68
                        _dutyCycleUp
 ---------------------------------------------------------------------------------
 (2) _dutyCycleUp                                          2     2      0      68
                                             34 COMRAM     2     2      0
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lightSwitch                                          0     0      0     161
                     _dutyCycleClear
                       _dutyCycleSet
                          _initQueue
 ---------------------------------------------------------------------------------
 (2) _initQueue                                            2     2      0      99
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dutyCycleSet                                         0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (2) _dutyCycleClear                                       0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lessLight                                            0     0      0      31
                      _dutyCycleDown
 ---------------------------------------------------------------------------------
 (2) _dutyCycleDown                                        0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _ledOn_1                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledOff_1                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       6     4      2     346
                                             35 COMRAM     6     4      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdWriteInt                                          2     0      2    1421
                                             64 COMRAM     2     0      2
                       _lcdWriteChar
                         _lcdWriteUI
 ---------------------------------------------------------------------------------
 (2) _lcdWriteUI                                          24    22      2    1186
                                             40 COMRAM    24    22      2
                            ___lwdiv
                            ___lwmod
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _lcdWriteChar                                         2     2      0      62
                                             33 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             33 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             33 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (3) _setDutyCycle                                         1     1      0      31
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0       0
                                             33 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) _lcdEnable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _initLCD
     _lcdEnable
   _initPWM
     _setDutyCycle
   _initQueue
   _lcdWriteInt
     _lcdWriteChar
       _lcdEnable
     _lcdWriteUI
       ___lwdiv
       ___lwmod
       _lcdWriteChar
         _lcdEnable
   _lcdWriteString
     _lcdWriteChar
       _lcdEnable
   _ledOff_1
   _ledOn_1
   _lessLight
     _dutyCycleDown
       _setDutyCycle
   _lightSwitch
     _dutyCycleClear
       _setDutyCycle
     _dutyCycleSet
       _setDutyCycle
     _initQueue
   _moreLight
     _dutyCycleUp
       _setDutyCycle
   _myQueueCheck
     ___awmod
   _myQueuePush
     ___awmod
   _readGesture
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte
   _readZ
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     13      22       5       26.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7F      34        0.0%
DATA                 0      0      7F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 27 15:30:34 2017

                 lcdWriteUI@i 003F                            bsr 000FE0                   __CFG_BORV$3 000000  
         __size_of_I2CRestart 0008                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                 __CFG_WDT$ON 000000                           l203 175E                           l215 16EC  
                         l209 1710                           l324 15EC                           l197 1756  
                         l736 149A                           l746 156E                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           u950 1374  
                         _ack 005A               __end_of_I2CInit 1730                  ___awmod@sign 0027  
                         wreg 000FE8                 lcdWriteUI@num 0029                ??_lcdWriteChar 0022  
                        l2001 163E                          l2021 13A4                          l2031 13C6  
                        l2121 167E                          l2113 14CE                          l2033 13CA  
                        l2041 13E8                          l2025 13B0                          l2109 14AE  
                        l2045 13F6                          l2037 13DE                          l2029 13BE  
                        l2133 1336                          l2143 1386                          l2153 169C  
                        l2129 1326                          l2161 15FC                          l2139 137E  
                        l2251 113A                          l2235 10DA                          l2157 16A4  
                        l2173 1608                          l2165 1600                          l2261 1162  
                        l2253 1144                          l2255 114A                          l2169 1604  
                        l2179 160C                          l2259 1150                          l1925 1468  
                        l1927 1470                          l1937 1490                          l1929 1474  
                        l1953 1564                          l1945 1544                          l1947 154C  
                        l1971 12AC                          l1963 15CC                          l1949 1550  
                        l1981 1314                          l1959 15BC                          l1979 12FC  
                        l1999 1636                          STR_1 100E                          STR_2 1001  
                        u1001 1052                          u1107 112C                          u1117 116A  
                        u1127 14F8                          u1047 103A                          u1137 1514  
                        u1057 1068                          u1147 152C                          u1067 108A  
                        u1157 121C                          u1077 10A0                          _LATB 000F8A  
                        u1167 1244                          u1087 10BA                          u1177 125C  
                        u1097 10D0                          u1187 1278                          u1197 1298  
                        i2l10 11D2              ??_dutyCycleClear 0023                          _main 1012  
                        _iter 0057                          _rate 005D                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 005E              __end_of_I2CStart 175C                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               __end_of_InitApp 1790  
                ?_readGesture 0001                  ?_lightSwitch 0001                lcdWriteInt@num 0041  
                       ?_main 0001               __end_of___awmod 1400                         _T0CON 000FD5  
                       _T2CON 000FCA               __end_of___lwdiv 14A4               __end_of___lwmod 1578  
                       _PORTB 000F81                         _PORTD 000F83                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
         _ConfigureOscillator 1790                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
             __end_of_ledOn_1 177C                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                ?_dutyCycleUp 0001                 __CFG_WRTB$OFF 000000                         __addr 0059  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD 12A4  
              __CFG_EBTRB$OFF 000000               __end_of_initPWM 16D8                         _readZ 16D8  
             __end_of_low_isr 00A6                         pclath 000FFA                         tablat 000FF5  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
                ?_receiveByte 0001                __CFG_PBADEN$ON 000000          ?_ConfigureOscillator 0001  
             __initialization 1400                 ?_readDataByte 0025                  __end_of_main 1176  
             lcdWriteUI@stack 002B                     ??_I2CInit 0022                __CFG_OSC$RCIO6 000000  
                      ??_main 0080                 __activetblptr 000002              ??_lcdWriteString 0026  
                ?_myQueuePush 0028                        ?_readZ 0001                        _CCPR2L 000FBB  
                ??_I2CRestart 0022                        _SSPBUF 000FC9                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022          __size_of_lcdWriteInt 0020              __end_of_ledOff_1 1784  
              ??_readDataByte 0026                __CFG_XINST$OFF 000000                 ?_dutyCycleSet 0001  
            __end_of_high_isr 120E          __end_of_lcdWriteChar 1536                __CFG_STVREN$ON 000000  
                   ??___awmod 0026               lcdWriteString@i 0028                     ??___lwdiv 0026  
                   ??___lwmod 0026                        clear_0 143E               ___awmod@divisor 0024  
             ___awmod@counter 0026                     ??_ledOn_1 0022            __end_of_I2CRestart 1764  
            __end_of_sendByte 1716                     ??_initLCD 0022                     ??_initPWM 0023  
                __pdataCOMRAM 005C        __size_of_writeDataByte 0018                     ?_I2CStart 0001  
                __mediumconst 0000                     ??_low_isr 0011                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8        __size_of_dutyCycleDown 000E  
                  __accesstop 0080       __end_of__initialization 1444                 ___rparam_used 000001  
              ??_dutyCycleSet 0023                __pcstackCOMRAM 0001                  __pidataBANK0 16F8  
               __end_of_readZ 16E8            __size_of_lcdEnable 0008          __size_of_readGesture 0034  
        __size_of_lightSwitch 001E                    ??_I2CStart 0022                       ??_readZ 0028  
        __size_of_dutyCycleUp 0028                 ?_setDutyCycle 0001                 ?_myQueueCheck 0028  
          __size_of_initQueue 003A            __size_of_lessLight 000C                 _writeDataByte 16AA  
        __size_of_receiveByte 0010                 _dutyCycleDown 1716               _dutyCycleUp$589 0023  
          __size_of_moreLight 000C                       _CCP2CON 000FBA                       _I2CInit 1724  
                  _lcdWriteUI 12A4          __end_of_readDataByte 166C                     ?_ledOff_1 0001  
        __size_of_myQueuePush 003C              writeDataByte@reg 0023                     ?_high_isr 0001  
              ??_setDutyCycle 0022                ??_myQueueCheck 002A             __end_of_lcdEnable 178C  
              ?_writeDataByte 0023                       _InitApp 178E         __size_of_lcdWriteChar 0048  
                   ?_sendByte 0001                       __Hparam 0000                       __Lparam 0000  
              ?_dutyCycleDown 0001                       ___awmod 1390                       ___lwdiv 1452  
                     ___lwmod 1536                  __psmallconst 1000                       __pcinit 1400  
               setDutyCycle@x 0022                       __ramtop 1000                       _ledOn_1 1774  
               myQueueCheck@i 002C                       __ptext0 1012                       __ptext1 16D8  
                     __ptext2 15EE                       __ptext3 164A                       __ptext4 16AA  
                     __ptext5 1708                       __ptext6 1754                       __ptext7 1724  
                     __ptext8 16E8                       __ptext9 175C                       _initLCD 120E  
                     _initPWM 16C2             __end_of_initQueue 15EE             __end_of_lessLight 1748  
                   _T2CONbits 000FCA              ___awmod@dividend 0022                       _low_isr 0018  
        __end_of_dutyCycleSet 176C                    ??_ledOff_1 0022                       main@ges 0091  
                     main@pos 0092                       main@str 0082                    ??_high_isr 0001  
                _lcdWriteChar 14EE                __pintcode_body 1176             __end_of_moreLight 173C  
        end_of_initialization 1444                 __Lmediumconst 0000                       int_func 1176  
            readDataByte@addr 0027              readDataByte@retc 0026                    ??_sendByte 0022  
          readGesture@gesture 0028                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_dutyCycleClear 0008  
                   _PORTCbits 000F82                   ?_lcdWriteUI 0029                     _TRISCbits 000F94  
           __size_of_I2CStart 0008   __end_of_ConfigureOscillator 1792               ??_writeDataByte 0024  
             receiveByte@retc 0022                 ??_lcdWriteInt 0043               ??_dutyCycleDown 0023  
               __pidataCOMRAM 178C          __end_of_setDutyCycle 1754          __end_of_myQueueCheck 1390  
       __size_of_readDataByte 0022           start_initialization 1400       __size_of_lcdWriteString 004A  
                  readZ@z_pos 0028           __size_of_lcdWriteUI 007A             lcdWriteChar@leter 0023  
                  initQueue@i 0022                  _readDataByte 164A           __end_of_lcdWriteInt 168C  
               ??_readGesture 0028                   __pdataBANK0 0093              __CFG_LPT1OSC$OFF 000000  
               ??_lightSwitch 0024                      ?_I2CInit 0001         __size_of_dutyCycleSet 0008  
                 __pbssCOMRAM 0043                 ??_dutyCycleUp 0023                 __pcstackBANK0 0080  
           __size_of_ledOff_1 0008             __size_of_high_isr 1206                 ??_receiveByte 0022  
                    ?_InitApp 0001              ___lwdiv@dividend 0022             __CFG_CCP2MX$PORTC 000000  
                   _lcdEnable 1784                  _dutyCycleSet 1764                     __pintcode 0008  
           __size_of_sendByte 000E                _dutyCycleClear 176C                      ?___awmod 0022  
                    ?___lwdiv 0022                      ?___lwmod 0022                   __pintcodelo 0018  
                    ?_ledOn_1 0001                      ?_initLCD 0001                      ?_initPWM 0001  
                 __smallconst 1000                 ??_myQueuePush 002A           __end_of_readGesture 1622  
                    _I2CStart 1754           __end_of_lightSwitch 16AA                      ?_low_isr 0001  
                   _initQueue 15B4              ___lwdiv@quotient 0027                     _lessLight 173C  
              __size_of_readZ 0010           __end_of_dutyCycleUp 164A                  myQueuePush@x 0028  
                 _lcdWriteInt 166C                     _moreLight 1730               readDataByte@reg 0025  
      __end_of_dutyCycleClear 1774                      i2u120_47 11C2                      _PIR1bits 000F9E  
                  ?_lcdEnable 0001                     _valuePort 005B              __CFG_WDTPS$32768 000000  
       __size_of_setDutyCycle 000C         __size_of_myQueueCheck 0072                     main@F2922 0093  
         __end_of_receiveByte 16F8             writeDataByte@addr 0024              __size_of_I2CInit 000C  
                ??_lcdWriteUI 002B                    ?_initQueue 0001                    ?_lessLight 0001  
                   copy_data0 1414                    _I2CRestart 175C           __end_of_myQueuePush 15B4  
              _lcdWriteString 14A4                  _setDutyCycle 1748                  _myQueueCheck 131E  
                  ?_moreLight 0001              __size_of_InitApp 0002                      __Hrparam 0000  
             ?_dutyCycleClear 0001                      __Lrparam 0000            __end_of_lcdWriteUI 131E  
          __CFG_BOREN$SBORDIS 000000                   _readGesture 15EE              __size_of___awmod 0070  
                 _lightStatus 005C              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                 _lightSwitch 168C              __size_of_ledOn_1 0008              __size_of_initLCD 0096  
            __size_of_initPWM 0016             lcdWriteString@str 0024                     sendByte@c 0022  
             ___lwdiv@divisor 0024                   _dutyCycleUp 1622               ___lwdiv@counter 0026  
            __size_of_low_isr 008E                      _ledOff_1 177C                      __ptext10 1578  
                    __ptext11 131E                      __ptext20 1716                      __ptext12 1390  
                    __ptext21 1774                      __ptext13 1730                      __ptext30 1748  
                    __ptext22 177C                      __ptext14 1622                      __ptext31 120E  
                    __ptext23 14A4                      __ptext15 168C                      __ptext32 1784  
                    __ptext24 166C                      __ptext16 15B4                      __ptext33 178E  
                    __ptext25 12A4                      __ptext17 1764                      __ptext34 1790  
                    __ptext26 14EE                      __ptext18 176C                      __ptext27 1536  
                    __ptext19 173C                      __ptext28 1452                      __ptext29 16C2  
      __end_of_lcdWriteString 14EE                      _high_isr 0008                 __size_of_main 0164  
       __end_of_writeDataByte 16C2                   _receiveByte 16E8                      _sendByte 1708  
__size_of_ConfigureOscillator 0002         __end_of_dutyCycleDown 1724                   ??_lcdEnable 0022  
                    _my_stack 0043                      int$flags 005E                    _INTCONbits 000FF2  
                 _myQueuePush 1578                   ??_initQueue 0022                   ??_lessLight 0023  
             ?_lcdWriteString 0024                   ?_I2CRestart 0001                      intlevel1 0000  
                    intlevel2 0000              ___lwmod@dividend 0022                   ??_moreLight 0025  
             ___lwmod@divisor 0024               ___lwmod@counter 0026                   _SSPCON1bits 000FC6  
                 _SSPCON2bits 000FC5                 ?_lcdWriteChar 0001                  ?_lcdWriteInt 0041  
