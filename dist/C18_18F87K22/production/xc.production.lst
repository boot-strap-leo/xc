

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Apr 21 15:29:31 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18LF4620 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataCOMRAM
    92  00188C                     __pidataCOMRAM:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _lightStatus
    96  00188C  01                 	db	1
    97                           
    98                           ;initializer for _rate
    99  00188D  2D                 	db	45
   100                           
   101                           	psect	idataBANK0
   102  001816                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for main@F2932
   106  001816  50                 	db	80
   107  001817  52                 	db	82
   108  001818  4F                 	db	79
   109  001819  47                 	db	71
   110  00181A  52                 	db	82
   111  00181B  41                 	db	65
   112  00181C  4D                 	db	77
   113  00181D  20                 	db	32
   114  00181E  42                 	db	66
   115  00181F  45                 	db	69
   116  001820  47                 	db	71
   117  001821  49                 	db	73
   118  001822  4E                 	db	78
   119  001823  00                 	db	0
   120  001824  00                 	db	0
   121  0000                     _T2CONbits	set	4042
   122  0000                     _T2CON	set	4042
   123  0000                     _CCP2CON	set	4026
   124  0000                     _CCPR2L	set	4027
   125  0000                     _PR2	set	4043
   126  0000                     _SSPBUF	set	4041
   127  0000                     _PIR1bits	set	3998
   128  0000                     _SSPCON2bits	set	4037
   129  0000                     _SSPCON1bits	set	4038
   130  0000                     _LATB	set	3978
   131  0000                     _PORTD	set	3971
   132  0000                     _PORTCbits	set	3970
   133  0000                     _T0CON	set	4053
   134  0000                     _TRISCbits	set	3988
   135  0000                     _PORTB	set	3969
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISD	set	3989
   138  0000                     _TRISA	set	3986
   139  0000                     _TRISB	set	3987
   140  0000                     _TMR0L	set	4054
   141  0000                     _TMR0H	set	4055
   142  0000                     _INTCONbits	set	4082
   143                           
   144                           	psect	smallconst
   145  001000                     __psmallconst:
   146                           	opt stack 0
   147  001000  00                 	db	0
   148  001001                     STR_2:
   149  001001  4C                 	db	76	;'L'
   150  001002  49                 	db	73	;'I'
   151  001003  47                 	db	71	;'G'
   152  001004  48                 	db	72	;'H'
   153  001005  54                 	db	84	;'T'
   154  001006  5F                 	db	95	;'_'
   155  001007  53                 	db	83	;'S'
   156  001008  57                 	db	87	;'W'
   157  001009  49                 	db	73	;'I'
   158  00100A  54                 	db	84	;'T'
   159  00100B  43                 	db	67	;'C'
   160  00100C  48                 	db	72	;'H'
   161  00100D  00                 	db	0
   162  00100E                     STR_1:
   163  00100E  20                 	db	32
   164  00100F  00                 	db	0
   165                           
   166                           ; #config settings
   167  001010  00                 	db	0	; dummy byte at the end
   168  0000                     
   169                           	psect	cinit
   170  001574                     __pcinit:
   171                           	opt stack 0
   172  001574                     start_initialization:
   173                           	opt stack 0
   174  001574                     __initialization:
   175                           	opt stack 0
   176                           
   177                           ; Initialize objects allocated to BANK0 (15 bytes)
   178                           ; load TBLPTR registers with __pidataBANK0
   179  001574  0E16               	movlw	low __pidataBANK0
   180  001576  6EF6               	movwf	tblptrl,c
   181  001578  0E18               	movlw	high __pidataBANK0
   182  00157A  6EF7               	movwf	tblptrh,c
   183  00157C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   184  00157E  6EF8               	movwf	tblptru,c
   185  001580  EE00  F0A7         	lfsr	0,__pdataBANK0
   186  001584  EE10 F00F          	lfsr	1,15
   187  001588                     copy_data0:
   188  001588  0009               	tblrd		*+
   189  00158A  CFF5 FFEE          	movff	tablat,postinc0
   190  00158E  50E5               	movf	postdec1,w,c
   191  001590  50E1               	movf	fsr1l,w,c
   192  001592  E1FA               	bnz	copy_data0
   193                           
   194                           ; Initialize objects allocated to COMRAM (2 bytes)
   195                           ; load TBLPTR registers with __pidataCOMRAM
   196  001594  0E8C               	movlw	low __pidataCOMRAM
   197  001596  6EF6               	movwf	tblptrl,c
   198  001598  0E18               	movlw	high __pidataCOMRAM
   199  00159A  6EF7               	movwf	tblptrh,c
   200  00159C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   201  00159E  6EF8               	movwf	tblptru,c
   202  0015A0  0009               	tblrd		*+	;fetch initializer
   203  0015A2  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   204  0015A6  0009               	tblrd		*+	;fetch initializer
   205  0015A8  CFF5 F050          	movff	tablat,__pdataCOMRAM+1
   206                           
   207                           ; Clear objects allocated to COMRAM (33 bytes)
   208  0015AC  EE00  F02E         	lfsr	0,__pbssCOMRAM
   209  0015B0  0E21               	movlw	33
   210  0015B2                     clear_0:
   211  0015B2  6AEE               	clrf	postinc0,c
   212  0015B4  06E8               	decf	wreg,f,c
   213  0015B6  E1FD               	bnz	clear_0
   214  0015B8                     end_of_initialization:
   215                           	opt stack 0
   216  0015B8                     __end_of__initialization:
   217                           	opt stack 0
   218  0015B8  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  0015BA  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  0015BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  0015BE  6EF8               	movwf	tblptru,c
   222  0015C0  0100               	movlb	0
   223  0015C2  EF09  F008         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           postdec1	equ	0xFE5
   231                           fsr1l	equ	0xFE1
   232                           
   233                           	psect	bssCOMRAM
   234  00002E                     __pbssCOMRAM:
   235                           	opt stack 0
   236  00002E                     _my_stack:
   237                           	opt stack 0
   238  00002E                     	ds	20
   239  000042                     _iter:
   240                           	opt stack 0
   241  000042                     	ds	2
   242  000044                     _servo_counter:
   243                           	opt stack 0
   244  000044                     	ds	2
   245  000046                     _offCounter:
   246                           	opt stack 0
   247  000046                     	ds	2
   248  000048                     _onCounter:
   249                           	opt stack 0
   250  000048                     	ds	2
   251  00004A                     _servo_direction:
   252                           	opt stack 0
   253  00004A                     	ds	2
   254  00004C                     __addr:
   255                           	opt stack 0
   256  00004C                     	ds	1
   257  00004D                     _ack:
   258                           	opt stack 0
   259  00004D                     	ds	1
   260  00004E                     _valuePort:
   261                           	opt stack 0
   262  00004E                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  00004F                     __pdataCOMRAM:
   274                           	opt stack 0
   275  00004F                     _lightStatus:
   276                           	opt stack 0
   277  00004F                     	ds	1
   278  000050                     _rate:
   279                           	opt stack 0
   280  000050                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	dataBANK0
   291  0000A7                     __pdataBANK0:
   292                           	opt stack 0
   293  0000A7                     main@F2932:
   294                           	opt stack 0
   295  0000A7                     	ds	15
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	cstackBANK0
   306  000080                     __pcstackBANK0:
   307                           	opt stack 0
   308  000080                     lcdWriteUI@stack:
   309                           	opt stack 0
   310                           
   311                           ; 20 bytes @ 0x0
   312  000080                     	ds	20
   313  000094                     lcdWriteUI@i:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x14
   317  000094                     	ds	2
   318  000096                     main@str:
   319                           	opt stack 0
   320                           
   321                           ; 15 bytes @ 0x16
   322  000096                     	ds	15
   323  0000A5                     main@pos:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x25
   327  0000A5                     	ds	1
   328  0000A6                     main@ges:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x26
   332  0000A6                     	ds	1
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           postdec1	equ	0xFE5
   340                           fsr1l	equ	0xFE1
   341                           
   342                           	psect	cstackCOMRAM
   343  000001                     __pcstackCOMRAM:
   344                           	opt stack 0
   345  000001                     ??_high_isr:
   346  000001                     
   347                           ; 2 bytes @ 0x0
   348  000001                     	ds	14
   349  00000F                     ??_low_isr:
   350                           
   351                           ; 1 bytes @ 0xE
   352  00000F                     	ds	17
   353  000020                     ??_initLCD:
   354  000020                     ??_lcdWriteChar:
   355  000020                     ?___awmod:
   356                           	opt stack 0
   357  000020                     ?___lwdiv:
   358                           	opt stack 0
   359  000020                     ?___lwmod:
   360                           	opt stack 0
   361  000020                     sendByte@c:
   362                           	opt stack 0
   363  000020                     receiveByte@retc:
   364                           	opt stack 0
   365  000020                     setDutyCycle@x:
   366                           	opt stack 0
   367  000020                     initQueue@i:
   368                           	opt stack 0
   369  000020                     startTurning@dirct:
   370                           	opt stack 0
   371  000020                     ___awmod@dividend:
   372                           	opt stack 0
   373  000020                     ___lwdiv@dividend:
   374                           	opt stack 0
   375  000020                     ___lwmod@dividend:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x1F
   379  000020                     	ds	1
   380  000021                     ??_dutyCycleDown:
   381  000021                     lcdWriteChar@leter:
   382                           	opt stack 0
   383  000021                     writeDataByte@reg:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x20
   387  000021                     	ds	1
   388  000022                     writeDataByte@addr:
   389                           	opt stack 0
   390  000022                     lcdWriteString@str:
   391                           	opt stack 0
   392  000022                     ___awmod@divisor:
   393                           	opt stack 0
   394  000022                     ___lwdiv@divisor:
   395                           	opt stack 0
   396  000022                     ___lwmod@divisor:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x21
   400  000022                     	ds	1
   401  000023                     readDataByte@reg:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x22
   405  000023                     	ds	1
   406  000024                     ??_lcdWriteString:
   407  000024                     readDataByte@retc:
   408                           	opt stack 0
   409  000024                     ___awmod@counter:
   410                           	opt stack 0
   411  000024                     ___lwdiv@counter:
   412                           	opt stack 0
   413  000024                     ___lwmod@counter:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x23
   417  000024                     	ds	1
   418  000025                     readDataByte@addr:
   419                           	opt stack 0
   420  000025                     ___awmod@sign:
   421                           	opt stack 0
   422  000025                     _dutyCycleDown$627:
   423                           	opt stack 0
   424  000025                     ___lwdiv@quotient:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x24
   428  000025                     	ds	1
   429  000026                     ?_myQueueCheck:
   430                           	opt stack 0
   431  000026                     readZ@z_pos:
   432                           	opt stack 0
   433  000026                     readGesture@gesture:
   434                           	opt stack 0
   435  000026                     lcdWriteString@i:
   436                           	opt stack 0
   437  000026                     myQueuePush@x:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x25
   441  000026                     	ds	1
   442  000027                     lcdWriteUI@num:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x26
   446  000027                     	ds	1
   447  000028                     
   448                           ; 1 bytes @ 0x27
   449  000028                     	ds	1
   450  000029                     lcdWriteInt@num:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x28
   454  000029                     	ds	1
   455  00002A                     myQueueCheck@i:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x29
   459  00002A                     	ds	1
   460  00002B                     
   461                           ; 1 bytes @ 0x2A
   462  00002B                     	ds	1
   463  00002C                     ??_main:
   464                           
   465                           ; 1 bytes @ 0x2B
   466  00002C                     	ds	2
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476 ;;
   477 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   478 ;;
   479 ;; *************** function _main *****************
   480 ;; Defined at:
   481 ;;		line 45 in file "main.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;  ges             1   38[BANK0 ] enum E2865
   486 ;;  str            15   22[BANK0 ] unsigned char [15]
   487 ;;  pos             1   37[BANK0 ] unsigned char 
   488 ;; Return value:  Size  Location     Type
   489 ;;                  2   95[None  ] int 
   490 ;; Registers used:
   491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   498 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;Total ram usage:       19 bytes
   502 ;; Hardware stack levels required when called:    7
   503 ;; This function calls:
   504 ;;		_ConfigureOscillator
   505 ;;		_InitApp
   506 ;;		_initLCD
   507 ;;		_initPWM
   508 ;;		_initQueue
   509 ;;		_lcdWriteInt
   510 ;;		_lcdWriteString
   511 ;;		_lessLight
   512 ;;		_lightSwitch
   513 ;;		_moreLight
   514 ;;		_myQueueCheck
   515 ;;		_myQueuePush
   516 ;;		_readGesture
   517 ;;		_readZ
   518 ;;		_startTurning
   519 ;; This function is called by:
   520 ;;		Startup code after reset
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           	psect	text0
   525  001012                     __ptext0:
   526                           	opt stack 0
   527  001012                     _main:
   528                           	opt stack 24
   529                           
   530                           ;main.c: 48: ConfigureOscillator();
   531                           
   532                           ;incstack = 0
   533  001012  EC48  F00C         	call	_ConfigureOscillator	;wreg free
   534                           
   535                           ;main.c: 51: InitApp();
   536  001016  EC47  F00C         	call	_InitApp	;wreg free
   537                           
   538                           ;main.c: 53: TRISB=0X00;
   539  00101A  0E00               	movlw	0
   540  00101C  6E93               	movwf	3987,c	;volatile
   541                           
   542                           ;main.c: 54: TRISA=0XFF;
   543  00101E  6892               	setf	3986,c	;volatile
   544                           
   545                           ;main.c: 55: TRISD = 0x00;
   546  001020  0E00               	movlw	0
   547  001022  6E95               	movwf	3989,c	;volatile
   548                           
   549                           ;main.c: 56: TRISC = 0b00011000;
   550  001024  0E18               	movlw	24
   551  001026  6E94               	movwf	3988,c	;volatile
   552                           
   553                           ;main.c: 57: PORTB=0X00;
   554  001028  0E00               	movlw	0
   555  00102A  6E81               	movwf	3969,c	;volatile
   556                           
   557                           ;main.c: 59: TRISCbits.RC2 = 0;
   558  00102C  9494               	bcf	3988,2,c	;volatile
   559                           
   560                           ;main.c: 60: T0CON = 0b10001000;
   561  00102E  0E88               	movlw	136
   562  001030  6ED5               	movwf	4053,c	;volatile
   563                           
   564                           ;main.c: 61: INTCONbits.TMR0IE = 1;
   565  001032  8AF2               	bsf	intcon,5,c	;volatile
   566                           
   567                           ;main.c: 62: (INTCONbits.GIE = 1);
   568  001034  8EF2               	bsf	intcon,7,c	;volatile
   569                           
   570                           ;main.c: 65: _delay((unsigned long)((70)*(4000000/4000.0)));
   571  001036  0E5B               	movlw	91
   572  001038  6E2C               	movwf	??_main& (0+255),c
   573  00103A  0EE8               	movlw	232
   574  00103C                     u1187:
   575  00103C  2EE8               	decfsz	wreg,f,c
   576  00103E  D7FE               	bra	u1187
   577  001040  2E2C               	decfsz	??_main& (0+255),f,c
   578  001042  D7FC               	bra	u1187
   579                           
   580                           ;main.c: 66: initLCD();
   581  001044  EC19  F009         	call	_initLCD	;wreg free
   582                           
   583                           ;main.c: 67: unsigned char str[15] = "PROGRAM BEGIN";
   584  001048  EE20  F0A7         	lfsr	2,main@F2932
   585  00104C  EE10  F096         	lfsr	1,main@str
   586  001050  0E0E               	movlw	14
   587  001052                     u1161:
   588  001052  CFDB FFE3          	movff	plusw2,plusw1
   589  001056  06E8               	decf	wreg,f,c
   590  001058  E2FC               	bc	u1161
   591                           
   592                           ;main.c: 68: lcdWriteString(str);
   593  00105A  0E96               	movlw	low main@str
   594  00105C  6E22               	movwf	lcdWriteString@str,c
   595  00105E  0E00               	movlw	high main@str
   596  001060  6E23               	movwf	lcdWriteString@str+1,c
   597  001062  ECE4  F009         	call	_lcdWriteString	;wreg free
   598                           
   599                           ;main.c: 69: _delay((unsigned long)((500)*(4000000/4000.0)));
   600  001066  0E03               	movlw	3
   601  001068  6E2D               	movwf	(??_main+1)& (0+255),c
   602  00106A  0E8A               	movlw	138
   603  00106C  6E2C               	movwf	??_main& (0+255),c
   604  00106E  0E56               	movlw	86
   605  001070                     u1197:
   606  001070  2EE8               	decfsz	wreg,f,c
   607  001072  D7FE               	bra	u1197
   608  001074  2E2C               	decfsz	??_main& (0+255),f,c
   609  001076  D7FC               	bra	u1197
   610  001078  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   611  00107A  D7FA               	bra	u1197
   612                           
   613                           ;main.c: 73: unsigned char pos;
   614                           ;main.c: 74: _addr = 0x20;
   615  00107C  0E20               	movlw	32
   616  00107E  6E4C               	movwf	__addr,c
   617                           
   618                           ;main.c: 75: initPWM();
   619  001080  ECE7  F00B         	call	_initPWM	;wreg free
   620                           
   621                           ;main.c: 76: initQueue();
   622  001084  EC4B  F00B         	call	_initQueue	;wreg free
   623  001088                     l2326:
   624                           
   625                           ;main.c: 85: pos = readZ();
   626  001088  ECFB  F00B         	call	_readZ	;wreg free
   627  00108C  0100               	movlb	0	; () banked
   628  00108E  6FA5               	movwf	main@pos& (0+255),b
   629                           
   630                           ; BSR set to: 0
   631                           ;main.c: 86: lcdWriteString(" ");
   632  001090  0E0E               	movlw	low STR_1
   633  001092  6E22               	movwf	lcdWriteString@str,c
   634  001094  0E10               	movlw	high STR_1
   635  001096  6E23               	movwf	lcdWriteString@str+1,c
   636  001098  ECE4  F009         	call	_lcdWriteString	;wreg free
   637                           
   638                           ;main.c: 87: lcdWriteInt(rate);
   639  00109C  C050  F029         	movff	_rate,lcdWriteInt@num
   640  0010A0  6A2A               	clrf	lcdWriteInt@num+1,c
   641  0010A2  ECB0  F00B         	call	_lcdWriteInt	;wreg free
   642                           
   643                           ;main.c: 88: myQueuePush((int)pos);
   644  0010A6  C0A5  F026         	movff	main@pos,myQueuePush@x
   645  0010AA  6A27               	clrf	myQueuePush@x+1,c
   646  0010AC  EC2D  F00B         	call	_myQueuePush	;wreg free
   647                           
   648                           ;main.c: 91: if (myQueueCheck() == 1){
   649  0010B0  EC1F  F00A         	call	_myQueueCheck	;wreg free
   650  0010B4  0426               	decf	?_myQueueCheck,w,c
   651  0010B6  1027               	iorwf	?_myQueueCheck+1,w,c
   652  0010B8  A4D8               	btfss	status,2,c
   653  0010BA  D013               	goto	l2342
   654                           
   655                           ;main.c: 92: lightSwitch();
   656  0010BC  ECC0  F00B         	call	_lightSwitch	;wreg free
   657                           
   658                           ;main.c: 93: lcdWriteString("LIGHT_SWITCH");
   659  0010C0  0E01               	movlw	low STR_2
   660  0010C2  6E22               	movwf	lcdWriteString@str,c
   661  0010C4  0E10               	movlw	high STR_2
   662  0010C6  6E23               	movwf	lcdWriteString@str+1,c
   663  0010C8  ECE4  F009         	call	_lcdWriteString	;wreg free
   664                           
   665                           ;main.c: 94: _delay((unsigned long)((500)*(4000000/4000.0)));
   666  0010CC  0E03               	movlw	3
   667  0010CE  6E2D               	movwf	(??_main+1)& (0+255),c
   668  0010D0  0E8A               	movlw	138
   669  0010D2  6E2C               	movwf	??_main& (0+255),c
   670  0010D4  0E56               	movlw	86
   671  0010D6                     u1207:
   672  0010D6  2EE8               	decfsz	wreg,f,c
   673  0010D8  D7FE               	bra	u1207
   674  0010DA  2E2C               	decfsz	??_main& (0+255),f,c
   675  0010DC  D7FC               	bra	u1207
   676  0010DE  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   677  0010E0  D7FA               	bra	u1207
   678  0010E2                     l2342:
   679                           
   680                           ;main.c: 95: }
   681                           ;main.c: 100: GestureType ges = readGesture();
   682  0010E2  EC85  F00B         	call	_readGesture	;wreg free
   683  0010E6  0100               	movlb	0	; () banked
   684  0010E8  6FA6               	movwf	main@ges& (0+255),b
   685                           
   686                           ;main.c: 101: switch (ges){
   687  0010EA  D006               	goto	l2350
   688  0010EC                     l2344:
   689                           
   690                           ; BSR set to: 0
   691                           ;main.c: 104: moreLight();
   692  0010EC  EC20  F00C         	call	_moreLight	;wreg free
   693                           
   694                           ;main.c: 105: break;
   695  0010F0  D00C               	goto	l2352
   696  0010F2                     l2346:
   697                           
   698                           ;main.c: 108: lessLight();
   699  0010F2  EC26  F00C         	call	_lessLight	;wreg free
   700                           
   701                           ;main.c: 117: }
   702                           
   703                           ;main.c: 116: break;
   704                           
   705                           ;main.c: 114: default:
   706                           
   707                           ;main.c: 113: break;
   708                           
   709                           ;main.c: 110: case UP_SWIPE:
   710                           
   711                           ;main.c: 109: break;
   712  0010F6  D009               	goto	l2352
   713  0010F8                     l2350:
   714  0010F8  0100               	movlb	0	; () banked
   715  0010FA  51A6               	movf	main@ges& (0+255),w,b
   716                           
   717                           ; Switch size 1, requested type "space"
   718                           ; Number of cases is 3, Range of values is 1 to 3
   719                           ; switch strategies available:
   720                           ; Name         Instructions Cycles
   721                           ; simple_byte           10     6 (average)
   722                           ;	Chosen strategy is simple_byte
   723  0010FC  0A01               	xorlw	1	; case 1
   724  0010FE  B4D8               	btfsc	status,2,c
   725  001100  D7F5               	goto	l2344
   726  001102  0A03               	xorlw	3	; case 2
   727  001104  B4D8               	btfsc	status,2,c
   728  001106  D7F5               	goto	l2346
   729  001108  0A01               	xorlw	1	; case 3
   730  00110A                     l2352:
   731                           
   732                           ;main.c: 118: _delay((unsigned long)((80)*(4000000/4000.0)));
   733  00110A  0E68               	movlw	104
   734  00110C  6E2C               	movwf	??_main& (0+255),c
   735  00110E  0EE4               	movlw	228
   736  001110                     u1217:
   737  001110  2EE8               	decfsz	wreg,f,c
   738  001112  D7FE               	bra	u1217
   739  001114  2E2C               	decfsz	??_main& (0+255),f,c
   740  001116  D7FC               	bra	u1217
   741  001118  D000               	nop2	
   742  00111A  D7B6               	goto	l2326
   743  00111C                     l2354:
   744                           
   745                           ;main.c: 139: startTurning(3);
   746  00111C  0E00               	movlw	0
   747  00111E  6E21               	movwf	startTurning@dirct+1,c
   748  001120  0E03               	movlw	3
   749  001122  6E20               	movwf	startTurning@dirct,c
   750  001124  ECF2  F00B         	call	_startTurning	;wreg free
   751                           
   752                           ;main.c: 140: _delay((unsigned long)((600)*(4000000/4000.0)));
   753  001128  0E04               	movlw	4
   754  00112A  6E2D               	movwf	(??_main+1)& (0+255),c
   755  00112C  0E0C               	movlw	12
   756  00112E  6E2C               	movwf	??_main& (0+255),c
   757  001130  0E34               	movlw	52
   758  001132                     u1227:
   759  001132  2EE8               	decfsz	wreg,f,c
   760  001134  D7FE               	bra	u1227
   761  001136  2E2C               	decfsz	??_main& (0+255),f,c
   762  001138  D7FC               	bra	u1227
   763  00113A  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   764  00113C  D7FA               	bra	u1227
   765                           
   766                           ;main.c: 141: startTurning(2);
   767  00113E  0E00               	movlw	0
   768  001140  6E21               	movwf	startTurning@dirct+1,c
   769  001142  0E02               	movlw	2
   770  001144  6E20               	movwf	startTurning@dirct,c
   771  001146  ECF2  F00B         	call	_startTurning	;wreg free
   772                           
   773                           ;main.c: 142: _delay((unsigned long)((600)*(4000000/4000.0)));
   774  00114A  0E04               	movlw	4
   775  00114C  6E2D               	movwf	(??_main+1)& (0+255),c
   776  00114E  0E0C               	movlw	12
   777  001150  6E2C               	movwf	??_main& (0+255),c
   778  001152  0E34               	movlw	52
   779  001154                     u1237:
   780  001154  2EE8               	decfsz	wreg,f,c
   781  001156  D7FE               	bra	u1237
   782  001158  2E2C               	decfsz	??_main& (0+255),f,c
   783  00115A  D7FC               	bra	u1237
   784  00115C  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   785  00115E  D7FA               	bra	u1237
   786                           
   787                           ;main.c: 143: startTurning(1);
   788  001160  0E00               	movlw	0
   789  001162  6E21               	movwf	startTurning@dirct+1,c
   790  001164  0E01               	movlw	1
   791  001166  6E20               	movwf	startTurning@dirct,c
   792  001168  ECF2  F00B         	call	_startTurning	;wreg free
   793                           
   794                           ;main.c: 144: _delay((unsigned long)((600)*(4000000/4000.0)));
   795  00116C  0E04               	movlw	4
   796  00116E  6E2D               	movwf	(??_main+1)& (0+255),c
   797  001170  0E0C               	movlw	12
   798  001172  6E2C               	movwf	??_main& (0+255),c
   799  001174  0E34               	movlw	52
   800  001176                     u1247:
   801  001176  2EE8               	decfsz	wreg,f,c
   802  001178  D7FE               	bra	u1247
   803  00117A  2E2C               	decfsz	??_main& (0+255),f,c
   804  00117C  D7FC               	bra	u1247
   805  00117E  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   806  001180  D7FA               	bra	u1247
   807                           
   808                           ;main.c: 145: startTurning(2);
   809  001182  0E00               	movlw	0
   810  001184  6E21               	movwf	startTurning@dirct+1,c
   811  001186  0E02               	movlw	2
   812  001188  6E20               	movwf	startTurning@dirct,c
   813  00118A  ECF2  F00B         	call	_startTurning	;wreg free
   814                           
   815                           ;main.c: 146: _delay((unsigned long)((600)*(4000000/4000.0)));
   816  00118E  0E04               	movlw	4
   817  001190  6E2D               	movwf	(??_main+1)& (0+255),c
   818  001192  0E0C               	movlw	12
   819  001194  6E2C               	movwf	??_main& (0+255),c
   820  001196  0E34               	movlw	52
   821  001198                     u1257:
   822  001198  2EE8               	decfsz	wreg,f,c
   823  00119A  D7FE               	bra	u1257
   824  00119C  2E2C               	decfsz	??_main& (0+255),f,c
   825  00119E  D7FC               	bra	u1257
   826  0011A0  2E2D               	decfsz	(??_main+1)& (0+255),f,c
   827  0011A2  D7FA               	bra	u1257
   828  0011A4  D7BB               	goto	l2354
   829  0011A6                     __end_of_main:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           intcon	equ	0xFF2
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           plusw1	equ	0xFE3
   840                           fsr1l	equ	0xFE1
   841                           plusw2	equ	0xFDB
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _startTurning *****************
   845 ;; Defined at:
   846 ;;		line 5 in file "servo.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  dirct           2   31[COMRAM] unsigned int 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, status,2
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   860 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;Total ram usage:        2 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    3
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text1
   875  0017E4                     __ptext1:
   876                           	opt stack 0
   877  0017E4                     _startTurning:
   878                           	opt stack 27
   879                           
   880                           ;servo.c: 6: servo_direction = dirct;
   881                           
   882                           ;incstack = 0
   883  0017E4  C020  F04A         	movff	startTurning@dirct,_servo_direction
   884  0017E8  C021  F04B         	movff	startTurning@dirct+1,_servo_direction+1
   885                           
   886                           ;servo.c: 7: servo_counter = 0;
   887  0017EC  0E00               	movlw	0
   888  0017EE  6E45               	movwf	_servo_counter+1,c
   889  0017F0  0E00               	movlw	0
   890  0017F2  6E44               	movwf	_servo_counter,c
   891  0017F4  0012               	return		;funcret
   892  0017F6                     __end_of_startTurning:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           intcon	equ	0xFF2
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           plusw1	equ	0xFE3
   903                           fsr1l	equ	0xFE1
   904                           plusw2	equ	0xFDB
   905                           status	equ	0xFD8
   906                           
   907 ;; *************** function _readZ *****************
   908 ;; Defined at:
   909 ;;		line 117 in file "I2C.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  z_pos           1   37[COMRAM] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      unsigned char 
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;Total ram usage:        1 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    6
   930 ;; This function calls:
   931 ;;		_readDataByte
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text2
   938  0017F6                     __ptext2:
   939                           	opt stack 0
   940  0017F6                     _readZ:
   941                           	opt stack 24
   942                           
   943                           ;I2C.c: 118: unsigned char z_pos;
   944                           ;I2C.c: 119: z_pos = readDataByte(_addr, 0x0A);
   945                           
   946                           ;incstack = 0
   947  0017F6  0E0A               	movlw	10
   948  0017F8  6E23               	movwf	readDataByte@reg,c
   949  0017FA  504C               	movf	__addr,w,c
   950  0017FC  EC9F  F00B         	call	_readDataByte
   951  001800  6E26               	movwf	readZ@z_pos,c
   952                           
   953                           ;I2C.c: 120: return z_pos;
   954  001802  5026               	movf	readZ@z_pos,w,c
   955  001804  0012               	return	
   956  001806                     __end_of_readZ:
   957                           	opt stack 0
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           intcon	equ	0xFF2
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           plusw1	equ	0xFE3
   967                           fsr1l	equ	0xFE1
   968                           plusw2	equ	0xFDB
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _readGesture *****************
   972 ;; Defined at:
   973 ;;		line 154 in file "I2C.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  gesture         1   37[COMRAM] unsigned char 
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      enum E2865
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;Total ram usage:        1 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    6
   994 ;; This function calls:
   995 ;;		_readDataByte
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text3
  1002  00170A                     __ptext3:
  1003                           	opt stack 0
  1004  00170A                     _readGesture:
  1005                           	opt stack 24
  1006                           
  1007                           ;I2C.c: 155: unsigned char gesture;
  1008                           ;I2C.c: 156: gesture = readDataByte(_addr, 0x04);
  1009                           
  1010                           ;incstack = 0
  1011  00170A  0E04               	movlw	4
  1012  00170C  6E23               	movwf	readDataByte@reg,c
  1013  00170E  504C               	movf	__addr,w,c
  1014  001710  EC9F  F00B         	call	_readDataByte
  1015  001714  6E26               	movwf	readGesture@gesture,c
  1016                           
  1017                           ;I2C.c: 162: switch (gesture){
  1018  001716  D008               	goto	l2276
  1019  001718                     l2258:
  1020                           
  1021                           ;I2C.c: 164: return RIGHT_SWIPE;
  1022  001718  0E01               	movlw	1
  1023  00171A  0012               	return	
  1024  00171C                     l2262:
  1025                           
  1026                           ;I2C.c: 166: return LEFT_SWIPE;
  1027  00171C  0E02               	movlw	2
  1028  00171E  0012               	return	
  1029  001720                     l2266:
  1030                           
  1031                           ;I2C.c: 168: return UP_SWIPE;
  1032  001720  0E03               	movlw	3
  1033  001722  0012               	return	
  1034  001724                     l2270:
  1035                           
  1036                           ;I2C.c: 170: return NO_GESTURE;
  1037  001724  0EFF               	movlw	255
  1038                           
  1039                           ;I2C.c: 171: }
  1040  001726  0012               	return	
  1041  001728                     l2276:
  1042  001728  5026               	movf	readGesture@gesture,w,c
  1043                           
  1044                           ; Switch size 1, requested type "space"
  1045                           ; Number of cases is 3, Range of values is 1 to 3
  1046                           ; switch strategies available:
  1047                           ; Name         Instructions Cycles
  1048                           ; simple_byte           10     6 (average)
  1049                           ;	Chosen strategy is simple_byte
  1050  00172A  0A01               	xorlw	1	; case 1
  1051  00172C  B4D8               	btfsc	status,2,c
  1052  00172E  D7F4               	goto	l2258
  1053  001730  0A03               	xorlw	3	; case 2
  1054  001732  B4D8               	btfsc	status,2,c
  1055  001734  D7F3               	goto	l2262
  1056  001736  0A01               	xorlw	1	; case 3
  1057  001738  B4D8               	btfsc	status,2,c
  1058  00173A  D7F2               	goto	l2266
  1059  00173C  D7F3               	goto	l2270
  1060  00173E                     __end_of_readGesture:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           intcon	equ	0xFF2
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           plusw1	equ	0xFE3
  1071                           fsr1l	equ	0xFE1
  1072                           plusw2	equ	0xFDB
  1073                           status	equ	0xFD8
  1074                           
  1075 ;; *************** function _readDataByte *****************
  1076 ;; Defined at:
  1077 ;;		line 92 in file "I2C.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  addr            1    wreg     unsigned char 
  1080 ;;  reg             1   34[COMRAM] unsigned char 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  addr            1   36[COMRAM] unsigned char 
  1083 ;;  retc            1   35[COMRAM] unsigned char 
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      unsigned char 
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, status,0, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1093 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;Total ram usage:        3 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; Hardware stack levels required when called:    5
  1100 ;; This function calls:
  1101 ;;		_I2CRestart
  1102 ;;		_receiveByte
  1103 ;;		_sendByte
  1104 ;;		_writeDataByte
  1105 ;; This function is called by:
  1106 ;;		_readZ
  1107 ;;		_readGesture
  1108 ;;		_readX
  1109 ;;		_positionAvailable
  1110 ;;		_gestureAvailable
  1111 ;;		_readGestureSpeed
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text4
  1116  00173E                     __ptext4:
  1117                           	opt stack 0
  1118  00173E                     _readDataByte:
  1119                           	opt stack 24
  1120                           
  1121                           ;incstack = 0
  1122                           ;readDataByte@addr stored from wreg
  1123  00173E  6E25               	movwf	readDataByte@addr,c
  1124                           
  1125                           ;I2C.c: 93: writeDataByte(addr, reg);
  1126  001740  C023  F021         	movff	readDataByte@reg,writeDataByte@reg
  1127  001744  5025               	movf	readDataByte@addr,w,c
  1128  001746  ECCF  F00B         	call	_writeDataByte
  1129                           
  1130                           ;I2C.c: 94: I2CRestart();
  1131  00174A  EC36  F00C         	call	_I2CRestart	;wreg free
  1132                           
  1133                           ;I2C.c: 95: sendByte(addr | 0x01);
  1134  00174E  5025               	movf	readDataByte@addr,w,c
  1135  001750  0901               	iorlw	1
  1136  001752  EC13  F00C         	call	_sendByte
  1137                           
  1138                           ;I2C.c: 96: unsigned char retc = receiveByte();
  1139  001756  EC03  F00C         	call	_receiveByte	;wreg free
  1140  00175A  6E24               	movwf	readDataByte@retc,c
  1141                           
  1142                           ;I2C.c: 97: return retc;
  1143  00175C  5024               	movf	readDataByte@retc,w,c
  1144  00175E  0012               	return	
  1145  001760                     __end_of_readDataByte:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           intcon	equ	0xFF2
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           plusw1	equ	0xFE3
  1156                           fsr1l	equ	0xFE1
  1157                           plusw2	equ	0xFDB
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _writeDataByte *****************
  1161 ;; Defined at:
  1162 ;;		line 85 in file "I2C.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  addr            1    wreg     unsigned char 
  1165 ;;  reg             1   32[COMRAM] unsigned char 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  addr            1   33[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      void 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1177 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;Total ram usage:        2 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    4
  1184 ;; This function calls:
  1185 ;;		_I2CInit
  1186 ;;		_I2CStart
  1187 ;;		_sendByte
  1188 ;; This function is called by:
  1189 ;;		_readDataByte
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text5
  1194  00179E                     __ptext5:
  1195                           	opt stack 0
  1196  00179E                     _writeDataByte:
  1197                           	opt stack 24
  1198                           
  1199                           ;incstack = 0
  1200                           ;writeDataByte@addr stored from wreg
  1201  00179E  6E22               	movwf	writeDataByte@addr,c
  1202                           
  1203                           ;I2C.c: 86: I2CInit();
  1204  0017A0  EC1A  F00C         	call	_I2CInit	;wreg free
  1205                           
  1206                           ;I2C.c: 87: I2CStart();
  1207  0017A4  EC32  F00C         	call	_I2CStart	;wreg free
  1208                           
  1209                           ;I2C.c: 88: sendByte(addr);
  1210  0017A8  5022               	movf	writeDataByte@addr,w,c
  1211  0017AA  EC13  F00C         	call	_sendByte
  1212                           
  1213                           ;I2C.c: 89: sendByte(reg);
  1214  0017AE  5021               	movf	writeDataByte@reg,w,c
  1215  0017B0  EC13  F00C         	call	_sendByte
  1216  0017B4  0012               	return		;funcret
  1217  0017B6                     __end_of_writeDataByte:
  1218                           	opt stack 0
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           intcon	equ	0xFF2
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           plusw1	equ	0xFE3
  1228                           fsr1l	equ	0xFE1
  1229                           plusw2	equ	0xFDB
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function _sendByte *****************
  1233 ;; Defined at:
  1234 ;;		line 69 in file "I2C.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  c               1    wreg     unsigned char 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  c               1   31[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    3
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_writeDataByte
  1259 ;;		_readDataByte
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text6
  1264  001826                     __ptext6:
  1265                           	opt stack 0
  1266  001826                     _sendByte:
  1267                           	opt stack 24
  1268                           
  1269                           ;incstack = 0
  1270                           ;sendByte@c stored from wreg
  1271  001826  6E20               	movwf	sendByte@c,c
  1272                           
  1273                           ;I2C.c: 70: PIR1bits.SSPIF = 0;
  1274  001828  969E               	bcf	3998,3,c	;volatile
  1275                           
  1276                           ;I2C.c: 71: SSPBUF = c;
  1277  00182A  C020  FFC9         	movff	sendByte@c,4041	;volatile
  1278  00182E                     l232:
  1279  00182E  B69E               	btfsc	3998,3,c	;volatile
  1280  001830  0012               	return	
  1281  001832  D7FD               	goto	l232
  1282  001834                     __end_of_sendByte:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           intcon	equ	0xFF2
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           plusw1	equ	0xFE3
  1293                           fsr1l	equ	0xFE1
  1294                           plusw2	equ	0xFDB
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _I2CStart *****************
  1298 ;; Defined at:
  1299 ;;		line 58 in file "I2C.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		None
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    3
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_writeDataByte
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text7
  1328  001864                     __ptext7:
  1329                           	opt stack 0
  1330  001864                     _I2CStart:
  1331                           	opt stack 24
  1332                           
  1333                           ;I2C.c: 60: SSPCON2bits.SEN = 1;;
  1334                           
  1335                           ;incstack = 0
  1336  001864  80C5               	bsf	4037,0,c	;volatile
  1337  001866                     l220:
  1338  001866  A0C5               	btfss	4037,0,c	;volatile
  1339  001868  0012               	return	
  1340  00186A  D7FD               	goto	l220
  1341  00186C                     __end_of_I2CStart:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           intcon	equ	0xFF2
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           postdec1	equ	0xFE5
  1351                           plusw1	equ	0xFE3
  1352                           fsr1l	equ	0xFE1
  1353                           plusw2	equ	0xFDB
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _I2CInit *****************
  1357 ;; Defined at:
  1358 ;;		line 19 in file "I2C.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		None
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    3
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_writeDataByte
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text8
  1387  001834                     __ptext8:
  1388                           	opt stack 0
  1389  001834                     _I2CInit:
  1390                           	opt stack 24
  1391                           
  1392                           ;I2C.c: 20: SSPCON1bits.SSPM0 = 0;
  1393                           
  1394                           ;incstack = 0
  1395  001834  90C6               	bcf	4038,0,c	;volatile
  1396                           
  1397                           ;I2C.c: 21: SSPCON1bits.SSPM1 = 0;
  1398  001836  92C6               	bcf	4038,1,c	;volatile
  1399                           
  1400                           ;I2C.c: 22: SSPCON1bits.SSPM2 = 0;
  1401  001838  94C6               	bcf	4038,2,c	;volatile
  1402                           
  1403                           ;I2C.c: 23: SSPCON1bits.SSPM3 = 1;
  1404  00183A  86C6               	bsf	4038,3,c	;volatile
  1405                           
  1406                           ;I2C.c: 25: SSPCON1bits.SSPEN = 1;
  1407  00183C  8AC6               	bsf	4038,5,c	;volatile
  1408  00183E  0012               	return		;funcret
  1409  001840                     __end_of_I2CInit:
  1410                           	opt stack 0
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           intcon	equ	0xFF2
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postdec1	equ	0xFE5
  1419                           plusw1	equ	0xFE3
  1420                           fsr1l	equ	0xFE1
  1421                           plusw2	equ	0xFDB
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _receiveByte *****************
  1425 ;; Defined at:
  1426 ;;		line 75 in file "I2C.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  retc            1   31[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      unsigned char 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1444 ;;Total ram usage:        1 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    3
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_readDataByte
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text9
  1455  001806                     __ptext9:
  1456                           	opt stack 0
  1457  001806                     _receiveByte:
  1458                           	opt stack 25
  1459                           
  1460                           ;I2C.c: 76: SSPCON2bits.RCEN = 1;
  1461                           
  1462                           ;incstack = 0
  1463  001806  86C5               	bsf	4037,3,c	;volatile
  1464                           
  1465                           ;I2C.c: 77: PIR1bits.SSPIF = 0;
  1466  001808  969E               	bcf	3998,3,c	;volatile
  1467  00180A                     l238:
  1468  00180A  A69E               	btfss	3998,3,c	;volatile
  1469  00180C  D7FE               	goto	l238
  1470                           
  1471                           ;I2C.c: 79: unsigned char retc = SSPBUF;
  1472  00180E  CFC9 F020          	movff	4041,receiveByte@retc	;volatile
  1473                           
  1474                           ;I2C.c: 80: return retc;
  1475  001812  5020               	movf	receiveByte@retc,w,c
  1476  001814  0012               	return	
  1477  001816                     __end_of_receiveByte:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           plusw1	equ	0xFE3
  1488                           fsr1l	equ	0xFE1
  1489                           plusw2	equ	0xFDB
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _I2CRestart *****************
  1493 ;; Defined at:
  1494 ;;		line 64 in file "I2C.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		None
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    3
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_readDataByte
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text10
  1523  00186C                     __ptext10:
  1524                           	opt stack 0
  1525  00186C                     _I2CRestart:
  1526                           	opt stack 25
  1527                           
  1528                           ;I2C.c: 65: SSPCON2bits.RSEN = 1;;
  1529                           
  1530                           ;incstack = 0
  1531  00186C  82C5               	bsf	4037,1,c	;volatile
  1532  00186E                     l226:
  1533  00186E  A2C5               	btfss	4037,1,c	;volatile
  1534  001870  0012               	return	
  1535  001872  D7FD               	goto	l226
  1536  001874                     __end_of_I2CRestart:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           intcon	equ	0xFF2
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           plusw1	equ	0xFE3
  1547                           fsr1l	equ	0xFE1
  1548                           plusw2	equ	0xFDB
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _myQueuePush *****************
  1552 ;; Defined at:
  1553 ;;		line 8 in file "lpque.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  x               2   37[COMRAM] int 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;Total ram usage:        2 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    4
  1574 ;; This function calls:
  1575 ;;		___awmod
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text11
  1582  00165A                     __ptext11:
  1583                           	opt stack 0
  1584  00165A                     _myQueuePush:
  1585                           	opt stack 26
  1586                           
  1587                           ;lpque.c: 9: iter = (iter + 1) % 10;
  1588                           
  1589                           ;incstack = 0
  1590  00165A  0E01               	movlw	1
  1591  00165C  2442               	addwf	_iter,w,c
  1592  00165E  6E20               	movwf	___awmod@dividend,c
  1593  001660  0E00               	movlw	0
  1594  001662  2043               	addwfc	_iter+1,w,c
  1595  001664  6E21               	movwf	___awmod@dividend+1,c
  1596  001666  0E00               	movlw	0
  1597  001668  6E23               	movwf	___awmod@divisor+1,c
  1598  00166A  0E0A               	movlw	10
  1599  00166C  6E22               	movwf	___awmod@divisor,c
  1600  00166E  EC58  F00A         	call	___awmod	;wreg free
  1601  001672  C020  F042         	movff	?___awmod,_iter
  1602  001676  C021  F043         	movff	?___awmod+1,_iter+1
  1603                           
  1604                           ;lpque.c: 10: my_stack[iter] = x;
  1605  00167A  90D8               	bcf	status,0,c
  1606  00167C  3442               	rlcf	_iter,w,c
  1607  00167E  6ED9               	movwf	fsr2l,c
  1608  001680  3443               	rlcf	_iter+1,w,c
  1609  001682  6EDA               	movwf	fsr2h,c
  1610  001684  0E2E               	movlw	low _my_stack
  1611  001686  26D9               	addwf	fsr2l,f,c
  1612  001688  0E00               	movlw	high _my_stack
  1613  00168A  22DA               	addwfc	fsr2h,f,c
  1614  00168C  C026  FFDE         	movff	myQueuePush@x,postinc2
  1615  001690  C027  FFDD         	movff	myQueuePush@x+1,postdec2
  1616  001694  0012               	return		;funcret
  1617  001696                     __end_of_myQueuePush:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           intcon	equ	0xFF2
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           plusw1	equ	0xFE3
  1628                           fsr1l	equ	0xFE1
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           plusw2	equ	0xFDB
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _myQueueCheck *****************
  1637 ;; Defined at:
  1638 ;;		line 12 in file "lpque.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  i               2   41[COMRAM] int 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  2   37[COMRAM] int 
  1645 ;; Registers used:
  1646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        6 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    4
  1659 ;; This function calls:
  1660 ;;		___awmod
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text12
  1667  00143E                     __ptext12:
  1668                           	opt stack 0
  1669  00143E                     _myQueueCheck:
  1670                           	opt stack 26
  1671                           
  1672                           ;lpque.c: 13: for (int i = 10; i > 7; i--){
  1673                           
  1674                           ;incstack = 0
  1675  00143E  0E00               	movlw	0
  1676  001440  6E2B               	movwf	myQueueCheck@i+1,c
  1677  001442  0E0A               	movlw	10
  1678  001444  6E2A               	movwf	myQueueCheck@i,c
  1679  001446                     l2226:
  1680  001446  BE2B               	btfsc	myQueueCheck@i+1,7,c
  1681  001448  D02E               	goto	l2240
  1682  00144A  502B               	movf	myQueueCheck@i+1,w,c
  1683  00144C  E104               	bnz	l2230
  1684  00144E  0E08               	movlw	8
  1685  001450  5C2A               	subwf	myQueueCheck@i,w,c
  1686  001452  A0D8               	btfss	status,0,c
  1687  001454  D028               	goto	l2240
  1688  001456                     l2230:
  1689                           
  1690                           ;lpque.c: 16: if (my_stack[(iter + i) % 10] > 20)
  1691  001456  502A               	movf	myQueueCheck@i,w,c
  1692  001458  2442               	addwf	_iter,w,c
  1693  00145A  6E20               	movwf	___awmod@dividend,c
  1694  00145C  502B               	movf	myQueueCheck@i+1,w,c
  1695  00145E  2043               	addwfc	_iter+1,w,c
  1696  001460  6E21               	movwf	___awmod@dividend+1,c
  1697  001462  0E00               	movlw	0
  1698  001464  6E23               	movwf	___awmod@divisor+1,c
  1699  001466  0E0A               	movlw	10
  1700  001468  6E22               	movwf	___awmod@divisor,c
  1701  00146A  EC58  F00A         	call	___awmod	;wreg free
  1702  00146E  90D8               	bcf	status,0,c
  1703  001470  3620               	rlcf	?___awmod,f,c
  1704  001472  3621               	rlcf	?___awmod+1,f,c
  1705  001474  0E2E               	movlw	low _my_stack
  1706  001476  2420               	addwf	?___awmod,w,c
  1707  001478  6ED9               	movwf	fsr2l,c
  1708  00147A  0E00               	movlw	high _my_stack
  1709  00147C  2021               	addwfc	?___awmod+1,w,c
  1710  00147E  6EDA               	movwf	fsr2h,c
  1711  001480  0E01               	movlw	1
  1712  001482  BEDB               	btfsc	plusw2,7,c
  1713  001484  D00C               	goto	l2236
  1714  001486  0E01               	movlw	1
  1715  001488  50DB               	movf	plusw2,w,c
  1716  00148A  E104               	bnz	u1110
  1717  00148C  0E15               	movlw	21
  1718  00148E  5CDE               	subwf	postinc2,w,c
  1719  001490  A0D8               	btfss	status,0,c
  1720  001492  D005               	goto	l2236
  1721  001494                     u1110:
  1722                           
  1723                           ;lpque.c: 17: return 0;
  1724  001494  0E00               	movlw	0
  1725  001496  6E27               	movwf	?_myQueueCheck+1,c
  1726  001498  0E00               	movlw	0
  1727  00149A  6E26               	movwf	?_myQueueCheck,c
  1728  00149C  0012               	return	
  1729  00149E                     l2236:
  1730  00149E  062A               	decf	myQueueCheck@i,f,c
  1731  0014A0  A0D8               	btfss	status,0,c
  1732  0014A2  062B               	decf	myQueueCheck@i+1,f,c
  1733  0014A4  D7D0               	goto	l2226
  1734  0014A6                     l2240:
  1735                           
  1736                           ;lpque.c: 18: }
  1737                           ;lpque.c: 19: return 1;
  1738  0014A6  0E00               	movlw	0
  1739  0014A8  6E27               	movwf	?_myQueueCheck+1,c
  1740  0014AA  0E01               	movlw	1
  1741  0014AC  6E26               	movwf	?_myQueueCheck,c
  1742  0014AE  0012               	return	
  1743  0014B0                     __end_of_myQueueCheck:
  1744                           	opt stack 0
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           plusw1	equ	0xFE3
  1754                           fsr1l	equ	0xFE1
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           plusw2	equ	0xFDB
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function ___awmod *****************
  1763 ;; Defined at:
  1764 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  dividend        2   31[COMRAM] int 
  1767 ;;  divisor         2   33[COMRAM] int 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  sign            1   36[COMRAM] unsigned char 
  1770 ;;  counter         1   35[COMRAM] unsigned char 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  2   31[COMRAM] int 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1780 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;Total ram usage:        6 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    3
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_myQueuePush
  1791 ;;		_myQueueCheck
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text13
  1796  0014B0                     __ptext13:
  1797                           	opt stack 0
  1798  0014B0                     ___awmod:
  1799                           	opt stack 26
  1800                           
  1801                           ;incstack = 0
  1802  0014B0  0E00               	movlw	0
  1803  0014B2  6E25               	movwf	___awmod@sign,c
  1804  0014B4  AE21               	btfss	___awmod@dividend+1,7,c
  1805  0014B6  D006               	goto	l2122
  1806  0014B8  6C20               	negf	___awmod@dividend,c
  1807  0014BA  1E21               	comf	___awmod@dividend+1,f,c
  1808  0014BC  B0D8               	btfsc	status,0,c
  1809  0014BE  2A21               	incf	___awmod@dividend+1,f,c
  1810  0014C0  0E01               	movlw	1
  1811  0014C2  6E25               	movwf	___awmod@sign,c
  1812  0014C4                     l2122:
  1813  0014C4  AE23               	btfss	___awmod@divisor+1,7,c
  1814  0014C6  D004               	goto	l2126
  1815  0014C8  6C22               	negf	___awmod@divisor,c
  1816  0014CA  1E23               	comf	___awmod@divisor+1,f,c
  1817  0014CC  B0D8               	btfsc	status,0,c
  1818  0014CE  2A23               	incf	___awmod@divisor+1,f,c
  1819  0014D0                     l2126:
  1820  0014D0  5022               	movf	___awmod@divisor,w,c
  1821  0014D2  1023               	iorwf	___awmod@divisor+1,w,c
  1822  0014D4  B4D8               	btfsc	status,2,c
  1823  0014D6  D018               	goto	l2142
  1824  0014D8  0E01               	movlw	1
  1825  0014DA  6E24               	movwf	___awmod@counter,c
  1826  0014DC  D004               	goto	l2132
  1827  0014DE                     l2130:
  1828  0014DE  90D8               	bcf	status,0,c
  1829  0014E0  3622               	rlcf	___awmod@divisor,f,c
  1830  0014E2  3623               	rlcf	___awmod@divisor+1,f,c
  1831  0014E4  2A24               	incf	___awmod@counter,f,c
  1832  0014E6                     l2132:
  1833  0014E6  AE23               	btfss	___awmod@divisor+1,7,c
  1834  0014E8  D7FA               	goto	l2130
  1835  0014EA                     l2134:
  1836  0014EA  5022               	movf	___awmod@divisor,w,c
  1837  0014EC  5C20               	subwf	___awmod@dividend,w,c
  1838  0014EE  5023               	movf	___awmod@divisor+1,w,c
  1839  0014F0  5821               	subwfb	___awmod@dividend+1,w,c
  1840  0014F2  A0D8               	btfss	status,0,c
  1841  0014F4  D004               	goto	l2138
  1842  0014F6  5022               	movf	___awmod@divisor,w,c
  1843  0014F8  5E20               	subwf	___awmod@dividend,f,c
  1844  0014FA  5023               	movf	___awmod@divisor+1,w,c
  1845  0014FC  5A21               	subwfb	___awmod@dividend+1,f,c
  1846  0014FE                     l2138:
  1847  0014FE  90D8               	bcf	status,0,c
  1848  001500  3223               	rrcf	___awmod@divisor+1,f,c
  1849  001502  3222               	rrcf	___awmod@divisor,f,c
  1850  001504  2E24               	decfsz	___awmod@counter,f,c
  1851  001506  D7F1               	goto	l2134
  1852  001508                     l2142:
  1853  001508  5025               	movf	___awmod@sign,w,c
  1854  00150A  B4D8               	btfsc	status,2,c
  1855  00150C  D004               	goto	l2146
  1856  00150E  6C20               	negf	___awmod@dividend,c
  1857  001510  1E21               	comf	___awmod@dividend+1,f,c
  1858  001512  B0D8               	btfsc	status,0,c
  1859  001514  2A21               	incf	___awmod@dividend+1,f,c
  1860  001516                     l2146:
  1861  001516  C020  F020         	movff	___awmod@dividend,?___awmod
  1862  00151A  C021  F021         	movff	___awmod@dividend+1,?___awmod+1
  1863  00151E  0012               	return	
  1864  001520                     __end_of___awmod:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           intcon	equ	0xFF2
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           plusw1	equ	0xFE3
  1875                           fsr1l	equ	0xFE1
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           plusw2	equ	0xFDB
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _moreLight *****************
  1884 ;; Defined at:
  1885 ;;		line 61 in file "pwm.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    5
  1906 ;; This function calls:
  1907 ;;		_dutyCycleDown
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text14
  1914  001840                     __ptext14:
  1915                           	opt stack 0
  1916  001840                     _moreLight:
  1917                           	opt stack 25
  1918                           
  1919                           ;pwm.c: 62: if (lightStatus == 1){
  1920                           
  1921                           ;incstack = 0
  1922  001840  044F               	decf	_lightStatus,w,c
  1923  001842  A4D8               	btfss	status,2,c
  1924  001844  0012               	return	
  1925                           
  1926                           ;pwm.c: 63: dutyCycleDown();
  1927  001846  EC90  F00A         	call	_dutyCycleDown	;wreg free
  1928  00184A  0012               	return	
  1929  00184C                     __end_of_moreLight:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           intcon	equ	0xFF2
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           plusw1	equ	0xFE3
  1940                           fsr1l	equ	0xFE1
  1941                           postinc2	equ	0xFDE
  1942                           postdec2	equ	0xFDD
  1943                           plusw2	equ	0xFDB
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _dutyCycleDown *****************
  1949 ;; Defined at:
  1950 ;;		line 44 in file "pwm.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;Total ram usage:        6 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    4
  1971 ;; This function calls:
  1972 ;;		_setDutyCycle
  1973 ;; This function is called by:
  1974 ;;		_moreLight
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text15
  1979  001520                     __ptext15:
  1980                           	opt stack 0
  1981  001520                     _dutyCycleDown:
  1982                           	opt stack 25
  1983                           
  1984                           ;pwm.c: 45: if(rate > 20)
  1985                           
  1986                           ;incstack = 0
  1987  001520  0E14               	movlw	20
  1988  001522  6450               	cpfsgt	_rate,c
  1989  001524  D021               	goto	l2106
  1990                           
  1991                           ;pwm.c: 46: rate = (rate - 20>20?rate - 20:20);
  1992  001526  0EEC               	movlw	236
  1993  001528  6E21               	movwf	??_dutyCycleDown& (0+255),c
  1994  00152A  0EFF               	movlw	255
  1995  00152C  6E22               	movwf	(??_dutyCycleDown+1)& (0+255),c
  1996  00152E  5050               	movf	_rate,w,c
  1997  001530  6E23               	movwf	(??_dutyCycleDown+2)& (0+255),c
  1998  001532  6A24               	clrf	(??_dutyCycleDown+3)& (0+255),c
  1999  001534  5021               	movf	??_dutyCycleDown,w,c
  2000  001536  2623               	addwf	??_dutyCycleDown+2,f,c
  2001  001538  5022               	movf	??_dutyCycleDown+1,w,c
  2002  00153A  2224               	addwfc	??_dutyCycleDown+3,f,c
  2003  00153C  BE24               	btfsc	??_dutyCycleDown+3,7,c
  2004  00153E  D006               	goto	l2100
  2005  001540  5024               	movf	??_dutyCycleDown+3,w,c
  2006  001542  E109               	bnz	l2102
  2007  001544  0E15               	movlw	21
  2008  001546  5C23               	subwf	??_dutyCycleDown+2,w,c
  2009  001548  B0D8               	btfsc	status,0,c
  2010  00154A  D005               	goto	l2102
  2011  00154C                     l2100:
  2012  00154C  0E00               	movlw	0
  2013  00154E  6E26               	movwf	_dutyCycleDown$627+1,c
  2014  001550  0E14               	movlw	20
  2015  001552  6E25               	movwf	_dutyCycleDown$627,c
  2016  001554  D006               	goto	l2104
  2017  001556                     l2102:
  2018  001556  0EEC               	movlw	236
  2019  001558  2450               	addwf	_rate,w,c
  2020  00155A  6E25               	movwf	_dutyCycleDown$627,c
  2021  00155C  6A26               	clrf	_dutyCycleDown$627+1,c
  2022  00155E  0EFF               	movlw	255
  2023  001560  2226               	addwfc	_dutyCycleDown$627+1,f,c
  2024  001562                     l2104:
  2025  001562  C025  F050         	movff	_dutyCycleDown$627,_rate
  2026  001566  D002               	goto	l2108
  2027  001568                     l2106:
  2028                           
  2029                           ;pwm.c: 47: else
  2030                           ;pwm.c: 48: rate = 20;
  2031  001568  0E14               	movlw	20
  2032  00156A  6E50               	movwf	_rate,c
  2033  00156C                     l2108:
  2034                           
  2035                           ;pwm.c: 49: setDutyCycle(rate);
  2036  00156C  5050               	movf	_rate,w,c
  2037  00156E  EC2C  F00C         	call	_setDutyCycle
  2038  001572  0012               	return		;funcret
  2039  001574                     __end_of_dutyCycleDown:
  2040                           	opt stack 0
  2041                           tblptru	equ	0xFF8
  2042                           tblptrh	equ	0xFF7
  2043                           tblptrl	equ	0xFF6
  2044                           tablat	equ	0xFF5
  2045                           intcon	equ	0xFF2
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           postdec1	equ	0xFE5
  2049                           plusw1	equ	0xFE3
  2050                           fsr1l	equ	0xFE1
  2051                           postinc2	equ	0xFDE
  2052                           postdec2	equ	0xFDD
  2053                           plusw2	equ	0xFDB
  2054                           fsr2h	equ	0xFDA
  2055                           fsr2l	equ	0xFD9
  2056                           status	equ	0xFD8
  2057                           
  2058 ;; *************** function _lightSwitch *****************
  2059 ;; Defined at:
  2060 ;;		line 73 in file "pwm.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;		None
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;		None
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;Total ram usage:        0 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    5
  2081 ;; This function calls:
  2082 ;;		_dutyCycleClear
  2083 ;;		_dutyCycleSet
  2084 ;;		_initQueue
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text16
  2091  001780                     __ptext16:
  2092                           	opt stack 0
  2093  001780                     _lightSwitch:
  2094                           	opt stack 25
  2095                           
  2096                           ;pwm.c: 74: if (lightStatus == 0){
  2097                           
  2098                           ;incstack = 0
  2099  001780  504F               	movf	_lightStatus,w,c
  2100  001782  A4D8               	btfss	status,2,c
  2101  001784  D005               	goto	l2250
  2102                           
  2103                           ;pwm.c: 75: lightStatus = 1;
  2104  001786  0E01               	movlw	1
  2105  001788  6E4F               	movwf	_lightStatus,c
  2106                           
  2107                           ;pwm.c: 76: dutyCycleSet();
  2108  00178A  EC3A  F00C         	call	_dutyCycleSet	;wreg free
  2109                           
  2110                           ;pwm.c: 77: }
  2111  00178E  D004               	goto	l2254
  2112  001790                     l2250:
  2113                           
  2114                           ;pwm.c: 78: else{
  2115                           ;pwm.c: 79: lightStatus = 0;
  2116  001790  0E00               	movlw	0
  2117  001792  6E4F               	movwf	_lightStatus,c
  2118                           
  2119                           ;pwm.c: 80: dutyCycleClear();
  2120  001794  EC3E  F00C         	call	_dutyCycleClear	;wreg free
  2121  001798                     l2254:
  2122                           
  2123                           ;pwm.c: 81: }
  2124                           ;pwm.c: 82: initQueue();
  2125  001798  EC4B  F00B         	call	_initQueue	;wreg free
  2126  00179C  0012               	return		;funcret
  2127  00179E                     __end_of_lightSwitch:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           intcon	equ	0xFF2
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           postdec1	equ	0xFE5
  2137                           plusw1	equ	0xFE3
  2138                           fsr1l	equ	0xFE1
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _initQueue *****************
  2147 ;; Defined at:
  2148 ;;		line 3 in file "lpque.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  i               2   31[COMRAM] int 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;Total ram usage:        2 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;;		_lightSwitch
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text17
  2178  001696                     __ptext17:
  2179                           	opt stack 0
  2180  001696                     _initQueue:
  2181                           	opt stack 26
  2182                           
  2183                           ;lpque.c: 4: for (int i = 0; i < 10; i++)
  2184                           
  2185                           ;incstack = 0
  2186  001696  0E00               	movlw	0
  2187  001698  6E21               	movwf	initQueue@i+1,c
  2188  00169A  0E00               	movlw	0
  2189  00169C  6E20               	movwf	initQueue@i,c
  2190  00169E                     l2052:
  2191  00169E  BE21               	btfsc	initQueue@i+1,7,c
  2192  0016A0  D006               	goto	l2056
  2193  0016A2  5021               	movf	initQueue@i+1,w,c
  2194  0016A4  E114               	bnz	l349
  2195  0016A6  0E0A               	movlw	10
  2196  0016A8  5C20               	subwf	initQueue@i,w,c
  2197  0016AA  B0D8               	btfsc	status,0,c
  2198  0016AC  0012               	return	
  2199  0016AE                     l2056:
  2200                           
  2201                           ;lpque.c: 5: my_stack[i] = 101;
  2202  0016AE  90D8               	bcf	status,0,c
  2203  0016B0  3420               	rlcf	initQueue@i,w,c
  2204  0016B2  6ED9               	movwf	fsr2l,c
  2205  0016B4  3421               	rlcf	initQueue@i+1,w,c
  2206  0016B6  6EDA               	movwf	fsr2h,c
  2207  0016B8  0E2E               	movlw	low _my_stack
  2208  0016BA  26D9               	addwf	fsr2l,f,c
  2209  0016BC  0E00               	movlw	high _my_stack
  2210  0016BE  22DA               	addwfc	fsr2h,f,c
  2211  0016C0  0E65               	movlw	101
  2212  0016C2  6EDE               	movwf	postinc2,c
  2213  0016C4  0E00               	movlw	0
  2214  0016C6  6EDD               	movwf	postdec2,c
  2215  0016C8  4A20               	infsnz	initQueue@i,f,c
  2216  0016CA  2A21               	incf	initQueue@i+1,f,c
  2217  0016CC  D7E8               	goto	l2052
  2218  0016CE                     l349:
  2219  0016CE  0012               	return		;funcret
  2220  0016D0                     __end_of_initQueue:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           plusw1	equ	0xFE3
  2231                           fsr1l	equ	0xFE1
  2232                           postinc2	equ	0xFDE
  2233                           postdec2	equ	0xFDD
  2234                           plusw2	equ	0xFDB
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _dutyCycleSet *****************
  2240 ;; Defined at:
  2241 ;;		line 52 in file "pwm.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    4
  2262 ;; This function calls:
  2263 ;;		_setDutyCycle
  2264 ;; This function is called by:
  2265 ;;		_lightSwitch
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text18
  2270  001874                     __ptext18:
  2271                           	opt stack 0
  2272  001874                     _dutyCycleSet:
  2273                           	opt stack 25
  2274                           
  2275                           ;pwm.c: 53: setDutyCycle(rate);
  2276                           
  2277                           ;incstack = 0
  2278  001874  5050               	movf	_rate,w,c
  2279  001876  EC2C  F00C         	call	_setDutyCycle
  2280  00187A  0012               	return		;funcret
  2281  00187C                     __end_of_dutyCycleSet:
  2282                           	opt stack 0
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           intcon	equ	0xFF2
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           plusw1	equ	0xFE3
  2292                           fsr1l	equ	0xFE1
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           plusw2	equ	0xFDB
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _dutyCycleClear *****************
  2301 ;; Defined at:
  2302 ;;		line 56 in file "pwm.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    4
  2323 ;; This function calls:
  2324 ;;		_setDutyCycle
  2325 ;; This function is called by:
  2326 ;;		_lightSwitch
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text19
  2331  00187C                     __ptext19:
  2332                           	opt stack 0
  2333  00187C                     _dutyCycleClear:
  2334                           	opt stack 25
  2335                           
  2336                           ;pwm.c: 58: setDutyCycle(77 + 20);
  2337                           
  2338                           ;incstack = 0
  2339  00187C  0E61               	movlw	97
  2340  00187E  EC2C  F00C         	call	_setDutyCycle
  2341  001882  0012               	return		;funcret
  2342  001884                     __end_of_dutyCycleClear:
  2343                           	opt stack 0
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           intcon	equ	0xFF2
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           plusw1	equ	0xFE3
  2353                           fsr1l	equ	0xFE1
  2354                           postinc2	equ	0xFDE
  2355                           postdec2	equ	0xFDD
  2356                           plusw2	equ	0xFDB
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function _lessLight *****************
  2362 ;; Defined at:
  2363 ;;		line 67 in file "pwm.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;		None
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;Total ram usage:        0 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    5
  2384 ;; This function calls:
  2385 ;;		_dutyCycleUp
  2386 ;; This function is called by:
  2387 ;;		_main
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text20
  2392  00184C                     __ptext20:
  2393                           	opt stack 0
  2394  00184C                     _lessLight:
  2395                           	opt stack 25
  2396                           
  2397                           ;pwm.c: 68: if (lightStatus == 1){
  2398                           
  2399                           ;incstack = 0
  2400  00184C  044F               	decf	_lightStatus,w,c
  2401  00184E  A4D8               	btfss	status,2,c
  2402  001850  0012               	return	
  2403                           
  2404                           ;pwm.c: 69: dutyCycleUp();
  2405  001852  ECDB  F00B         	call	_dutyCycleUp	;wreg free
  2406  001856  0012               	return	
  2407  001858                     __end_of_lessLight:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           intcon	equ	0xFF2
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           postdec1	equ	0xFE5
  2417                           plusw1	equ	0xFE3
  2418                           fsr1l	equ	0xFE1
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           plusw2	equ	0xFDB
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _dutyCycleUp *****************
  2427 ;; Defined at:
  2428 ;;		line 36 in file "pwm.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    4
  2449 ;; This function calls:
  2450 ;;		_setDutyCycle
  2451 ;; This function is called by:
  2452 ;;		_lessLight
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text21
  2457  0017B6                     __ptext21:
  2458                           	opt stack 0
  2459  0017B6                     _dutyCycleUp:
  2460                           	opt stack 25
  2461                           
  2462                           ;pwm.c: 37: if(77 - 20 > rate)
  2463                           
  2464                           ;incstack = 0
  2465  0017B6  0E39               	movlw	57
  2466  0017B8  6050               	cpfslt	_rate,c
  2467  0017BA  D003               	goto	l2092
  2468                           
  2469                           ;pwm.c: 38: rate = rate + 20;
  2470  0017BC  5050               	movf	_rate,w,c
  2471  0017BE  0F14               	addlw	20
  2472  0017C0  D001               	goto	L1
  2473  0017C2                     l2092:
  2474                           
  2475                           ;pwm.c: 39: else
  2476                           ;pwm.c: 40: rate = 77;
  2477  0017C2  0E4D               	movlw	77
  2478  0017C4                     L1:
  2479  0017C4  6E50               	movwf	_rate,c
  2480                           
  2481                           ;pwm.c: 41: setDutyCycle(rate);
  2482  0017C6  5050               	movf	_rate,w,c
  2483  0017C8  EC2C  F00C         	call	_setDutyCycle
  2484  0017CC  0012               	return		;funcret
  2485  0017CE                     __end_of_dutyCycleUp:
  2486                           	opt stack 0
  2487                           tblptru	equ	0xFF8
  2488                           tblptrh	equ	0xFF7
  2489                           tblptrl	equ	0xFF6
  2490                           tablat	equ	0xFF5
  2491                           intcon	equ	0xFF2
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           plusw1	equ	0xFE3
  2496                           fsr1l	equ	0xFE1
  2497                           postinc2	equ	0xFDE
  2498                           postdec2	equ	0xFDD
  2499                           plusw2	equ	0xFDB
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _setDutyCycle *****************
  2505 ;; Defined at:
  2506 ;;		line 28 in file "pwm.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  x               1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  x               1   31[COMRAM] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        1 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    3
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_dutyCycleUp
  2531 ;;		_dutyCycleDown
  2532 ;;		_dutyCycleSet
  2533 ;;		_dutyCycleClear
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text22
  2538  001858                     __ptext22:
  2539                           	opt stack 0
  2540  001858                     _setDutyCycle:
  2541                           	opt stack 25
  2542                           
  2543                           ;incstack = 0
  2544                           ;setDutyCycle@x stored from wreg
  2545  001858  6E20               	movwf	setDutyCycle@x,c
  2546                           
  2547                           ;pwm.c: 29: CCPR2L = x;
  2548  00185A  C020  FFBB         	movff	setDutyCycle@x,4027	;volatile
  2549                           
  2550                           ;pwm.c: 30: T2CONbits.TMR2ON = 1;
  2551  00185E  84CA               	bsf	4042,2,c	;volatile
  2552                           
  2553                           ;pwm.c: 31: PIR1bits.CCP1IF = 0;
  2554  001860  949E               	bcf	3998,2,c	;volatile
  2555  001862  0012               	return		;funcret
  2556  001864                     __end_of_setDutyCycle:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           postdec1	equ	0xFE5
  2566                           plusw1	equ	0xFE3
  2567                           fsr1l	equ	0xFE1
  2568                           postinc2	equ	0xFDE
  2569                           postdec2	equ	0xFDD
  2570                           plusw2	equ	0xFDB
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _lcdWriteString *****************
  2576 ;; Defined at:
  2577 ;;		line 95 in file "user.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  str             2   33[COMRAM] PTR unsigned char 
  2580 ;;		 -> STR_2(13), STR_1(2), main@str(15), 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  i               2   37[COMRAM] int 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;Total ram usage:        6 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    5
  2599 ;; This function calls:
  2600 ;;		_lcdWriteChar
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text23
  2607  0013C8                     __ptext23:
  2608                           	opt stack 0
  2609  0013C8                     _lcdWriteString:
  2610                           	opt stack 25
  2611                           
  2612                           ;user.c: 96: for(int i = 0; str[i]; i++){
  2613                           
  2614                           ;incstack = 0
  2615  0013C8  0E00               	movlw	0
  2616  0013CA  6E27               	movwf	lcdWriteString@i+1,c
  2617  0013CC  0E00               	movlw	0
  2618  0013CE  6E26               	movwf	lcdWriteString@i,c
  2619  0013D0  D01B               	goto	l2198
  2620  0013D2                     l2194:
  2621                           
  2622                           ;user.c: 97: lcdWriteChar(str[i]);
  2623  0013D2  5026               	movf	lcdWriteString@i,w,c
  2624  0013D4  2422               	addwf	lcdWriteString@str,w,c
  2625  0013D6  6E24               	movwf	??_lcdWriteString& (0+255),c
  2626  0013D8  5027               	movf	lcdWriteString@i+1,w,c
  2627  0013DA  2023               	addwfc	lcdWriteString@str+1,w,c
  2628  0013DC  6E25               	movwf	(??_lcdWriteString+1)& (0+255),c
  2629  0013DE  C024  FFF6         	movff	??_lcdWriteString,tblptrl
  2630  0013E2  C025  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2631  0013E6  0E00               	movlw	low (__smallconst shr (0+16))
  2632  0013E8  6EF8               	movwf	tblptru,c
  2633  0013EA  0E0F               	movlw	(high __ramtop+-1)
  2634  0013EC  64F7               	cpfsgt	tblptrh,c
  2635  0013EE  D003               	bra	u1067
  2636  0013F0  0008               	tblrd		*
  2637  0013F2  50F5               	movf	tablat,w,c
  2638  0013F4  D005               	bra	u1060
  2639  0013F6                     u1067:
  2640  0013F6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2641  0013FA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2642  0013FE  50E7               	movf	indf1,w,c
  2643  001400                     u1060:
  2644  001400  EC68  F00B         	call	_lcdWriteChar
  2645  001404  4A26               	infsnz	lcdWriteString@i,f,c
  2646  001406  2A27               	incf	lcdWriteString@i+1,f,c
  2647  001408                     l2198:
  2648  001408  5026               	movf	lcdWriteString@i,w,c
  2649  00140A  2422               	addwf	lcdWriteString@str,w,c
  2650  00140C  6E24               	movwf	??_lcdWriteString& (0+255),c
  2651  00140E  5027               	movf	lcdWriteString@i+1,w,c
  2652  001410  2023               	addwfc	lcdWriteString@str+1,w,c
  2653  001412  6E25               	movwf	(??_lcdWriteString+1)& (0+255),c
  2654  001414  C024  FFF6         	movff	??_lcdWriteString,tblptrl
  2655  001418  C025  FFF7         	movff	??_lcdWriteString+1,tblptrh
  2656  00141C  0E00               	movlw	low (__smallconst shr (0+16))
  2657  00141E  6EF8               	movwf	tblptru,c
  2658  001420  0E0F               	movlw	(high __ramtop+-1)
  2659  001422  64F7               	cpfsgt	tblptrh,c
  2660  001424  D003               	bra	u1077
  2661  001426  0008               	tblrd		*
  2662  001428  50F5               	movf	tablat,w,c
  2663  00142A  D005               	bra	u1070
  2664  00142C                     u1077:
  2665  00142C  CFF6 FFE1          	movff	tblptrl,fsr1l
  2666  001430  CFF7 FFE2          	movff	tblptrh,fsr1h
  2667  001434  50E7               	movf	indf1,w,c
  2668  001436                     u1070:
  2669  001436  0900               	iorlw	0
  2670  001438  B4D8               	btfsc	status,2,c
  2671  00143A  0012               	return	
  2672  00143C  D7CA               	goto	l2194
  2673  00143E                     __end_of_lcdWriteString:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           intcon	equ	0xFF2
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           indf1	equ	0xFE7
  2683                           postdec1	equ	0xFE5
  2684                           plusw1	equ	0xFE3
  2685                           fsr1h	equ	0xFE2
  2686                           fsr1l	equ	0xFE1
  2687                           postinc2	equ	0xFDE
  2688                           postdec2	equ	0xFDD
  2689                           plusw2	equ	0xFDB
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _lcdWriteInt *****************
  2695 ;; Defined at:
  2696 ;;		line 114 in file "user.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  num             2   40[COMRAM] int 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        2 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    6
  2717 ;; This function calls:
  2718 ;;		_lcdWriteChar
  2719 ;;		_lcdWriteUI
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text24
  2726  001760                     __ptext24:
  2727                           	opt stack 0
  2728  001760                     _lcdWriteInt:
  2729                           	opt stack 24
  2730                           
  2731                           ;user.c: 115: if(num < 0){
  2732                           
  2733                           ;incstack = 0
  2734  001760  AE2A               	btfss	lcdWriteInt@num+1,7,c
  2735  001762  D007               	goto	l2218
  2736                           
  2737                           ;user.c: 116: lcdWriteChar('-');
  2738  001764  0E2D               	movlw	45
  2739  001766  EC68  F00B         	call	_lcdWriteChar
  2740                           
  2741                           ;user.c: 117: num = -num;
  2742  00176A  6C29               	negf	lcdWriteInt@num,c
  2743  00176C  1E2A               	comf	lcdWriteInt@num+1,f,c
  2744  00176E  B0D8               	btfsc	status,0,c
  2745  001770  2A2A               	incf	lcdWriteInt@num+1,f,c
  2746  001772                     l2218:
  2747                           
  2748                           ;user.c: 118: }
  2749                           ;user.c: 119: lcdWriteUI((unsigned int) num);
  2750  001772  C029  F027         	movff	lcdWriteInt@num,lcdWriteUI@num
  2751  001776  C02A  F028         	movff	lcdWriteInt@num+1,lcdWriteUI@num+1
  2752  00177A  ECD3  F008         	call	_lcdWriteUI	;wreg free
  2753  00177E  0012               	return		;funcret
  2754  001780                     __end_of_lcdWriteInt:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           intcon	equ	0xFF2
  2761                           postinc0	equ	0xFEE
  2762                           wreg	equ	0xFE8
  2763                           indf1	equ	0xFE7
  2764                           postdec1	equ	0xFE5
  2765                           plusw1	equ	0xFE3
  2766                           fsr1h	equ	0xFE2
  2767                           fsr1l	equ	0xFE1
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           plusw2	equ	0xFDB
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _lcdWriteUI *****************
  2776 ;; Defined at:
  2777 ;;		line 101 in file "user.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  num             2   38[COMRAM] unsigned int 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  stack          20    0[BANK0 ] unsigned char [20]
  2782 ;;  i               2   20[BANK0 ] int 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:       24 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    5
  2799 ;; This function calls:
  2800 ;;		___lwdiv
  2801 ;;		___lwmod
  2802 ;;		_lcdWriteChar
  2803 ;; This function is called by:
  2804 ;;		_lcdWriteInt
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text25
  2809  0011A6                     __ptext25:
  2810                           	opt stack 0
  2811  0011A6                     _lcdWriteUI:
  2812                           	opt stack 24
  2813                           
  2814                           ;user.c: 102: char stack[20];
  2815                           ;user.c: 103: int i = 0;
  2816                           
  2817                           ;incstack = 0
  2818  0011A6  0E00               	movlw	0
  2819  0011A8  0100               	movlb	0	; () banked
  2820  0011AA  6F95               	movwf	(lcdWriteUI@i+1)& (0+255),b
  2821  0011AC  0E00               	movlw	0
  2822  0011AE  6F94               	movwf	lcdWriteUI@i& (0+255),b
  2823  0011B0                     l2064:
  2824                           
  2825                           ;user.c: 105: stack[i++] = '0' + (num % 10);
  2826  0011B0  0E80               	movlw	low lcdWriteUI@stack
  2827  0011B2  0100               	movlb	0	; () banked
  2828  0011B4  2594               	addwf	lcdWriteUI@i& (0+255),w,b
  2829  0011B6  6ED9               	movwf	fsr2l,c
  2830  0011B8  0E00               	movlw	high lcdWriteUI@stack
  2831  0011BA  0100               	movlb	0	; () banked
  2832  0011BC  2195               	addwfc	(lcdWriteUI@i+1)& (0+255),w,b
  2833  0011BE  6EDA               	movwf	fsr2h,c
  2834  0011C0  C027  F020         	movff	lcdWriteUI@num,___lwmod@dividend
  2835  0011C4  C028  F021         	movff	lcdWriteUI@num+1,___lwmod@dividend+1
  2836  0011C8  0E00               	movlw	0
  2837  0011CA  6E23               	movwf	___lwmod@divisor+1,c
  2838  0011CC  0E0A               	movlw	10
  2839  0011CE  6E22               	movwf	___lwmod@divisor,c
  2840  0011D0  EC0C  F00B         	call	___lwmod	;wreg free
  2841  0011D4  5020               	movf	?___lwmod,w,c
  2842  0011D6  0F30               	addlw	48
  2843  0011D8  6EDF               	movwf	indf2,c
  2844  0011DA  0100               	movlb	0	; () banked
  2845  0011DC  4B94               	infsnz	lcdWriteUI@i& (0+255),f,b
  2846  0011DE  2B95               	incf	(lcdWriteUI@i+1)& (0+255),f,b
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;user.c: 106: num /= 10;
  2850  0011E0  C027  F020         	movff	lcdWriteUI@num,___lwdiv@dividend
  2851  0011E4  C028  F021         	movff	lcdWriteUI@num+1,___lwdiv@dividend+1
  2852  0011E8  0E00               	movlw	0
  2853  0011EA  6E23               	movwf	___lwdiv@divisor+1,c
  2854  0011EC  0E0A               	movlw	10
  2855  0011EE  6E22               	movwf	___lwdiv@divisor,c
  2856  0011F0  ECE3  F00A         	call	___lwdiv	;wreg free
  2857  0011F4  C020  F027         	movff	?___lwdiv,lcdWriteUI@num
  2858  0011F8  C021  F028         	movff	?___lwdiv+1,lcdWriteUI@num+1
  2859                           
  2860                           ;user.c: 107: }
  2861                           ;user.c: 108: while(num != 0);
  2862  0011FC  5027               	movf	lcdWriteUI@num,w,c
  2863  0011FE  1028               	iorwf	lcdWriteUI@num+1,w,c
  2864  001200  B4D8               	btfsc	status,2,c
  2865  001202  D010               	goto	l2074
  2866  001204  D7D5               	goto	l2064
  2867  001206                     l2072:
  2868                           
  2869                           ;user.c: 110: lcdWriteChar(stack[--i]);
  2870  001206  0100               	movlb	0	; () banked
  2871  001208  0794               	decf	lcdWriteUI@i& (0+255),f,b
  2872  00120A  A0D8               	btfss	status,0,c
  2873  00120C  0795               	decf	(lcdWriteUI@i+1)& (0+255),f,b
  2874  00120E  0E80               	movlw	low lcdWriteUI@stack
  2875  001210  0100               	movlb	0	; () banked
  2876  001212  2594               	addwf	lcdWriteUI@i& (0+255),w,b
  2877  001214  6ED9               	movwf	fsr2l,c
  2878  001216  0E00               	movlw	high lcdWriteUI@stack
  2879  001218  0100               	movlb	0	; () banked
  2880  00121A  2195               	addwfc	(lcdWriteUI@i+1)& (0+255),w,b
  2881  00121C  6EDA               	movwf	fsr2h,c
  2882  00121E  50DF               	movf	indf2,w,c
  2883  001220  EC68  F00B         	call	_lcdWriteChar
  2884  001224                     l2074:
  2885  001224  0100               	movlb	0	; () banked
  2886  001226  5194               	movf	lcdWriteUI@i& (0+255),w,b
  2887  001228  0100               	movlb	0	; () banked
  2888  00122A  1195               	iorwf	(lcdWriteUI@i+1)& (0+255),w,b
  2889  00122C  B4D8               	btfsc	status,2,c
  2890  00122E  0012               	return	
  2891  001230  D7EA               	goto	l2072
  2892  001232                     __end_of_lcdWriteUI:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           intcon	equ	0xFF2
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           indf1	equ	0xFE7
  2902                           postdec1	equ	0xFE5
  2903                           plusw1	equ	0xFE3
  2904                           fsr1h	equ	0xFE2
  2905                           fsr1l	equ	0xFE1
  2906                           indf2	equ	0xFDF
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           plusw2	equ	0xFDB
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _lcdWriteChar *****************
  2915 ;; Defined at:
  2916 ;;		line 80 in file "user.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  leter           1    wreg     unsigned char 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  leter           1   32[COMRAM] unsigned char 
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        2 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    4
  2937 ;; This function calls:
  2938 ;;		_lcdEnable
  2939 ;; This function is called by:
  2940 ;;		_lcdWriteString
  2941 ;;		_lcdWriteUI
  2942 ;;		_lcdWriteInt
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text26
  2947  0016D0                     __ptext26:
  2948                           	opt stack 0
  2949  0016D0                     _lcdWriteChar:
  2950                           	opt stack 25
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;incstack = 0
  2954                           ;lcdWriteChar@leter stored from wreg
  2955  0016D0  6E21               	movwf	lcdWriteChar@leter,c
  2956                           
  2957                           ;user.c: 81: PORTCbits.RC2 = 1;
  2958  0016D2  8482               	bsf	3970,2,c	;volatile
  2959                           
  2960                           ;user.c: 82: _delay((unsigned long)((10)*(4000000/4000.0)));
  2961  0016D4  0E0D               	movlw	13
  2962  0016D6  6E20               	movwf	??_lcdWriteChar& (0+255),c
  2963  0016D8  0EFC               	movlw	252
  2964  0016DA                     u1267:
  2965  0016DA  2EE8               	decfsz	wreg,f,c
  2966  0016DC  D7FE               	bra	u1267
  2967  0016DE  2E20               	decfsz	??_lcdWriteChar& (0+255),f,c
  2968  0016E0  D7FC               	bra	u1267
  2969                           
  2970                           ;user.c: 85: PORTD = (leter >> 4) & 0b00001111;
  2971  0016E2  3821               	swapf	lcdWriteChar@leter,w,c
  2972  0016E4  0B0F               	andlw	15
  2973  0016E6  0B0F               	andlw	15
  2974  0016E8  6E83               	movwf	3971,c	;volatile
  2975                           
  2976                           ;user.c: 86: lcdEnable();
  2977  0016EA  EC42  F00C         	call	_lcdEnable	;wreg free
  2978                           
  2979                           ;user.c: 87: _delay((unsigned long)((1)*(4000000/4000.0)));
  2980  0016EE  0EC8               	movlw	200
  2981  0016F0                     u1277:
  2982  0016F0  D000               	nop2	
  2983  0016F2  2EE8               	decfsz	wreg,f,c
  2984  0016F4  D7FD               	bra	u1277
  2985                           
  2986                           ;user.c: 89: PORTD = leter & 0b00001111;
  2987  0016F6  5021               	movf	lcdWriteChar@leter,w,c
  2988  0016F8  0B0F               	andlw	15
  2989  0016FA  6E83               	movwf	3971,c	;volatile
  2990                           
  2991                           ;user.c: 90: lcdEnable();
  2992  0016FC  EC42  F00C         	call	_lcdEnable	;wreg free
  2993                           
  2994                           ;user.c: 91: _delay((unsigned long)((1)*(4000000/4000.0)));
  2995  001700  0EC8               	movlw	200
  2996  001702                     u1287:
  2997  001702  D000               	nop2	
  2998  001704  2EE8               	decfsz	wreg,f,c
  2999  001706  D7FD               	bra	u1287
  3000  001708  0012               	return		;funcret
  3001  00170A                     __end_of_lcdWriteChar:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           intcon	equ	0xFF2
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           indf1	equ	0xFE7
  3011                           postdec1	equ	0xFE5
  3012                           plusw1	equ	0xFE3
  3013                           fsr1h	equ	0xFE2
  3014                           fsr1l	equ	0xFE1
  3015                           indf2	equ	0xFDF
  3016                           postinc2	equ	0xFDE
  3017                           postdec2	equ	0xFDD
  3018                           plusw2	equ	0xFDB
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function ___lwmod *****************
  3024 ;; Defined at:
  3025 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  dividend        2   31[COMRAM] unsigned int 
  3028 ;;  divisor         2   33[COMRAM] unsigned int 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  counter         1   35[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  2   31[COMRAM] unsigned int 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;Total ram usage:        5 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    3
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_lcdWriteUI
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text27
  3055  001618                     __ptext27:
  3056                           	opt stack 0
  3057  001618                     ___lwmod:
  3058                           	opt stack 25
  3059                           
  3060                           ;incstack = 0
  3061  001618  5022               	movf	___lwmod@divisor,w,c
  3062  00161A  1023               	iorwf	___lwmod@divisor+1,w,c
  3063  00161C  B4D8               	btfsc	status,2,c
  3064  00161E  D018               	goto	l797
  3065  001620  0E01               	movlw	1
  3066  001622  6E24               	movwf	___lwmod@counter,c
  3067  001624  D004               	goto	l2040
  3068  001626                     l2038:
  3069  001626  90D8               	bcf	status,0,c
  3070  001628  3622               	rlcf	___lwmod@divisor,f,c
  3071  00162A  3623               	rlcf	___lwmod@divisor+1,f,c
  3072  00162C  2A24               	incf	___lwmod@counter,f,c
  3073  00162E                     l2040:
  3074  00162E  AE23               	btfss	___lwmod@divisor+1,7,c
  3075  001630  D7FA               	goto	l2038
  3076  001632                     l2042:
  3077  001632  5022               	movf	___lwmod@divisor,w,c
  3078  001634  5C20               	subwf	___lwmod@dividend,w,c
  3079  001636  5023               	movf	___lwmod@divisor+1,w,c
  3080  001638  5821               	subwfb	___lwmod@dividend+1,w,c
  3081  00163A  A0D8               	btfss	status,0,c
  3082  00163C  D004               	goto	l2046
  3083  00163E  5022               	movf	___lwmod@divisor,w,c
  3084  001640  5E20               	subwf	___lwmod@dividend,f,c
  3085  001642  5023               	movf	___lwmod@divisor+1,w,c
  3086  001644  5A21               	subwfb	___lwmod@dividend+1,f,c
  3087  001646                     l2046:
  3088  001646  90D8               	bcf	status,0,c
  3089  001648  3223               	rrcf	___lwmod@divisor+1,f,c
  3090  00164A  3222               	rrcf	___lwmod@divisor,f,c
  3091  00164C  2E24               	decfsz	___lwmod@counter,f,c
  3092  00164E  D7F1               	goto	l2042
  3093  001650                     l797:
  3094  001650  C020  F020         	movff	___lwmod@dividend,?___lwmod
  3095  001654  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  3096  001658  0012               	return		;funcret
  3097  00165A                     __end_of___lwmod:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           intcon	equ	0xFF2
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           indf1	equ	0xFE7
  3107                           postdec1	equ	0xFE5
  3108                           plusw1	equ	0xFE3
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           plusw2	equ	0xFDB
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function ___lwdiv *****************
  3120 ;; Defined at:
  3121 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  dividend        2   31[COMRAM] unsigned int 
  3124 ;;  divisor         2   33[COMRAM] unsigned int 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  quotient        2   36[COMRAM] unsigned int 
  3127 ;;  counter         1   35[COMRAM] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  2   31[COMRAM] unsigned int 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;Total ram usage:        7 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_lcdWriteUI
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text28
  3152  0015C6                     __ptext28:
  3153                           	opt stack 0
  3154  0015C6                     ___lwdiv:
  3155                           	opt stack 25
  3156                           
  3157                           ;incstack = 0
  3158  0015C6  0E00               	movlw	0
  3159  0015C8  6E26               	movwf	___lwdiv@quotient+1,c
  3160  0015CA  0E00               	movlw	0
  3161  0015CC  6E25               	movwf	___lwdiv@quotient,c
  3162  0015CE  5022               	movf	___lwdiv@divisor,w,c
  3163  0015D0  1023               	iorwf	___lwdiv@divisor+1,w,c
  3164  0015D2  B4D8               	btfsc	status,2,c
  3165  0015D4  D01C               	goto	l787
  3166  0015D6  0E01               	movlw	1
  3167  0015D8  6E24               	movwf	___lwdiv@counter,c
  3168  0015DA  D004               	goto	l2020
  3169  0015DC                     l2018:
  3170  0015DC  90D8               	bcf	status,0,c
  3171  0015DE  3622               	rlcf	___lwdiv@divisor,f,c
  3172  0015E0  3623               	rlcf	___lwdiv@divisor+1,f,c
  3173  0015E2  2A24               	incf	___lwdiv@counter,f,c
  3174  0015E4                     l2020:
  3175  0015E4  AE23               	btfss	___lwdiv@divisor+1,7,c
  3176  0015E6  D7FA               	goto	l2018
  3177  0015E8                     l2022:
  3178  0015E8  90D8               	bcf	status,0,c
  3179  0015EA  3625               	rlcf	___lwdiv@quotient,f,c
  3180  0015EC  3626               	rlcf	___lwdiv@quotient+1,f,c
  3181  0015EE  5022               	movf	___lwdiv@divisor,w,c
  3182  0015F0  5C20               	subwf	___lwdiv@dividend,w,c
  3183  0015F2  5023               	movf	___lwdiv@divisor+1,w,c
  3184  0015F4  5821               	subwfb	___lwdiv@dividend+1,w,c
  3185  0015F6  A0D8               	btfss	status,0,c
  3186  0015F8  D005               	goto	l2030
  3187  0015FA  5022               	movf	___lwdiv@divisor,w,c
  3188  0015FC  5E20               	subwf	___lwdiv@dividend,f,c
  3189  0015FE  5023               	movf	___lwdiv@divisor+1,w,c
  3190  001600  5A21               	subwfb	___lwdiv@dividend+1,f,c
  3191  001602  8025               	bsf	___lwdiv@quotient,0,c
  3192  001604                     l2030:
  3193  001604  90D8               	bcf	status,0,c
  3194  001606  3223               	rrcf	___lwdiv@divisor+1,f,c
  3195  001608  3222               	rrcf	___lwdiv@divisor,f,c
  3196  00160A  2E24               	decfsz	___lwdiv@counter,f,c
  3197  00160C  D7ED               	goto	l2022
  3198  00160E                     l787:
  3199  00160E  C025  F020         	movff	___lwdiv@quotient,?___lwdiv
  3200  001612  C026  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3201  001616  0012               	return		;funcret
  3202  001618                     __end_of___lwdiv:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           intcon	equ	0xFF2
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           indf1	equ	0xFE7
  3212                           postdec1	equ	0xFE5
  3213                           plusw1	equ	0xFE3
  3214                           fsr1h	equ	0xFE2
  3215                           fsr1l	equ	0xFE1
  3216                           indf2	equ	0xFDF
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           plusw2	equ	0xFDB
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _initPWM *****************
  3225 ;; Defined at:
  3226 ;;		line 8 in file "pwm.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:        0 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    3
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text29
  3255  0017CE                     __ptext29:
  3256                           	opt stack 0
  3257  0017CE                     _initPWM:
  3258                           	opt stack 27
  3259                           
  3260                           ;pwm.c: 9: PR2 = 0x4F;
  3261                           
  3262                           ;incstack = 0
  3263  0017CE  0E4F               	movlw	79
  3264  0017D0  6ECB               	movwf	4043,c	;volatile
  3265                           
  3266                           ;pwm.c: 10: CCPR2L = 40;
  3267  0017D2  0E28               	movlw	40
  3268  0017D4  6EBB               	movwf	4027,c	;volatile
  3269                           
  3270                           ;pwm.c: 11: CCP2CON = 0b00011110;
  3271  0017D6  0E1E               	movlw	30
  3272  0017D8  6EBA               	movwf	4026,c	;volatile
  3273                           
  3274                           ;pwm.c: 12: TRISCbits.RC1 = 0;
  3275  0017DA  9294               	bcf	3988,1,c	;volatile
  3276                           
  3277                           ;pwm.c: 13: T2CON = 0x03;
  3278  0017DC  0E03               	movlw	3
  3279  0017DE  6ECA               	movwf	4042,c	;volatile
  3280                           
  3281                           ;pwm.c: 14: T2CONbits.TMR2ON = 1;
  3282  0017E0  84CA               	bsf	4042,2,c	;volatile
  3283  0017E2  0012               	return		;funcret
  3284  0017E4                     __end_of_initPWM:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           intcon	equ	0xFF2
  3291                           postinc0	equ	0xFEE
  3292                           wreg	equ	0xFE8
  3293                           indf1	equ	0xFE7
  3294                           postdec1	equ	0xFE5
  3295                           plusw1	equ	0xFE3
  3296                           fsr1h	equ	0xFE2
  3297                           fsr1l	equ	0xFE1
  3298                           indf2	equ	0xFDF
  3299                           postinc2	equ	0xFDE
  3300                           postdec2	equ	0xFDD
  3301                           plusw2	equ	0xFDB
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _initLCD *****************
  3307 ;; Defined at:
  3308 ;;		line 47 in file "user.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        1 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    4
  3329 ;; This function calls:
  3330 ;;		_lcdEnable
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text30
  3337  001232                     __ptext30:
  3338                           	opt stack 0
  3339  001232                     _initLCD:
  3340                           	opt stack 26
  3341                           
  3342                           ;user.c: 48: PORTCbits.RC5 = 0;
  3343                           
  3344                           ;incstack = 0
  3345  001232  9A82               	bcf	3970,5,c	;volatile
  3346                           
  3347                           ;user.c: 49: PORTCbits.RC2 = 0;
  3348  001234  9482               	bcf	3970,2,c	;volatile
  3349                           
  3350                           ;user.c: 50: _delay((unsigned long)((100)*(4000000/4000.0)));
  3351  001236  0E82               	movlw	130
  3352  001238  6E20               	movwf	??_initLCD& (0+255),c
  3353  00123A  0EDE               	movlw	222
  3354  00123C                     u1297:
  3355  00123C  2EE8               	decfsz	wreg,f,c
  3356  00123E  D7FE               	bra	u1297
  3357  001240  2E20               	decfsz	??_initLCD& (0+255),f,c
  3358  001242  D7FC               	bra	u1297
  3359                           
  3360                           ;user.c: 52: PORTD = 0b00000010;
  3361  001244  0E02               	movlw	2
  3362  001246  6E83               	movwf	3971,c	;volatile
  3363                           
  3364                           ;user.c: 53: lcdEnable();
  3365  001248  EC42  F00C         	call	_lcdEnable	;wreg free
  3366                           
  3367                           ;user.c: 54: PORTD = 0b00000010;
  3368  00124C  0E02               	movlw	2
  3369  00124E  6E83               	movwf	3971,c	;volatile
  3370                           
  3371                           ;user.c: 55: lcdEnable();
  3372  001250  EC42  F00C         	call	_lcdEnable	;wreg free
  3373                           
  3374                           ;user.c: 56: PORTD = 0b00001111;
  3375  001254  0E0F               	movlw	15
  3376  001256  6E83               	movwf	3971,c	;volatile
  3377                           
  3378                           ;user.c: 57: lcdEnable();
  3379  001258  EC42  F00C         	call	_lcdEnable	;wreg free
  3380                           
  3381                           ;user.c: 58: _delay((unsigned long)((70)*(4000000/4000000.0)));
  3382  00125C  0E17               	movlw	23
  3383  00125E                     u1307:
  3384  00125E  2EE8               	decfsz	wreg,f,c
  3385  001260  D7FE               	bra	u1307
  3386  001262  F000               	nop	
  3387                           
  3388                           ;user.c: 60: PORTD = 0b00000000;
  3389  001264  0E00               	movlw	0
  3390  001266  6E83               	movwf	3971,c	;volatile
  3391                           
  3392                           ;user.c: 61: lcdEnable();
  3393  001268  EC42  F00C         	call	_lcdEnable	;wreg free
  3394                           
  3395                           ;user.c: 62: PORTD = 0b00001111;
  3396  00126C  0E0F               	movlw	15
  3397  00126E  6E83               	movwf	3971,c	;volatile
  3398                           
  3399                           ;user.c: 63: lcdEnable();
  3400  001270  EC42  F00C         	call	_lcdEnable	;wreg free
  3401                           
  3402                           ;user.c: 64: _delay((unsigned long)((70)*(4000000/4000000.0)));
  3403  001274  0E17               	movlw	23
  3404  001276                     u1317:
  3405  001276  2EE8               	decfsz	wreg,f,c
  3406  001278  D7FE               	bra	u1317
  3407  00127A  F000               	nop	
  3408                           
  3409                           ;user.c: 66: PORTD = 0b00000000;
  3410  00127C  0E00               	movlw	0
  3411  00127E  6E83               	movwf	3971,c	;volatile
  3412                           
  3413                           ;user.c: 67: lcdEnable();
  3414  001280  EC42  F00C         	call	_lcdEnable	;wreg free
  3415                           
  3416                           ;user.c: 68: PORTD = 0b00000001;
  3417  001284  0E01               	movlw	1
  3418  001286  6E83               	movwf	3971,c	;volatile
  3419                           
  3420                           ;user.c: 69: lcdEnable();
  3421  001288  EC42  F00C         	call	_lcdEnable	;wreg free
  3422                           
  3423                           ;user.c: 70: _delay((unsigned long)((10)*(4000000/4000.0)));
  3424  00128C  0E0D               	movlw	13
  3425  00128E  6E20               	movwf	??_initLCD& (0+255),c
  3426  001290  0EFC               	movlw	252
  3427  001292                     u1327:
  3428  001292  2EE8               	decfsz	wreg,f,c
  3429  001294  D7FE               	bra	u1327
  3430  001296  2E20               	decfsz	??_initLCD& (0+255),f,c
  3431  001298  D7FC               	bra	u1327
  3432                           
  3433                           ;user.c: 72: PORTD = 0b00000000;
  3434  00129A  0E00               	movlw	0
  3435  00129C  6E83               	movwf	3971,c	;volatile
  3436                           
  3437                           ;user.c: 73: lcdEnable();
  3438  00129E  EC42  F00C         	call	_lcdEnable	;wreg free
  3439                           
  3440                           ;user.c: 74: PORTD = 0b00000011;
  3441  0012A2  0E03               	movlw	3
  3442  0012A4  6E83               	movwf	3971,c	;volatile
  3443                           
  3444                           ;user.c: 75: lcdEnable();
  3445  0012A6  EC42  F00C         	call	_lcdEnable	;wreg free
  3446                           
  3447                           ;user.c: 76: _delay((unsigned long)((30)*(4000000/4000.0)));
  3448  0012AA  0E27               	movlw	39
  3449  0012AC  6E20               	movwf	??_initLCD& (0+255),c
  3450  0012AE  0EF5               	movlw	245
  3451  0012B0                     u1337:
  3452  0012B0  2EE8               	decfsz	wreg,f,c
  3453  0012B2  D7FE               	bra	u1337
  3454  0012B4  2E20               	decfsz	??_initLCD& (0+255),f,c
  3455  0012B6  D7FC               	bra	u1337
  3456  0012B8  F000               	nop	
  3457  0012BA  0012               	return		;funcret
  3458  0012BC                     __end_of_initLCD:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           intcon	equ	0xFF2
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           indf1	equ	0xFE7
  3468                           postdec1	equ	0xFE5
  3469                           plusw1	equ	0xFE3
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           plusw2	equ	0xFDB
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _lcdEnable *****************
  3481 ;; Defined at:
  3482 ;;		line 41 in file "user.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		None
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    3
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_initLCD
  3507 ;;		_lcdWriteChar
  3508 ;;		_clearDisplay
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text31
  3513  001884                     __ptext31:
  3514                           	opt stack 0
  3515  001884                     _lcdEnable:
  3516                           	opt stack 25
  3517                           
  3518                           ;user.c: 42: PORTCbits.RC5 = 1;
  3519                           
  3520                           ;incstack = 0
  3521  001884  8A82               	bsf	3970,5,c	;volatile
  3522                           
  3523                           ;user.c: 43: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3524  001886  F000               	nop	
  3525                           
  3526                           ;user.c: 44: PORTCbits.RC5 = 0;
  3527  001888  9A82               	bcf	3970,5,c	;volatile
  3528  00188A  0012               	return		;funcret
  3529  00188C                     __end_of_lcdEnable:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           intcon	equ	0xFF2
  3536                           postinc0	equ	0xFEE
  3537                           wreg	equ	0xFE8
  3538                           indf1	equ	0xFE7
  3539                           postdec1	equ	0xFE5
  3540                           plusw1	equ	0xFE3
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _InitApp *****************
  3552 ;; Defined at:
  3553 ;;		line 28 in file "user.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		None
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    3
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_main
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text32
  3582  00188E                     __ptext32:
  3583                           	opt stack 0
  3584  00188E                     _InitApp:
  3585                           	opt stack 27
  3586                           
  3587                           ;incstack = 0
  3588  00188E  0012               	return		;funcret
  3589  001890                     __end_of_InitApp:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           intcon	equ	0xFF2
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           indf1	equ	0xFE7
  3599                           postdec1	equ	0xFE5
  3600                           plusw1	equ	0xFE3
  3601                           fsr1h	equ	0xFE2
  3602                           fsr1l	equ	0xFE1
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           plusw2	equ	0xFDB
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _ConfigureOscillator *****************
  3612 ;; Defined at:
  3613 ;;		line 24 in file "system.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		None
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    3
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_main
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text33
  3642  001890                     __ptext33:
  3643                           	opt stack 0
  3644  001890                     _ConfigureOscillator:
  3645                           	opt stack 27
  3646                           
  3647                           ;incstack = 0
  3648  001890  0012               	return		;funcret
  3649  001892                     __end_of_ConfigureOscillator:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           intcon	equ	0xFF2
  3656                           postinc0	equ	0xFEE
  3657                           wreg	equ	0xFE8
  3658                           indf1	equ	0xFE7
  3659                           postdec1	equ	0xFE5
  3660                           plusw1	equ	0xFE3
  3661                           fsr1h	equ	0xFE2
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           plusw2	equ	0xFDB
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _low_isr *****************
  3672 ;; Defined at:
  3673 ;;		line 77 in file "interrupts.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		None
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:       17 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    2
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		Interrupt level 1
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	intcodelo
  3702  000018                     __pintcodelo:
  3703                           	opt stack 0
  3704  000018                     _low_isr:
  3705                           	opt stack 24
  3706                           
  3707                           ;incstack = 0
  3708  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3709  00001A  CFD8 F00F          	movff	status,??_low_isr
  3710  00001E  CFE8 F010          	movff	wreg,??_low_isr+1
  3711  000022  CFE0 F011          	movff	bsr,??_low_isr+2
  3712  000026  CFFA F012          	movff	pclath,??_low_isr+3
  3713  00002A  CFFB F013          	movff	pclatu,??_low_isr+4
  3714  00002E  CFE9 F014          	movff	fsr0l,??_low_isr+5
  3715  000032  CFEA F015          	movff	fsr0h,??_low_isr+6
  3716  000036  CFE1 F016          	movff	fsr1l,??_low_isr+7
  3717  00003A  CFE2 F017          	movff	fsr1h,??_low_isr+8
  3718  00003E  CFD9 F018          	movff	fsr2l,??_low_isr+9
  3719  000042  CFDA F019          	movff	fsr2h,??_low_isr+10
  3720  000046  CFF3 F01A          	movff	prodl,??_low_isr+11
  3721  00004A  CFF4 F01B          	movff	prodh,??_low_isr+12
  3722  00004E  CFF6 F01C          	movff	tblptrl,??_low_isr+13
  3723  000052  CFF7 F01D          	movff	tblptrh,??_low_isr+14
  3724  000056  CFF8 F01E          	movff	tblptru,??_low_isr+15
  3725  00005A  CFF5 F01F          	movff	tablat,??_low_isr+16
  3726  00005E  C01F  FFF5         	movff	??_low_isr+16,tablat
  3727  000062  C01E  FFF8         	movff	??_low_isr+15,tblptru
  3728  000066  C01D  FFF7         	movff	??_low_isr+14,tblptrh
  3729  00006A  C01C  FFF6         	movff	??_low_isr+13,tblptrl
  3730  00006E  C01B  FFF4         	movff	??_low_isr+12,prodh
  3731  000072  C01A  FFF3         	movff	??_low_isr+11,prodl
  3732  000076  C019  FFDA         	movff	??_low_isr+10,fsr2h
  3733  00007A  C018  FFD9         	movff	??_low_isr+9,fsr2l
  3734  00007E  C017  FFE2         	movff	??_low_isr+8,fsr1h
  3735  000082  C016  FFE1         	movff	??_low_isr+7,fsr1l
  3736  000086  C015  FFEA         	movff	??_low_isr+6,fsr0h
  3737  00008A  C014  FFE9         	movff	??_low_isr+5,fsr0l
  3738  00008E  C013  FFFB         	movff	??_low_isr+4,pclatu
  3739  000092  C012  FFFA         	movff	??_low_isr+3,pclath
  3740  000096  C011  FFE0         	movff	??_low_isr+2,bsr
  3741  00009A  C010  FFE8         	movff	??_low_isr+1,wreg
  3742  00009E  C00F  FFD8         	movff	??_low_isr,status
  3743  0000A2  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3744  0000A4  0010               	retfie	
  3745  0000A6                     __end_of_low_isr:
  3746                           	opt stack 0
  3747                           pclatu	equ	0xFFB
  3748                           pclath	equ	0xFFA
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           postinc0	equ	0xFEE
  3757                           fsr0h	equ	0xFEA
  3758                           fsr0l	equ	0xFE9
  3759                           wreg	equ	0xFE8
  3760                           indf1	equ	0xFE7
  3761                           postdec1	equ	0xFE5
  3762                           plusw1	equ	0xFE3
  3763                           fsr1h	equ	0xFE2
  3764                           fsr1l	equ	0xFE1
  3765                           bsr	equ	0xFE0
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           plusw2	equ	0xFDB
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function _high_isr *****************
  3775 ;; Defined at:
  3776 ;;		line 31 in file "interrupts.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;Total ram usage:       14 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    1
  3797 ;; This function calls:
  3798 ;;		_servoInteruptions
  3799 ;; This function is called by:
  3800 ;;		Interrupt level 2
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	intcode
  3805  000008                     __pintcode:
  3806                           	opt stack 0
  3807  000008                     _high_isr:
  3808                           	opt stack 24
  3809                           
  3810                           ;incstack = 0
  3811  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3812  00000A  EF5E  F009         	goto	int_func
  3813                           pclatu	equ	0xFFB
  3814                           pclath	equ	0xFFA
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           intcon	equ	0xFF2
  3822                           postinc0	equ	0xFEE
  3823                           fsr0h	equ	0xFEA
  3824                           fsr0l	equ	0xFE9
  3825                           wreg	equ	0xFE8
  3826                           indf1	equ	0xFE7
  3827                           postdec1	equ	0xFE5
  3828                           plusw1	equ	0xFE3
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           bsr	equ	0xFE0
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           plusw2	equ	0xFDB
  3836                           fsr2h	equ	0xFDA
  3837                           fsr2l	equ	0xFD9
  3838                           status	equ	0xFD8
  3839                           
  3840                           	psect	intcode_body
  3841  0012BC                     __pintcode_body:
  3842                           	opt stack 24
  3843  0012BC                     int_func:
  3844                           	opt stack 24
  3845  0012BC  CFFA F001          	movff	pclath,??_high_isr
  3846  0012C0  CFFB F002          	movff	pclatu,??_high_isr+1
  3847  0012C4  CFE9 F003          	movff	fsr0l,??_high_isr+2
  3848  0012C8  CFEA F004          	movff	fsr0h,??_high_isr+3
  3849  0012CC  CFE1 F005          	movff	fsr1l,??_high_isr+4
  3850  0012D0  CFE2 F006          	movff	fsr1h,??_high_isr+5
  3851  0012D4  CFD9 F007          	movff	fsr2l,??_high_isr+6
  3852  0012D8  CFDA F008          	movff	fsr2h,??_high_isr+7
  3853  0012DC  CFF3 F009          	movff	prodl,??_high_isr+8
  3854  0012E0  CFF4 F00A          	movff	prodh,??_high_isr+9
  3855  0012E4  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  3856  0012E8  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  3857  0012EC  CFF8 F00D          	movff	tblptru,??_high_isr+12
  3858  0012F0  CFF5 F00E          	movff	tablat,??_high_isr+13
  3859                           
  3860                           ;interrupts.c: 67: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  3861  0012F4  BAF2               	btfsc	intcon,5,c	;volatile
  3862  0012F6  A4F2               	btfss	intcon,2,c	;volatile
  3863  0012F8  D006               	goto	i2l22
  3864                           
  3865                           ;interrupts.c: 68: servoInteruptions();
  3866  0012FA  ECA1  F009         	call	_servoInteruptions	;wreg free
  3867                           
  3868                           ;interrupts.c: 69: INTCONbits.TMR0IF = 0;
  3869  0012FE  94F2               	bcf	intcon,2,c	;volatile
  3870                           
  3871                           ;interrupts.c: 70: TMR0H = 0xFF;
  3872  001300  68D7               	setf	4055,c	;volatile
  3873                           
  3874                           ;interrupts.c: 71: TMR0L = 0x80;
  3875  001302  0E80               	movlw	128
  3876  001304  6ED6               	movwf	4054,c	;volatile
  3877  001306                     i2l22:
  3878  001306  C00E  FFF5         	movff	??_high_isr+13,tablat
  3879  00130A  C00D  FFF8         	movff	??_high_isr+12,tblptru
  3880  00130E  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  3881  001312  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  3882  001316  C00A  FFF4         	movff	??_high_isr+9,prodh
  3883  00131A  C009  FFF3         	movff	??_high_isr+8,prodl
  3884  00131E  C008  FFDA         	movff	??_high_isr+7,fsr2h
  3885  001322  C007  FFD9         	movff	??_high_isr+6,fsr2l
  3886  001326  C006  FFE2         	movff	??_high_isr+5,fsr1h
  3887  00132A  C005  FFE1         	movff	??_high_isr+4,fsr1l
  3888  00132E  C004  FFEA         	movff	??_high_isr+3,fsr0h
  3889  001332  C003  FFE9         	movff	??_high_isr+2,fsr0l
  3890  001336  C002  FFFB         	movff	??_high_isr+1,pclatu
  3891  00133A  C001  FFFA         	movff	??_high_isr,pclath
  3892  00133E  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3893  001340  0011               	retfie		f
  3894  001342                     __end_of_high_isr:
  3895                           	opt stack 0
  3896                           pclatu	equ	0xFFB
  3897                           pclath	equ	0xFFA
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           intcon	equ	0xFF2
  3905                           postinc0	equ	0xFEE
  3906                           fsr0h	equ	0xFEA
  3907                           fsr0l	equ	0xFE9
  3908                           wreg	equ	0xFE8
  3909                           indf1	equ	0xFE7
  3910                           postdec1	equ	0xFE5
  3911                           plusw1	equ	0xFE3
  3912                           fsr1h	equ	0xFE2
  3913                           fsr1l	equ	0xFE1
  3914                           bsr	equ	0xFE0
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           plusw2	equ	0xFDB
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _servoInteruptions *****************
  3924 ;; Defined at:
  3925 ;;		line 10 in file "servo.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_high_isr
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text36
  3953  001342                     __ptext36:
  3954                           	opt stack 0
  3955  001342                     _servoInteruptions:
  3956                           	opt stack 24
  3957                           
  3958                           ;servo.c: 12: if(onCounter != 0 || offCounter != 0){
  3959                           
  3960                           ;incstack = 0
  3961  001342  5048               	movf	_onCounter,w,c
  3962  001344  1049               	iorwf	_onCounter+1,w,c
  3963  001346  A4D8               	btfss	status,2,c
  3964  001348  D004               	goto	i2l1186
  3965  00134A  5046               	movf	_offCounter,w,c
  3966  00134C  1047               	iorwf	_offCounter+1,w,c
  3967  00134E  B4D8               	btfsc	status,2,c
  3968  001350  D00E               	goto	i2l1198
  3969  001352                     i2l1186:
  3970                           
  3971                           ;servo.c: 13: if(onCounter != 0){
  3972  001352  5048               	movf	_onCounter,w,c
  3973  001354  1049               	iorwf	_onCounter+1,w,c
  3974  001356  B4D8               	btfsc	status,2,c
  3975  001358  D005               	goto	i2l1192
  3976                           
  3977                           ;servo.c: 14: onCounter--;
  3978  00135A  0648               	decf	_onCounter,f,c
  3979  00135C  A0D8               	btfss	status,0,c
  3980  00135E  0649               	decf	_onCounter+1,f,c
  3981                           
  3982                           ;servo.c: 15: PORTCbits.RC2 = 1;
  3983  001360  8482               	bsf	3970,2,c	;volatile
  3984                           
  3985                           ;servo.c: 16: }
  3986  001362  0012               	return	
  3987  001364                     i2l1192:
  3988                           
  3989                           ;servo.c: 17: else{
  3990                           ;servo.c: 18: offCounter--;
  3991  001364  0646               	decf	_offCounter,f,c
  3992  001366  A0D8               	btfss	status,0,c
  3993  001368  0647               	decf	_offCounter+1,f,c
  3994                           
  3995                           ;servo.c: 19: PORTCbits.RC2 = 0;
  3996  00136A  9482               	bcf	3970,2,c	;volatile
  3997                           
  3998                           ;servo.c: 20: }
  3999                           ;servo.c: 21: return;
  4000  00136C  0012               	return	
  4001  00136E                     i2l1198:
  4002                           
  4003                           ;servo.c: 22: }
  4004                           ;servo.c: 23: if(servo_counter < 30){
  4005  00136E  5045               	movf	_servo_counter+1,w,c
  4006  001370  E12A               	bnz	i2l379
  4007  001372  0E1E               	movlw	30
  4008  001374  5C44               	subwf	_servo_counter,w,c
  4009  001376  B0D8               	btfsc	status,0,c
  4010  001378  0012               	return	
  4011                           
  4012                           ;servo.c: 24: servo_counter++;
  4013  00137A  4A44               	infsnz	_servo_counter,f,c
  4014  00137C  2A45               	incf	_servo_counter+1,f,c
  4015                           
  4016                           ;servo.c: 25: if(servo_direction == 3){
  4017  00137E  0E03               	movlw	3
  4018  001380  184A               	xorwf	_servo_direction,w,c
  4019  001382  104B               	iorwf	_servo_direction+1,w,c
  4020  001384  A4D8               	btfss	status,2,c
  4021  001386  D009               	goto	i2l1206
  4022                           
  4023                           ;servo.c: 26: onCounter = 5;
  4024  001388  0E00               	movlw	0
  4025  00138A  6E49               	movwf	_onCounter+1,c
  4026  00138C  0E05               	movlw	5
  4027  00138E  6E48               	movwf	_onCounter,c
  4028                           
  4029                           ;servo.c: 27: offCounter = 15;
  4030  001390  0E00               	movlw	0
  4031  001392  6E47               	movwf	_offCounter+1,c
  4032  001394  0E0F               	movlw	15
  4033  001396  6E46               	movwf	_offCounter,c
  4034                           
  4035                           ;servo.c: 28: }
  4036  001398  0012               	return	
  4037  00139A                     i2l1206:
  4038                           
  4039                           ;servo.c: 29: else if(servo_direction == 1){
  4040  00139A  044A               	decf	_servo_direction,w,c
  4041  00139C  104B               	iorwf	_servo_direction+1,w,c
  4042  00139E  A4D8               	btfss	status,2,c
  4043  0013A0  D009               	goto	i2l1210
  4044                           
  4045                           ;servo.c: 30: onCounter = 11;
  4046  0013A2  0E00               	movlw	0
  4047  0013A4  6E49               	movwf	_onCounter+1,c
  4048  0013A6  0E0B               	movlw	11
  4049  0013A8  6E48               	movwf	_onCounter,c
  4050                           
  4051                           ;servo.c: 31: offCounter = 9;
  4052  0013AA  0E00               	movlw	0
  4053  0013AC  6E47               	movwf	_offCounter+1,c
  4054  0013AE  0E09               	movlw	9
  4055  0013B0  6E46               	movwf	_offCounter,c
  4056                           
  4057                           ;servo.c: 32: }
  4058  0013B2  0012               	return	
  4059  0013B4                     i2l1210:
  4060                           
  4061                           ;servo.c: 33: else{
  4062                           ;servo.c: 34: onCounter = 8;
  4063  0013B4  0E00               	movlw	0
  4064  0013B6  6E49               	movwf	_onCounter+1,c
  4065  0013B8  0E08               	movlw	8
  4066  0013BA  6E48               	movwf	_onCounter,c
  4067                           
  4068                           ;servo.c: 35: offCounter = 12;
  4069  0013BC  0E00               	movlw	0
  4070  0013BE  6E47               	movwf	_offCounter+1,c
  4071  0013C0  0E0C               	movlw	12
  4072  0013C2  6E46               	movwf	_offCounter,c
  4073  0013C4  0012               	return	
  4074  0013C6                     i2l379:
  4075  0013C6  0012               	return		;funcret
  4076  0013C8                     __end_of_servoInteruptions:
  4077                           	opt stack 0
  4078                           pclatu	equ	0xFFB
  4079                           pclath	equ	0xFFA
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           postinc0	equ	0xFEE
  4088                           fsr0h	equ	0xFEA
  4089                           fsr0l	equ	0xFE9
  4090                           wreg	equ	0xFE8
  4091                           indf1	equ	0xFE7
  4092                           postdec1	equ	0xFE5
  4093                           plusw1	equ	0xFE3
  4094                           fsr1h	equ	0xFE2
  4095                           fsr1l	equ	0xFE1
  4096                           bsr	equ	0xFE0
  4097                           indf2	equ	0xFDF
  4098                           postinc2	equ	0xFDE
  4099                           postdec2	equ	0xFDD
  4100                           plusw2	equ	0xFDB
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           pclatu	equ	0xFFB
  4105                           pclath	equ	0xFFA
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           postinc0	equ	0xFEE
  4114                           fsr0h	equ	0xFEA
  4115                           fsr0l	equ	0xFE9
  4116                           wreg	equ	0xFE8
  4117                           indf1	equ	0xFE7
  4118                           postdec1	equ	0xFE5
  4119                           plusw1	equ	0xFE3
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           bsr	equ	0xFE0
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           plusw2	equ	0xFDB
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131                           	psect	rparam
  4132  0000                     pclatu	equ	0xFFB
  4133                           pclath	equ	0xFFA
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           postinc0	equ	0xFEE
  4142                           fsr0h	equ	0xFEA
  4143                           fsr0l	equ	0xFE9
  4144                           wreg	equ	0xFE8
  4145                           indf1	equ	0xFE7
  4146                           postdec1	equ	0xFE5
  4147                           plusw1	equ	0xFE3
  4148                           fsr1h	equ	0xFE2
  4149                           fsr1l	equ	0xFE1
  4150                           bsr	equ	0xFE0
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           postdec2	equ	0xFDD
  4154                           plusw2	equ	0xFDB
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159                           	psect	temp
  4160  000051                     btemp:
  4161                           	opt stack 0
  4162  000051                     	ds	1
  4163  0000                     int$flags	set	btemp
  4164                           pclatu	equ	0xFFB
  4165                           pclath	equ	0xFFA
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           fsr0h	equ	0xFEA
  4175                           fsr0l	equ	0xFE9
  4176                           wreg	equ	0xFE8
  4177                           indf1	equ	0xFE7
  4178                           postdec1	equ	0xFE5
  4179                           plusw1	equ	0xFE3
  4180                           fsr1h	equ	0xFE2
  4181                           fsr1l	equ	0xFE1
  4182                           bsr	equ	0xFE0
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           plusw2	equ	0xFDB
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        17
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45      80
    BANK0           128     39      54
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    lcdWriteString@str	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[13]), STR_1(CODE[2]), main@str(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_myQueueCheck
    _readZ->_readDataByte
    _readGesture->_readDataByte
    _readDataByte->_writeDataByte
    _writeDataByte->_sendByte
    _myQueuePush->___awmod
    _myQueueCheck->___awmod
    _moreLight->_dutyCycleDown
    _dutyCycleDown->_setDutyCycle
    _lightSwitch->_initQueue
    _dutyCycleSet->_setDutyCycle
    _dutyCycleClear->_setDutyCycle
    _dutyCycleUp->_setDutyCycle
    _lcdWriteString->_lcdWriteChar
    _lcdWriteInt->_lcdWriteUI
    _lcdWriteUI->___lwdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _lcdWriteInt->_lcdWriteUI

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    6055
                                             43 COMRAM     2     2      0
                                             22 BANK0     17    17      0
                _ConfigureOscillator
                            _InitApp
                            _initLCD
                            _initPWM
                          _initQueue
                        _lcdWriteInt
                     _lcdWriteString
                          _lessLight
                        _lightSwitch
                          _moreLight
                       _myQueueCheck
                        _myQueuePush
                        _readGesture
                              _readZ
                       _startTurning
 ---------------------------------------------------------------------------------
 (1) _startTurning                                         2     0      2     339
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readZ                                                1     1      0     858
                                             37 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (1) _readGesture                                          1     1      0     858
                                             37 COMRAM     1     1      0
                       _readDataByte
 ---------------------------------------------------------------------------------
 (2) _readDataByte                                         3     2      1     824
                                             34 COMRAM     3     2      1
                         _I2CRestart
                        _receiveByte
                           _sendByte
                      _writeDataByte
 ---------------------------------------------------------------------------------
 (3) _writeDataByte                                        2     1      1     170
                                             32 COMRAM     2     1      1
                            _I2CInit
                           _I2CStart
                           _sendByte
 ---------------------------------------------------------------------------------
 (4) _sendByte                                             1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _receiveByte                                          1     1      0      34
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myQueuePush                                          2     0      2     849
                                             37 COMRAM     2     0      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _myQueueCheck                                         6     4      2     840
                                             37 COMRAM     6     4      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     741
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _moreLight                                            0     0      0      68
                      _dutyCycleDown
 ---------------------------------------------------------------------------------
 (2) _dutyCycleDown                                        6     6      0      68
                                             32 COMRAM     6     6      0
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lightSwitch                                          0     0      0     161
                     _dutyCycleClear
                       _dutyCycleSet
                          _initQueue
 ---------------------------------------------------------------------------------
 (2) _initQueue                                            2     2      0      99
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dutyCycleSet                                         0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (2) _dutyCycleClear                                       0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (1) _lessLight                                            0     0      0      31
                        _dutyCycleUp
 ---------------------------------------------------------------------------------
 (2) _dutyCycleUp                                          0     0      0      31
                       _setDutyCycle
 ---------------------------------------------------------------------------------
 (3) _setDutyCycle                                         1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteString                                       6     4      2     423
                                             33 COMRAM     6     4      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdWriteInt                                          2     0      2    1421
                                             40 COMRAM     2     0      2
                       _lcdWriteChar
                         _lcdWriteUI
 ---------------------------------------------------------------------------------
 (2) _lcdWriteUI                                          24    22      2    1186
                                             38 COMRAM     2     0      2
                                              0 BANK0     22    22      0
                            ___lwdiv
                            ___lwmod
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _lcdWriteChar                                         2     2      0      62
                                             31 COMRAM     2     2      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             31 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0       0
                                             31 COMRAM     1     1      0
                          _lcdEnable
 ---------------------------------------------------------------------------------
 (3) _lcdEnable                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
                  _servoInteruptions
 ---------------------------------------------------------------------------------
 (7) _servoInteruptions                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _initLCD
     _lcdEnable
   _initPWM
   _initQueue
   _lcdWriteInt
     _lcdWriteChar
       _lcdEnable
     _lcdWriteUI
       ___lwdiv
       ___lwmod
       _lcdWriteChar
         _lcdEnable
   _lcdWriteString
     _lcdWriteChar
       _lcdEnable
   _lessLight
     _dutyCycleUp
       _setDutyCycle
   _lightSwitch
     _dutyCycleClear
       _setDutyCycle
     _dutyCycleSet
       _setDutyCycle
     _initQueue
   _moreLight
     _dutyCycleDown
       _setDutyCycle
   _myQueueCheck
     ___awmod
   _myQueuePush
     ___awmod
   _readGesture
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte
   _readZ
     _readDataByte
       _I2CRestart
       _receiveByte
       _sendByte
       _writeDataByte
         _I2CInit
         _I2CStart
         _sendByte
   _startTurning

 _low_isr (ROOT)

 _high_isr (ROOT)
   _servoInteruptions

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     27      36       5       42.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      86      34        0.0%
DATA                 0      0      86       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Apr 21 15:29:31 2017

                 lcdWriteUI@i 0094                            bsr 000FE0                   __CFG_BORV$3 000000  
         __size_of_I2CRestart 0008                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                 __CFG_WDT$ON 000000                           l220 1866                           l232 182E  
                         l226 186E                           l238 180A                           l349 16CE  
                         l787 160E                           l797 1650                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           _ack 004D  
             __end_of_I2CInit 1840                  ___awmod@sign 0025                           wreg 000FE8  
               lcdWriteUI@num 0027                ??_lcdWriteChar 0020                          l2020 15E4  
                        l2100 154C                          l2030 1604                          l2022 15E8  
                        l2102 1556                          l2040 162E                          l2104 1562  
                        l2018 15DC                          l2042 1632                          l2106 1568  
                        l2130 14DE                          l2122 14C4                          l2052 169E  
                        l2108 156C                          l2132 14E6                          l2046 1646  
                        l2038 1626                          l2134 14EA                          l2142 1508  
                        l2126 14D0                          l2230 1456                          l2072 1206  
                        l2064 11B0                          l2056 16AE                          l2240 14A6  
                        l2074 1224                          l2218 1772                          l2250 1790  
                        l2146 1516                          l2138 14FE                          l2226 1446  
                        l2092 17C2                          l2236 149E                          l2254 1798  
                        l2270 1724                          l2262 171C                          l2350 10F8  
                        l2342 10E2                          l2326 1088                          l2352 110A  
                        l2344 10EC                          l2194 13D2                          l2266 1720  
                        l2258 1718                          l2354 111C                          l2346 10F2  
                        l2276 1728                          l2198 1408                          STR_1 100E  
                        STR_2 1001                          u1110 1494                          u1060 1400  
                        u1070 1436                          u1207 10D6                          u1217 1110  
                        u1161 1052                          u1307 125E                          u1067 13F6  
                        u1227 1132                          u1317 1276                          u1077 142C  
                        u1237 1154                          _LATB 000F8A                          u1327 1292  
                        u1247 1176                          u1337 12B0                          u1257 1198  
                        u1267 16DA                          u1187 103C                          u1277 16F0  
                        u1197 1070                          u1287 1702                          u1297 123C  
                        i2l22 1306                  _startTurning 17E4              ??_dutyCycleClear 0021  
                        _main 1012                          _iter 0042                          _rate 0050  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0051  
            __end_of_I2CStart 186C                          prodh 000FF4                          prodl 000FF3  
                        start 00A6                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               __end_of_InitApp 1890                  ?_readGesture 0001  
                ?_lightSwitch 0001                lcdWriteInt@num 0029                         ?_main 0001  
             __end_of___awmod 1520                         _T0CON 000FD5                         _T2CON 000FCA  
             __end_of___lwdiv 1618               __end_of___lwmod 165A                         i2l379 13C6  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _PORTB 000F81  
                       _PORTD 000F83                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95           _ConfigureOscillator 1890  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                  ?_dutyCycleUp 0001                 __CFG_WRTB$OFF 000000  
                       __addr 004C                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 12BC                __CFG_EBTRB$OFF 000000               __end_of_initPWM 17E4  
                       _readZ 17F6               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8                  ?_receiveByte 0001                __CFG_PBADEN$ON 000000  
        ?_ConfigureOscillator 0001               __initialization 1574                 ?_readDataByte 0023  
                __end_of_main 11A6               lcdWriteUI@stack 0080                     ??_I2CInit 0020  
              __CFG_OSC$RCIO6 000000                        ??_main 002C                 __activetblptr 000002  
            ??_lcdWriteString 0024                  ?_myQueuePush 0026                        ?_readZ 0001  
                      _CCPR2L 000FBB                  ??_I2CRestart 0020                        i2l1210 13B4  
                      i2l1206 139A                        i2l1192 1364                        i2l1186 1352  
                      i2l1198 136E                        _SSPBUF 000FC9                     ??_InitApp 0020  
       ??_ConfigureOscillator 0020          __size_of_lcdWriteInt 0020                ??_readDataByte 0024  
              __CFG_XINST$OFF 000000                 ?_dutyCycleSet 0001              __end_of_high_isr 1342  
        __end_of_lcdWriteChar 170A                __CFG_STVREN$ON 000000                     ??___awmod 0024  
             lcdWriteString@i 0026                     ??___lwdiv 0024                     ??___lwmod 0024  
                      clear_0 15B2               ___awmod@divisor 0022               ___awmod@counter 0024  
          __end_of_I2CRestart 1874              __end_of_sendByte 1834                     ??_initLCD 0020  
                   ??_initPWM 0020                  __pdataCOMRAM 004F        __size_of_writeDataByte 0018  
                   ?_I2CStart 0001                  __mediumconst 0000                     ??_low_isr 000F  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
      __size_of_dutyCycleDown 0054                    __accesstop 0080       __end_of__initialization 15B8  
               ___rparam_used 000001                ??_dutyCycleSet 0021                __pcstackCOMRAM 0001  
                __pidataBANK0 1816                 __end_of_readZ 1806            __size_of_lcdEnable 0008  
        __size_of_readGesture 0034          __size_of_lightSwitch 001E                    ??_I2CStart 0020  
                     ??_readZ 0026          __size_of_dutyCycleUp 0018                 ?_setDutyCycle 0001  
               ?_myQueueCheck 0026            __size_of_initQueue 003A            __size_of_lessLight 000C  
               _writeDataByte 179E          __size_of_receiveByte 0010                 _dutyCycleDown 1520  
          __size_of_moreLight 000C                       _CCP2CON 000FBA                       _I2CInit 1834  
           startTurning@dirct 0020                    _lcdWriteUI 11A6          __end_of_readDataByte 1760  
        __size_of_myQueuePush 003C             _dutyCycleDown$627 0025              writeDataByte@reg 0021  
                   ?_high_isr 0001                ??_setDutyCycle 0020                ??_myQueueCheck 0028  
                  _offCounter 0046             __end_of_lcdEnable 188C                ?_writeDataByte 0021  
                     _InitApp 188E         __size_of_lcdWriteChar 003A                     ?_sendByte 0001  
                     __Hparam 0000                       __Lparam 0000                ?_dutyCycleDown 0001  
                     ___awmod 14B0                       ___lwdiv 15C6                       ___lwmod 1618  
                __psmallconst 1000                       __pcinit 1574                 setDutyCycle@x 0020  
                     __ramtop 1000                 myQueueCheck@i 002A                       __ptext0 1012  
                     __ptext1 17E4                       __ptext2 17F6                       __ptext3 170A  
                     __ptext4 173E                       __ptext5 179E                       __ptext6 1826  
                     __ptext7 1864                       __ptext8 1834                       __ptext9 1806  
                     _initLCD 1232                       _initPWM 17CE             __end_of_initQueue 16D0  
           __end_of_lessLight 1858                     _T2CONbits 000FCA              ___awmod@dividend 0020  
                     _low_isr 0018          __end_of_dutyCycleSet 187C                       main@ges 00A6  
                     main@pos 00A5                       main@str 0096                    ??_high_isr 0001  
                _lcdWriteChar 16D0                __pintcode_body 12BC             __end_of_moreLight 184C  
        end_of_initialization 15B8                 __Lmediumconst 0000                       int_func 12BC  
            readDataByte@addr 0025              readDataByte@retc 0024                    ??_sendByte 0020  
          readGesture@gesture 0026                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_dutyCycleClear 0008  
                   _PORTCbits 000F82                   ?_lcdWriteUI 0027                     _TRISCbits 000F94  
           __size_of_I2CStart 0008   __end_of_ConfigureOscillator 1892               ??_writeDataByte 0022  
             receiveByte@retc 0020                 ??_lcdWriteInt 002B               ??_dutyCycleDown 0021  
               __pidataCOMRAM 188C          __end_of_setDutyCycle 1864          __end_of_myQueueCheck 14B0  
       __size_of_readDataByte 0022               _servo_direction 004A           start_initialization 1574  
               ?_startTurning 0020       __size_of_lcdWriteString 0076                    readZ@z_pos 0026  
         __size_of_lcdWriteUI 008C             lcdWriteChar@leter 0021                    initQueue@i 0020  
                _readDataByte 173E           __end_of_lcdWriteInt 1780                 ??_readGesture 0026  
                 __pdataBANK0 00A7              __CFG_LPT1OSC$OFF 000000                 ??_lightSwitch 0022  
                    ?_I2CInit 0001         __size_of_dutyCycleSet 0008                   __pbssCOMRAM 002E  
               ??_dutyCycleUp 0021                 __pcstackBANK0 0080                ??_startTurning 0022  
           __size_of_high_isr 133A                 ??_receiveByte 0020                      ?_InitApp 0001  
            ___lwdiv@dividend 0020             __CFG_CCP2MX$PORTC 000000                     _lcdEnable 1884  
                _dutyCycleSet 1874                     __pintcode 0008             __size_of_sendByte 000E  
              _dutyCycleClear 187C                      ?___awmod 0020                      ?___lwdiv 0020  
                    ?___lwmod 0020                   __pintcodelo 0018                      ?_initLCD 0001  
                    ?_initPWM 0001                   __smallconst 1000                 ??_myQueuePush 0028  
         __end_of_readGesture 173E                      _I2CStart 1864                     _onCounter 0048  
         __end_of_lightSwitch 179E                      ?_low_isr 0001                     _initQueue 1696  
            ___lwdiv@quotient 0025                     _lessLight 184C                __size_of_readZ 0010  
         __end_of_dutyCycleUp 17CE                  myQueuePush@x 0026                   _lcdWriteInt 1760  
                   _moreLight 1840               readDataByte@reg 0023        __end_of_dutyCycleClear 1884  
                    _PIR1bits 000F9E             _servoInteruptions 1342                    ?_lcdEnable 0001  
                   _valuePort 004E              __CFG_WDTPS$32768 000000         __size_of_setDutyCycle 000C  
       __size_of_myQueueCheck 0072                     main@F2932 00A7           __end_of_receiveByte 1816  
          ?_servoInteruptions 0001             writeDataByte@addr 0022              __size_of_I2CInit 000C  
         ??_servoInteruptions 0001                  ??_lcdWriteUI 0029                    ?_initQueue 0001  
                  ?_lessLight 0001                     copy_data0 1588                    _I2CRestart 186C  
         __end_of_myQueuePush 1696                _lcdWriteString 13C8                  _setDutyCycle 1858  
                _myQueueCheck 143E                    ?_moreLight 0001     __end_of_servoInteruptions 13C8  
            __size_of_InitApp 0002                      __Hrparam 0000               ?_dutyCycleClear 0001  
                    __Lrparam 0000            __end_of_lcdWriteUI 1232            __CFG_BOREN$SBORDIS 000000  
                 _readGesture 170A              __size_of___awmod 0070          __end_of_startTurning 17F6  
                 _lightStatus 004F              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                 _lightSwitch 1780              __size_of_initLCD 008A              __size_of_initPWM 0016  
           lcdWriteString@str 0022                     sendByte@c 0020               ___lwdiv@divisor 0022  
                 _dutyCycleUp 17B6               ___lwdiv@counter 0024              __size_of_low_isr 008E  
                    __ptext10 186C                      __ptext11 165A                      __ptext20 184C  
                    __ptext12 143E                      __ptext21 17B6                      __ptext13 14B0  
                    __ptext30 1232                      __ptext22 1858                      __ptext14 1840  
                    __ptext31 1884                      __ptext23 13C8                      __ptext15 1520  
                    __ptext32 188E                      __ptext24 1760                      __ptext16 1780  
                    __ptext33 1890                      __ptext25 11A6                      __ptext17 1696  
                    __ptext26 16D0                      __ptext18 1874                      __ptext27 1618  
                    __ptext19 187C                      __ptext36 1342                      __ptext28 15C6  
                    __ptext29 17CE        __end_of_lcdWriteString 143E                      _high_isr 0008  
               __size_of_main 0194         __end_of_writeDataByte 17B6                   _receiveByte 1806  
                    _sendByte 1826  __size_of_ConfigureOscillator 0002         __end_of_dutyCycleDown 1574  
                 ??_lcdEnable 0020                      _my_stack 002E                      int$flags 0051  
               _servo_counter 0044                    _INTCONbits 000FF2                   _myQueuePush 165A  
                 ??_initQueue 0020                   ??_lessLight 0021               ?_lcdWriteString 0022  
                 ?_I2CRestart 0001                      intlevel1 0000                      intlevel2 0000  
            ___lwmod@dividend 0020                   ??_moreLight 0027    __size_of_servoInteruptions 0086  
             ___lwmod@divisor 0022               ___lwmod@counter 0024                   _SSPCON1bits 000FC6  
                 _SSPCON2bits 000FC5                 ?_lcdWriteChar 0001                  ?_lcdWriteInt 0029  
       __size_of_startTurning 0012  
